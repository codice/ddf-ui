{{!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
 --}}
  <div class="section">
    <div class="is-header">
        Deprecated
    </div>
    <div class="is-medium-font">
        This page is for if you encounter an existing component like this.  For new dropdowns head over to the dropdowns guide.
    </div>
</div>
 <div class="section">
    <div class="is-header">
        Why is it called static dropdowns?
    </div>
    <div class="is-medium-font">
        Because the html for opening the dropdown is static.  If you need it to be dynamic, check out dynamic dropdowns.
    </div>
</div>
<div class="section">
    <div class="is-header">
        Examples
    </div>
    <div class="examples is-list has-list-highlighting">
        <div class="example">
            <div class="title">
                Dropdown
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleOne"></div>
        </div>
        <div class="example">
            <div class="title">
                Dropdown Using Default Model
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleTwo"></div>
        </div>
        <div class="example">
            <div class="title">
                Dropdown with Icon Only
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-js="showExampleThree"></div>
        </div>
        <div class="example">
            <div class="title">
                 {{bind selector=".example:nth-of-type(4) .title" event="change:title" key=(path "title")}}
            </div>
            <div class="instance is-primary composed-button is-button">
                <!-- this shows how to make a dropdown look like a button!  basically add the composed-button class and one of the other button classes
                    listed on the button guide (is-primary, is-negative, is-neutral, etc.)
                 -->
            </div>
            <div class="editor" data-html="outer"></div>
            <div class="editor" data-js="showExampleFour"></div>
        </div>
        <div class="example">
            <div class="title">
                 Using the Menu Navigation Behavior
            </div>
            <div class="instance">
            </div>
            <div class="editor" data-html="exampleFiveTemplate"></div>
            <div class="editor" data-js="showExampleFive"></div>
        </div>
    </div>
</div>
<div class="section">
    <div class="is-header">
        When to Use Simple
    </div>
    <div class="is-medium-font">
        Utilize the simple dropdown when you need something to show something in a dropdown and the dropdown itself doesn't need to be fancy. 
        What I mean by fancy is probably best explained looking at the complex dropdowns, but I'll give text a try.  Basically, if you just need to show
        some static text / icons that when clicked reveal a dropdown with another component, this is the way to go.  80% of the time this will be enough, but don't
        be afraid to use a complex dropdown (it's not that much more complex!).
    </div>
</div>
<div class="section">
    <div class="is-header">
        How to Use
    </div>
    <div>
        <div class="is-medium-font">
            Import the 'component/dropdown/popout/dropdown.popout.view' into the view where you want the dropdown to be shown.  Make sure you're using a LayoutView and specify a region 
            for the dropdown to occupy.  Call show on the region when appropriate and pass in the return value from the popout component 'createSimpleDropdown' method.  

            The options that you can pass in to the 'createSimpleDropdown' method are:
            <ul>
                <li>
                    leftIcon
                    <ul>
                        <li>
                            Expects a string, such as 'fa fa-bell'.  This should correspond to a font awesome icon or a codice icon.
                        </li>
                    </ul>
                </li>
                <li>
                    rightIcon
                    <ul>
                        <li>
                            Expects a string, such as 'fa fa-bell'.  This should correspond to a font awesome icon or a codice icon.
                        </li>
                    </ul>
                </li>
                <li>
                    label
                    <ul>
                        <li>
                            Expects a string, such as 'My Cool Dropdown'.  This should be descriptive of what your dropdown is.
                        </li>
                    </ul>
                </li>
                <li>
                    componentToShow
                    <ul>
                        <li>
                            Expects a Marionette View.  This view will be passed the basic dropdown model by default, but the modelForComponent option can override that.
                        </li>
                    </ul>
                </li>
                <li>
                    modelForComponent
                    <ul>
                        <li>
                            Expected to be a Backbone model or collection, but really it could be anything.  This is something your componentToShow is expecting to listen to, update, etc.
                            Your componentToShow will recieve this as its model.
                        </li>
                    </ul>
                </li>
                <li>
                    dropdownCompanionBehaviors
                    <ul>
                        <li>
                            Expected to be a list of Marionette behaviors that you want to be put on the dropdown companion (which houses your componentToShow).  At the moment this is only
                            used to pass the object { navigation: {} } so that action menus get a navigation feel to them.  By that I mean it will give you keyboard accessibility in your 
                            menu components for free if used.
                        </li>
                    </ul>
                </li>
                <li>
                    options
                    <ul>
                        <li>
                            The options that you want to pass to your componentToShow.
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</div>