{{!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
 --}}
<div class="section">
    <div class="is-header">
        Examples
    </div>
    <div class="examples is-list has-list-highlighting">
        <div class="example">
            <div class="title">
                Dropdown 1
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-html="exampleOne"></div>
            <div class="editor" data-html="exampleOneDropdown"></div>
            <div class="editor" data-js="exampleOneView"></div>
            <div class="editor" data-js="exampleOneDropdown"></div>
        </div>
        <div class="example">
            <div class="title">
                Dropdown with its own dropdown
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-html="exampleOne"></div>
            <div class="editor" data-html="exampleOneDropdown"></div>
            <div class="editor" data-js="exampleTwoView"></div>
            <div class="editor" data-js="exampleTwoDropdown"></div>
        </div>
        <div class="example">
            <div class="title">
                Dropdown with menu behavior
            </div>
            <div class="instance">
            
            </div>
            <div class="editor" data-html="exampleOne"></div>
            <div class="editor" data-html="exampleThreeDropdown"></div>
            <div class="editor" data-js="exampleThreeView"></div>
            <div class="editor" data-js="exampleThreeDropdown"></div>
        </div>
    </div>
</div>
<div class="section">
    <div class="is-header">
        When to Use
    </div>
    <div class="is-medium-font">
        Utilize dropdowns when you wish to leave the current context in tact, but also need to reveal a list of options, commands, or another view.

        The other methods of making a dropdown are currently deprecated in favor of this method.  Please refrain from utilizing the dropdown.view or the dropdown.companion.view 
        methods when creating new dropdowns. 
    </div>
</div>
<div class="section">
    <div class="is-header">
        How to Use
    </div>
    <div>
        <div class="is-medium-font">
            Import the 'behaviors/dropdown.behavior' into the view where you want the dropdown to be shown. 

            The parameters that you pass in to the behavior are:
            <ul>
                <li>
                    selector (required)
                    <ul>
                        <li>
                            Expects a string, such as '> button'.  This should be a selector that will at most select a single element.   
                            If it can select more than one, things won't break, but it might now behave how you want (it will always pretend you clicked the first one it encountered).
                        </li>
                    </ul>
                </li>
                <li>
                    view (required)
                    <ul>
                        <li>
                            The Marionette View to show when the element corresponding to the selector is clicked.

                            Notice how you can easily extend a view to add the navigation behavior on the fly, as in the example above.
                        </li>
                    </ul>
                </li>
                <li>
                    viewOptions (optional)
                    <ul>
                        <li>
                            The options you want to be passed to the view when it gets initialized (on first click).  
                            Typically this at the very least consists of the model you want to pass to the view.
                        </li>
                    </ul>
                </li>
            </ul>

            If close a dropdown from within the component shown in a dropdown, pull in the dropdown behavior and utilize the 
            closeParentDropdown method by passing in an element or the view.  Calling this when not in a dropdown is harmless.

            Also, the dropdown behavior will attempt to call focus on your component if you implement the method.  This allows you to redirect the focus 
            wherever is best for your component.  If you don't implement this method, it will simply focus to the component itself.
        </div>
    </div>
</div>