/* Copyright (c) Connexta, LLC */
options {
    IGNORE_CASE = true;
    STATIC = false;
}

PARSER_BEGIN(Parser)

package org.codice.ddf.catalog.search.javacc;

import java.io.StringReader;
import java.io.Reader;
import org.codice.ddf.catalog.search.models.BooleanTextFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Parser {
}

PARSER_END(Parser)

SKIP :
{
    " "
    | "\t"
    | "\r"
}

<*> TOKEN : {
  < NEWLINE: "\n" >
}

TOKEN:
{
      <AND: "AND">
   |  <OR:  "OR">
   |  <NOT: "NOT">
   |  <LP: "(">
   |  <RP: ")">
}

TOKEN :
{
     < STRING : (["A"-"Z","a"-"z","0"-"9"])+ >
   | < QUOTED_STRING: "\"" (~["\""])+ "\"" >
}

String SearchExpression() :
{
  String cql;
}
{
    cql = TextSearchExpression()
    <EOF>
    {
      return cql;
    }
}

String TextSearchExpression() :
{
  String left, right;
  Token logicalOperator;
  StringBuilder query = new StringBuilder();
}
{
  left = TextSearchComponent()
  [
    (logicalOperator = <AND> | logicalOperator = <OR>)
    right = TextSearchExpression()
    {

        return query.append(left).append(" ").append(logicalOperator.image).append(" ").append(right).toString();
    }
  ]
  {
    return left;
  }
}

String TextSearchComponent() :
{
    String quotedSearchPhrase;
    List<BooleanTextFilter> searchTextFilters = new ArrayList<>();
    List<BooleanTextFilter> filters = new ArrayList<>();
    StringBuilder query = new StringBuilder();
    String expression;
    Token notOperator = null;
}
{
    (
        quotedSearchPhrase = QuotedSearchPhrase()
        {
          filters.add(new BooleanTextFilter(quotedSearchPhrase.replace("\"", "").replace("'", "''")));
        }
        |
        searchTextFilters = WordSequence()
        {
          filters.addAll(searchTextFilters);
        }
    )+
    {
        return BooleanTextFilter.implicitOr(filters);
    }
    |
    [ notOperator = <NOT> ]
    <LP> expression = TextSearchExpression() <RP>
    {
        if (notOperator == null) {
            return query.append("(").append(expression).append(")").toString();
        } else {
            return query.append("(").append("NOT ").append("(").append(expression).append("))").toString();
        }

    }
}

String QuotedSearchPhrase() :
{
  Token exactPhraseText;
}
{
  exactPhraseText = <QUOTED_STRING>
  {
    return exactPhraseText.image;
  }
}

List<BooleanTextFilter> WordSequence():
{
  Token word;
  List<BooleanTextFilter> filters = new ArrayList<>();
}
{
  (
    word = <STRING>
    {
      filters.add(new BooleanTextFilter(word.image));
    }
  )+
  {
    return filters;
  }
}