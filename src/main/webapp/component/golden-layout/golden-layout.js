import { __read } from "tslib";
import * as React from 'react';
import { useResizableGridContext } from '../resizable-grid/resizable-grid';
import { GoldenLayoutViewReact } from './golden-layout.view';
import Grid from '@mui/material/Grid';
import Paper from '@mui/material/Paper';
import ResultSelector from '../result-selector/result-selector';
import { Elevations } from '../theme/theme';
var useUpdateGoldenLayoutSize = function (_a) {
    var goldenLayout = _a.goldenLayout, closed = _a.closed;
    React.useEffect(function () {
        setTimeout(function () {
            if (goldenLayout && goldenLayout.isInitialised)
                goldenLayout.updateSize();
        }, 100);
    }, [closed, goldenLayout]);
};
export var GoldenLayout = function (_a) {
    var selectionInterface = _a.selectionInterface;
    var _b = __read(React.useState(null), 2), goldenLayout = _b[0], setGoldenLayout = _b[1];
    var closed = useResizableGridContext().closed;
    useUpdateGoldenLayoutSize({ goldenLayout: goldenLayout, closed: closed });
    return (React.createElement(Grid, { "data-id": "results-container", container: true, direction: "column", className: "w-full h-full", wrap: "nowrap" },
        React.createElement(Grid, { item: true, className: "w-full relative z-1 pb-2 pt-2 pr-2 shrink-0" },
            React.createElement(Paper, { elevation: Elevations.panels, className: "w-full py-1 px-2 overflow-hidden" }, goldenLayout ? (React.createElement(ResultSelector, { selectionInterface: selectionInterface, model: selectionInterface.getCurrentQuery(), goldenLayout: goldenLayout })) : null)),
        React.createElement(Grid, { item: true, className: "w-full h-full overflow-hidden shrink-1 pb-2 pr-2" },
            React.createElement(GoldenLayoutViewReact, { selectionInterface: selectionInterface, configName: "goldenLayout", setGoldenLayout: setGoldenLayout }))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29sZGVuLWxheW91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvZ29sZGVuLWxheW91dC9nb2xkZW4tbGF5b3V0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFDMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDNUQsT0FBTyxJQUFJLE1BQU0sb0JBQW9CLENBQUE7QUFDckMsT0FBTyxLQUFLLE1BQU0scUJBQXFCLENBQUE7QUFDdkMsT0FBTyxjQUFjLE1BQU0sb0NBQW9DLENBQUE7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBTTNDLElBQU0seUJBQXlCLEdBQUcsVUFBQyxFQU1sQztRQUxDLFlBQVksa0JBQUEsRUFDWixNQUFNLFlBQUE7SUFLTixLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2QsVUFBVSxDQUFDO1lBQ1QsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLGFBQWE7Z0JBQUUsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQzNFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNULENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQzVCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBRyxVQUFDLEVBQTZCO1FBQTNCLGtCQUFrQix3QkFBQTtJQUN6QyxJQUFBLEtBQUEsT0FBa0MsS0FBSyxDQUFDLFFBQVEsQ0FBTSxJQUFJLENBQUMsSUFBQSxFQUExRCxZQUFZLFFBQUEsRUFBRSxlQUFlLFFBQTZCLENBQUE7SUFDekQsSUFBQSxNQUFNLEdBQUssdUJBQXVCLEVBQUUsT0FBOUIsQ0FBOEI7SUFFNUMseUJBQXlCLENBQUMsRUFBRSxZQUFZLGNBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUE7SUFDbkQsT0FBTyxDQUNMLG9CQUFDLElBQUksZUFDSyxtQkFBbUIsRUFDM0IsU0FBUyxRQUNULFNBQVMsRUFBQyxRQUFRLEVBQ2xCLFNBQVMsRUFBQyxlQUFlLEVBQ3pCLElBQUksRUFBQyxRQUFRO1FBRWIsb0JBQUMsSUFBSSxJQUFDLElBQUksUUFBQyxTQUFTLEVBQUMsNkNBQTZDO1lBQ2hFLG9CQUFDLEtBQUssSUFDSixTQUFTLEVBQUUsVUFBVSxDQUFDLE1BQU0sRUFDNUIsU0FBUyxFQUFDLGtDQUFrQyxJQUUzQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQ2Qsb0JBQUMsY0FBYyxJQUNiLGtCQUFrQixFQUFFLGtCQUFrQixFQUN0QyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsZUFBZSxFQUFFLEVBQzNDLFlBQVksRUFBRSxZQUFZLEdBQzFCLENBQ0gsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNGLENBQ0g7UUFFUCxvQkFBQyxJQUFJLElBQUMsSUFBSSxRQUFDLFNBQVMsRUFBQyxrREFBa0Q7WUFDckUsb0JBQUMscUJBQXFCLElBQ3BCLGtCQUFrQixFQUFFLGtCQUFrQixFQUN0QyxVQUFVLEVBQUMsY0FBYyxFQUN6QixlQUFlLEVBQUUsZUFBZSxHQUNoQyxDQUNHLENBQ0YsQ0FDUixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VSZXNpemFibGVHcmlkQ29udGV4dCB9IGZyb20gJy4uL3Jlc2l6YWJsZS1ncmlkL3Jlc2l6YWJsZS1ncmlkJ1xuaW1wb3J0IHsgR29sZGVuTGF5b3V0Vmlld1JlYWN0IH0gZnJvbSAnLi9nb2xkZW4tbGF5b3V0LnZpZXcnXG5pbXBvcnQgR3JpZCBmcm9tICdAbXVpL21hdGVyaWFsL0dyaWQnXG5pbXBvcnQgUGFwZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9QYXBlcidcbmltcG9ydCBSZXN1bHRTZWxlY3RvciBmcm9tICcuLi9yZXN1bHQtc2VsZWN0b3IvcmVzdWx0LXNlbGVjdG9yJ1xuaW1wb3J0IHsgRWxldmF0aW9ucyB9IGZyb20gJy4uL3RoZW1lL3RoZW1lJ1xuXG50eXBlIFByb3BzID0ge1xuICBzZWxlY3Rpb25JbnRlcmZhY2U6IGFueVxufVxuXG5jb25zdCB1c2VVcGRhdGVHb2xkZW5MYXlvdXRTaXplID0gKHtcbiAgZ29sZGVuTGF5b3V0LFxuICBjbG9zZWQsXG59OiB7XG4gIGNsb3NlZDogYm9vbGVhblxuICBnb2xkZW5MYXlvdXQ6IGFueVxufSkgPT4ge1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKGdvbGRlbkxheW91dCAmJiBnb2xkZW5MYXlvdXQuaXNJbml0aWFsaXNlZCkgZ29sZGVuTGF5b3V0LnVwZGF0ZVNpemUoKVxuICAgIH0sIDEwMClcbiAgfSwgW2Nsb3NlZCwgZ29sZGVuTGF5b3V0XSlcbn1cblxuZXhwb3J0IGNvbnN0IEdvbGRlbkxheW91dCA9ICh7IHNlbGVjdGlvbkludGVyZmFjZSB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBbZ29sZGVuTGF5b3V0LCBzZXRHb2xkZW5MYXlvdXRdID0gUmVhY3QudXNlU3RhdGU8YW55PihudWxsKVxuICBjb25zdCB7IGNsb3NlZCB9ID0gdXNlUmVzaXphYmxlR3JpZENvbnRleHQoKVxuXG4gIHVzZVVwZGF0ZUdvbGRlbkxheW91dFNpemUoeyBnb2xkZW5MYXlvdXQsIGNsb3NlZCB9KVxuICByZXR1cm4gKFxuICAgIDxHcmlkXG4gICAgICBkYXRhLWlkPVwicmVzdWx0cy1jb250YWluZXJcIlxuICAgICAgY29udGFpbmVyXG4gICAgICBkaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbFwiXG4gICAgICB3cmFwPVwibm93cmFwXCJcbiAgICA+XG4gICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInctZnVsbCByZWxhdGl2ZSB6LTEgcGItMiBwdC0yIHByLTIgc2hyaW5rLTBcIj5cbiAgICAgICAgPFBhcGVyXG4gICAgICAgICAgZWxldmF0aW9uPXtFbGV2YXRpb25zLnBhbmVsc31cbiAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgcHktMSBweC0yIG92ZXJmbG93LWhpZGRlblwiXG4gICAgICAgID5cbiAgICAgICAgICB7Z29sZGVuTGF5b3V0ID8gKFxuICAgICAgICAgICAgPFJlc3VsdFNlbGVjdG9yXG4gICAgICAgICAgICAgIHNlbGVjdGlvbkludGVyZmFjZT17c2VsZWN0aW9uSW50ZXJmYWNlfVxuICAgICAgICAgICAgICBtb2RlbD17c2VsZWN0aW9uSW50ZXJmYWNlLmdldEN1cnJlbnRRdWVyeSgpfVxuICAgICAgICAgICAgICBnb2xkZW5MYXlvdXQ9e2dvbGRlbkxheW91dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvUGFwZXI+XG4gICAgICA8L0dyaWQ+XG5cbiAgICAgIDxHcmlkIGl0ZW0gY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCBvdmVyZmxvdy1oaWRkZW4gc2hyaW5rLTEgcGItMiBwci0yXCI+XG4gICAgICAgIDxHb2xkZW5MYXlvdXRWaWV3UmVhY3RcbiAgICAgICAgICBzZWxlY3Rpb25JbnRlcmZhY2U9e3NlbGVjdGlvbkludGVyZmFjZX1cbiAgICAgICAgICBjb25maWdOYW1lPVwiZ29sZGVuTGF5b3V0XCJcbiAgICAgICAgICBzZXRHb2xkZW5MYXlvdXQ9e3NldEdvbGRlbkxheW91dH1cbiAgICAgICAgLz5cbiAgICAgIDwvR3JpZD5cbiAgICA8L0dyaWQ+XG4gIClcbn1cbiJdfQ==