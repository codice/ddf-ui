import { __read } from "tslib";
import * as React from 'react';
import { hot } from 'react-hot-loader';
import { useParams } from 'react-router-dom';
import { useLazyResultsFromSelectionInterface } from '../selection-interface/hooks';
import { GoldenLayout } from '../golden-layout/golden-layout';
import { DEFAULT_QUERY_OPTIONS, useUserQuery } from '../../js/model/TypedQuery';
import { FilterBuilderClass, FilterClass, } from '../filter-builder/filter.structure';
import { getFilterTreeForId } from './metacard-nav';
import SelectionInterfaceModel from '../selection-interface/selection-interface.model';
import user from '../singletons/user-instance';
import _ from 'underscore';
export var getFilterTreeForUpload = function (_a) {
    var upload = _a.upload;
    return new FilterBuilderClass({
        type: 'OR',
        filters: _.flatten(upload
            .get('uploads')
            .filter(function (file) { return file.id || file.get('children') !== undefined; })
            .map(function (file) {
            if (file.get('children') !== undefined) {
                return file.get('children').map(function (child) {
                    return new FilterClass({
                        type: '=',
                        value: child,
                        property: 'id',
                    });
                });
            }
            else {
                return new FilterClass({
                    type: '=',
                    value: file.id,
                    property: 'id',
                });
            }
        })
            .concat(new FilterClass({
            type: '=',
            value: '-1',
            property: 'id',
        }))),
    });
};
var MetacardRoute = function () {
    var params = useParams();
    var _a = __read(React.useState(params.metacardId || params.id), 2), id = _a[0], setId = _a[1];
    React.useEffect(function () {
        setId(params.metacardId || params.id);
    }, [params.metacardId]);
    var _b = __read(useUserQuery({
        attributes: getFilterTreeForId({ id: id }),
        options: {
            transformDefaults: DEFAULT_QUERY_OPTIONS.transformDefaults,
        },
    }), 1), query = _b[0];
    var _c = __read(React.useState(new SelectionInterfaceModel({
        currentQuery: query,
    })), 1), selectionInterface = _c[0];
    React.useEffect(function () {
        if (id === undefined && params.uploadId) {
            var upload = user
                .get('user')
                .get('preferences')
                .get('uploads')
                .get(params.uploadId);
            if (upload) {
                query.set('filterTree', getFilterTreeForUpload({ upload: upload }));
                query.cancelCurrentSearches();
                query.startSearchFromFirstPage();
            }
        }
    }, [id, params.uploadId]);
    React.useEffect(
    // @ts-expect-error ts-migrate(7030) FIXME: Not all code paths return a value.
    function () {
        if (id) {
            query.set('filterTree', getFilterTreeForId({ id: id }));
            query.cancelCurrentSearches();
            query.startSearchFromFirstPage();
            return function () {
                query.cancelCurrentSearches();
            };
        }
    }, [id]);
    var lazyResults = useLazyResultsFromSelectionInterface({
        selectionInterface: selectionInterface,
    });
    var filteredResults = Object.values(lazyResults.results);
    filteredResults.forEach(function (result) {
        result.setSelected(true);
    });
    return React.createElement(GoldenLayout, { selectionInterface: selectionInterface });
};
export default hot(module)(MetacardRoute);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWNhcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50L3BhZ2VzL21ldGFjYXJkLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUNuRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDN0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQy9FLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsV0FBVyxHQUNaLE1BQU0sb0NBQW9DLENBQUE7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDbkQsT0FBTyx1QkFBdUIsTUFBTSxrREFBa0QsQ0FBQTtBQUN0RixPQUFPLElBQUksTUFBTSw2QkFBNkIsQ0FBQTtBQUM5QyxPQUFPLENBQUMsTUFBTSxZQUFZLENBQUE7QUFNMUIsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQUcsVUFBQyxFQUl0QztRQUhDLE1BQU0sWUFBQTtJQUlOLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQztRQUM1QixJQUFJLEVBQUUsSUFBSTtRQUNWLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUNoQixNQUFNO2FBQ0gsR0FBRyxDQUFDLFNBQVMsQ0FBQzthQUNkLE1BQU0sQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxTQUFTLEVBQTdDLENBQTZDLENBQUM7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cUIsRUFBRSxDQUFBO1lBQzdCLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxDQUFBO1lBQ2hDLE9BQU87Z0JBQ0wsS0FBSyxDQUFDLHFCQUFxQixFQUFFLENBQUE7WUFDL0IsQ0FBQyxDQUFBO1NBQ0Y7SUFDSCxDQUFDLEVBQ0QsQ0FBQyxFQUFFLENBQUMsQ0FDTCxDQUFBO0lBQ0QsSUFBTSxXQUFXLEdBQUcsb0NBQW9DLENBQUM7UUFDdkQsa0JBQWtCLG9CQUFBO0tBQ25CLENBQUMsQ0FBQTtJQUNGLElBQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRTFELGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNO1FBQzdCLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUIsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLG9CQUFDLFlBQVksSUFBQyxrQkFBa0IsRUFBRSxrQkFBa0IsR0FBSSxDQUFBO0FBQ2pFLENBQUMsQ0FBQTtBQUVELGVBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBob3QgfSBmcm9tICdyZWFjdC1ob3QtbG9hZGVyJ1xuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7IHVzZUxhenlSZXN1bHRzRnJvbVNlbGVjdGlvbkludGVyZmFjZSB9IGZyb20gJy4uL3NlbGVjdGlvbi1pbnRlcmZhY2UvaG9va3MnXG5pbXBvcnQgeyBHb2xkZW5MYXlvdXQgfSBmcm9tICcuLi9nb2xkZW4tbGF5b3V0L2dvbGRlbi1sYXlvdXQnXG5pbXBvcnQgeyBERUZBVUxUX1FVRVJZX09QVElPTlMsIHVzZVVzZXJRdWVyeSB9IGZyb20gJy4uLy4uL2pzL21vZGVsL1R5cGVkUXVlcnknXG5pbXBvcnQge1xuICBGaWx0ZXJCdWlsZGVyQ2xhc3MsXG4gIEZpbHRlckNsYXNzLFxufSBmcm9tICcuLi9maWx0ZXItYnVpbGRlci9maWx0ZXIuc3RydWN0dXJlJ1xuaW1wb3J0IHsgZ2V0RmlsdGVyVHJlZUZvcklkIH0gZnJvbSAnLi9tZXRhY2FyZC1uYXYnXG5pbXBvcnQgU2VsZWN0aW9uSW50ZXJmYWNlTW9kZWwgZnJvbSAnLi4vc2VsZWN0aW9uLWludGVyZmFjZS9zZWxlY3Rpb24taW50ZXJmYWNlLm1vZGVsJ1xuaW1wb3J0IHVzZXIgZnJvbSAnLi4vc2luZ2xldG9ucy91c2VyLWluc3RhbmNlJ1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSdcblxudHlwZSBVcGxvYWRUeXBlID0gQmFja2JvbmUuTW9kZWw8e1xuICB1cGxvYWRzOiBCYWNrYm9uZS5Nb2RlbDx7IGlkOiBzdHJpbmc7IGNoaWxkcmVuOiBzdHJpbmdbXSB9PltdXG59PlxuXG5leHBvcnQgY29uc3QgZ2V0RmlsdGVyVHJlZUZvclVwbG9hZCA9ICh7XG4gIHVwbG9hZCxcbn06IHtcbiAgdXBsb2FkOiBVcGxvYWRUeXBlXG59KTogRmlsdGVyQnVpbGRlckNsYXNzID0+IHtcbiAgcmV0dXJuIG5ldyBGaWx0ZXJCdWlsZGVyQ2xhc3Moe1xuICAgIHR5cGU6ICdPUicsXG4gICAgZmlsdGVyczogXy5mbGF0dGVuKFxuICAgICAgdXBsb2FkXG4gICAgICAgIC5nZXQoJ3VwbG9hZHMnKVxuICAgICAgICAuZmlsdGVyKChmaWxlKSA9PiBmaWxlLmlkIHx8IGZpbGUuZ2V0KCdjaGlsZHJlbicpICE9PSB1bmRlZmluZWQpXG4gICAgICAgIC5tYXAoKGZpbGUpID0+IHtcbiAgICAgICAgICBpZiAoZmlsZS5nZXQoJ2NoaWxkcmVuJykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGUuZ2V0KCdjaGlsZHJlbicpLm1hcChcbiAgICAgICAgICAgICAgKGNoaWxkKSA9PlxuICAgICAgICAgICAgICAgIG5ldyBGaWx0ZXJDbGFzcyh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiAnPScsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogY2hpbGQsXG4gICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogJ2lkJyxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZpbHRlckNsYXNzKHtcbiAgICAgICAgICAgICAgdHlwZTogJz0nLFxuICAgICAgICAgICAgICB2YWx1ZTogZmlsZS5pZCxcbiAgICAgICAgICAgICAgcHJvcGVydHk6ICdpZCcsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNvbmNhdChcbiAgICAgICAgICBuZXcgRmlsdGVyQ2xhc3Moe1xuICAgICAgICAgICAgdHlwZTogJz0nLFxuICAgICAgICAgICAgdmFsdWU6ICctMScsXG4gICAgICAgICAgICBwcm9wZXJ0eTogJ2lkJyxcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgKSxcbiAgfSlcbn1cblxuY29uc3QgTWV0YWNhcmRSb3V0ZSA9ICgpID0+IHtcbiAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zPHtcbiAgICBpZDogc3RyaW5nXG4gICAgbWV0YWNhcmRJZDogc3RyaW5nXG4gICAgdXBsb2FkSWQ6IHN0cmluZ1xuICB9PigpXG5cbiAgY29uc3QgW2lkLCBzZXRJZF0gPSBSZWFjdC51c2VTdGF0ZShwYXJhbXMubWV0YWNhcmRJZCB8fCBwYXJhbXMuaWQpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SWQocGFyYW1zLm1ldGFjYXJkSWQgfHwgcGFyYW1zLmlkKVxuICB9LCBbcGFyYW1zLm1ldGFjYXJkSWRdKVxuICBjb25zdCBbcXVlcnldID0gdXNlVXNlclF1ZXJ5KHtcbiAgICBhdHRyaWJ1dGVzOiBnZXRGaWx0ZXJUcmVlRm9ySWQoeyBpZCB9KSxcbiAgICBvcHRpb25zOiB7XG4gICAgICB0cmFuc2Zvcm1EZWZhdWx0czogREVGQVVMVF9RVUVSWV9PUFRJT05TLnRyYW5zZm9ybURlZmF1bHRzLFxuICAgIH0sXG4gIH0pXG4gIGNvbnN0IFtzZWxlY3Rpb25JbnRlcmZhY2VdID0gUmVhY3QudXNlU3RhdGUoXG4gICAgbmV3IFNlbGVjdGlvbkludGVyZmFjZU1vZGVsKHtcbiAgICAgIGN1cnJlbnRRdWVyeTogcXVlcnksXG4gICAgfSlcbiAgKVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlkID09PSB1bmRlZmluZWQgJiYgcGFyYW1zLnVwbG9hZElkKSB7XG4gICAgICBjb25zdCB1cGxvYWQgPSB1c2VyXG4gICAgICAgIC5nZXQoJ3VzZXInKVxuICAgICAgICAuZ2V0KCdwcmVmZXJlbmNlcycpXG4gICAgICAgIC5nZXQoJ3VwbG9hZHMnKVxuICAgICAgICAuZ2V0KHBhcmFtcy51cGxvYWRJZClcbiAgICAgIGlmICh1cGxvYWQpIHtcbiAgICAgICAgcXVlcnkuc2V0KCdmaWx0ZXJUcmVlJywgZ2V0RmlsdGVyVHJlZUZvclVwbG9hZCh7IHVwbG9hZCB9KSlcbiAgICAgICAgcXVlcnkuY2FuY2VsQ3VycmVudFNlYXJjaGVzKClcbiAgICAgICAgcXVlcnkuc3RhcnRTZWFyY2hGcm9tRmlyc3RQYWdlKClcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtpZCwgcGFyYW1zLnVwbG9hZElkXSlcblxuICBSZWFjdC51c2VFZmZlY3QoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDcwMzApIEZJWE1FOiBOb3QgYWxsIGNvZGUgcGF0aHMgcmV0dXJuIGEgdmFsdWUuXG4gICAgKCkgPT4ge1xuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIHF1ZXJ5LnNldCgnZmlsdGVyVHJlZScsIGdldEZpbHRlclRyZWVGb3JJZCh7IGlkIH0pKVxuICAgICAgICBxdWVyeS5jYW5jZWxDdXJyZW50U2VhcmNoZXMoKVxuICAgICAgICBxdWVyeS5zdGFydFNlYXJjaEZyb21GaXJzdFBhZ2UoKVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIHF1ZXJ5LmNhbmNlbEN1cnJlbnRTZWFyY2hlcygpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtpZF1cbiAgKVxuICBjb25zdCBsYXp5UmVzdWx0cyA9IHVzZUxhenlSZXN1bHRzRnJvbVNlbGVjdGlvbkludGVyZmFjZSh7XG4gICAgc2VsZWN0aW9uSW50ZXJmYWNlLFxuICB9KVxuICBjb25zdCBmaWx0ZXJlZFJlc3VsdHMgPSBPYmplY3QudmFsdWVzKGxhenlSZXN1bHRzLnJlc3VsdHMpXG5cbiAgZmlsdGVyZWRSZXN1bHRzLmZvckVhY2goKHJlc3VsdCkgPT4ge1xuICAgIHJlc3VsdC5zZXRTZWxlY3RlZCh0cnVlKVxuICB9KVxuXG4gIHJldHVybiA8R29sZGVuTGF5b3V0IHNlbGVjdGlvbkludGVyZmFjZT17c2VsZWN0aW9uSW50ZXJmYWNlfSAvPlxufVxuXG5leHBvcnQgZGVmYXVsdCBob3QobW9kdWxlKShNZXRhY2FyZFJvdXRlKVxuIl19