import { __read } from "tslib";
import Button from '@mui/material/Button';
import MenuItem from '@mui/material/MenuItem';
import Paper from '@mui/material/Paper';
import Popover from '@mui/material/Popover';
import * as React from 'react';
import { hot } from 'react-hot-loader';
import { useHistory } from 'react-router-dom';
import { AsyncTasks } from '../../js/model/AsyncTask/async-task';
import { useQuery, UserQuery } from '../../js/model/TypedQuery';
import { useMenuState } from '../menu-state/menu-state';
import { Elevations } from '../theme/theme';
import { OpenSearch, SaveForm } from './search';
import SelectionInterfaceModel from '../selection-interface/selection-interface.model';
var selectionInterface = new SelectionInterfaceModel();
var Open = function () {
    var history = useHistory();
    var openMenuState = useMenuState();
    var titleMenuState = useMenuState();
    var fromExistingMenuState = useMenuState();
    var _a = __read(useQuery(), 1), search = _a[0];
    React.useEffect(function () {
        openMenuState.handleClick();
    }, []);
    React.useEffect(function () {
        selectionInterface.setCurrentQuery(search);
    }, []);
    return (React.createElement("div", { className: "w-full h-full p-2" },
        React.createElement(Button, { component: "div", onClick: openMenuState.handleClick, className: "text-2xl pb-2", variant: "contained", color: "primary", ref: openMenuState.anchorRef }, "Create"),
        React.createElement(Popover, { open: titleMenuState.open, anchorEl: titleMenuState.anchorRef.current, onClose: titleMenuState.handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'left' } },
            React.createElement(Paper, { elevation: Elevations.overlays, className: "p-2" },
                React.createElement(SaveForm, { selectionInterface: selectionInterface, onClose: function () {
                        titleMenuState.handleClose();
                    }, onSave: function (title) {
                        var searchData = UserQuery().toJSON();
                        searchData.title = title;
                        var task = AsyncTasks.createSearch({ data: searchData });
                        history.push({
                            pathname: "/search/".concat(task.data.id),
                            search: '',
                        });
                    } }))),
        React.createElement(Popover, { open: fromExistingMenuState.open, anchorEl: fromExistingMenuState.anchorRef.current, onClose: fromExistingMenuState.handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'left' } },
            React.createElement(Paper, { elevation: Elevations.overlays, className: "p-2 w-64" },
                React.createElement(OpenSearch, { label: "", constructLink: function (result) {
                        return "/search/".concat(result.plain.id);
                    }, onFinish: function (value) {
                        var copy = JSON.parse(JSON.stringify(value.plain.metacard.properties));
                        delete copy.id;
                        copy.title = "New from '".concat(copy.title, "'");
                        var task = AsyncTasks.createSearch({ data: copy });
                        // replace because technically they get the link in constructLink put into history as well unfortunately, will need to fix this more generally
                        history.replace({
                            pathname: "/search/".concat(task.data.id),
                            search: '',
                        });
                    }, autocompleteProps: {
                        fullWidth: true,
                        className: 'w-full',
                    } }))),
        React.createElement(Popover, { open: openMenuState.open, onClose: openMenuState.handleClose, anchorEl: openMenuState.anchorRef.current, anchorOrigin: { vertical: 'bottom', horizontal: 'left' } },
            React.createElement(MenuItem, { component: "div", ref: titleMenuState.anchorRef, onClick: function () {
                    titleMenuState.handleClick();
                } }, "Search"),
            React.createElement(MenuItem, { component: "div", ref: fromExistingMenuState.anchorRef, onClick: function () {
                    fromExistingMenuState.handleClick();
                } }, "Search from existing"))));
};
export default hot(module)(Open);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudC9wYWdlcy9jcmVhdGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLE1BQU0sTUFBTSxzQkFBc0IsQ0FBQTtBQUN6QyxPQUFPLFFBQVEsTUFBTSx3QkFBd0IsQ0FBQTtBQUM3QyxPQUFPLEtBQUssTUFBTSxxQkFBcUIsQ0FBQTtBQUN2QyxPQUFPLE9BQU8sTUFBTSx1QkFBdUIsQ0FBQTtBQUMzQyxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUM5QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQTtBQUNoRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFL0MsT0FBTyx1QkFBdUIsTUFBTSxrREFBa0QsQ0FBQTtBQUV0RixJQUFNLGtCQUFrQixHQUFHLElBQUksdUJBQXVCLEVBQUUsQ0FBQTtBQUV4RCxJQUFNLElBQUksR0FBRztJQUNYLElBQU0sT0FBTyxHQUFHLFVBQVUsRUFBRSxDQUFBO0lBQzVCLElBQU0sYUFBYSxHQUFHLFlBQVksRUFBRSxDQUFBO0lBQ3BDLElBQU0sY0FBYyxHQUFHLFlBQVksRUFBRSxDQUFBO0lBQ3JDLElBQU0scUJBQXFCLEdBQUcsWUFBWSxFQUFFLENBQUE7SUFDdEMsSUFBQSxLQUFBLE9BQVcs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STt3QkFDOUksT0FBTyxDQUFDLE9BQU8sQ0FBQzs0QkFDZCxRQUFRLEVBQUUsa0JBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUU7NEJBQ25DLE1BQU0sRUFBRSxFQUFFO3lCQUNYLENBQUMsQ0FBQTtvQkFDSixDQUFDLEVBQ0QsaUJBQWlCLEVBQUU7d0JBQ2pCLFNBQVMsRUFBRSxJQUFJO3dCQUNmLFNBQVMsRUFBRSxRQUFRO3FCQUNwQixHQUNELENBQ0ksQ0FDQTtRQUNWLG9CQUFDLE9BQU8sSUFDTixJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUksRUFDeEIsT0FBTyxFQUFFLGFBQWEsQ0FBQyxXQUFXLEVBQ2xDLFFBQVEsRUFBRSxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFDekMsWUFBWSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFO1lBRXhELG9CQUFDLFFBQVEsSUFDUCxTQUFTLEVBQUMsS0FBSyxFQUNmLEdBQUcsRUFBRSxjQUFjLENBQUMsU0FBUyxFQUM3QixPQUFPLEVBQUU7b0JBQ1AsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFBO2dCQUM5QixDQUFDLGFBR1E7WUFDWCxvQkFBQyxRQUFRLElBQ1AsU0FBUyxFQUFDLEtBQUssRUFDZixHQUFHLEVBQUUscUJBQXFCLENBQUMsU0FBUyxFQUNwQyxPQUFPLEVBQUU7b0JBQ1AscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUE7Z0JBQ3JDLENBQUMsMkJBR1EsQ0FDSCxDQUNOLENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELGVBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJ1dHRvbiBmcm9tICdAbXVpL21hdGVyaWFsL0J1dHRvbidcbmltcG9ydCBNZW51SXRlbSBmcm9tICdAbXVpL21hdGVyaWFsL01lbnVJdGVtJ1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvUGFwZXInXG5pbXBvcnQgUG9wb3ZlciBmcm9tICdAbXVpL21hdGVyaWFsL1BvcG92ZXInXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGhvdCB9IGZyb20gJ3JlYWN0LWhvdC1sb2FkZXInXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7IEFzeW5jVGFza3MgfSBmcm9tICcuLi8uLi9qcy9tb2RlbC9Bc3luY1Rhc2svYXN5bmMtdGFzaydcbmltcG9ydCB7IHVzZVF1ZXJ5LCBVc2VyUXVlcnkgfSBmcm9tICcuLi8uLi9qcy9tb2RlbC9UeXBlZFF1ZXJ5J1xuaW1wb3J0IHsgdXNlTWVudVN0YXRlIH0gZnJvbSAnLi4vbWVudS1zdGF0ZS9tZW51LXN0YXRlJ1xuaW1wb3J0IHsgRWxldmF0aW9ucyB9IGZyb20gJy4uL3RoZW1lL3RoZW1lJ1xuaW1wb3J0IHsgT3BlblNlYXJjaCwgU2F2ZUZvcm0gfSBmcm9tICcuL3NlYXJjaCdcblxuaW1wb3J0IFNlbGVjdGlvbkludGVyZmFjZU1vZGVsIGZyb20gJy4uL3NlbGVjdGlvbi1pbnRlcmZhY2Uvc2VsZWN0aW9uLWludGVyZmFjZS5tb2RlbCdcblxuY29uc3Qgc2VsZWN0aW9uSW50ZXJmYWNlID0gbmV3IFNlbGVjdGlvbkludGVyZmFjZU1vZGVsKClcblxuY29uc3QgT3BlbiA9ICgpID0+IHtcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKVxuICBjb25zdCBvcGVuTWVudVN0YXRlID0gdXNlTWVudVN0YXRlKClcbiAgY29uc3QgdGl0bGVNZW51U3RhdGUgPSB1c2VNZW51U3RhdGUoKVxuICBjb25zdCBmcm9tRXhpc3RpbmdNZW51U3RhdGUgPSB1c2VNZW51U3RhdGUoKVxuICBjb25zdCBbc2VhcmNoXSA9IHVzZVF1ZXJ5KClcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBvcGVuTWVudVN0YXRlLmhhbmRsZUNsaWNrKClcbiAgfSwgW10pXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2VsZWN0aW9uSW50ZXJmYWNlLnNldEN1cnJlbnRRdWVyeShzZWFyY2gpXG4gIH0sIFtdKVxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCBwLTJcIj5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgY29tcG9uZW50PVwiZGl2XCJcbiAgICAgICAgb25DbGljaz17b3Blbk1lbnVTdGF0ZS5oYW5kbGVDbGlja31cbiAgICAgICAgY2xhc3NOYW1lPVwidGV4dC0yeGwgcGItMlwiXG4gICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICByZWY9e29wZW5NZW51U3RhdGUuYW5jaG9yUmVmfVxuICAgICAgPlxuICAgICAgICBDcmVhdGVcbiAgICAgIDwvQnV0dG9uPlxuICAgICAgPFBvcG92ZXJcbiAgICAgICAgb3Blbj17dGl0bGVNZW51U3RhdGUub3Blbn1cbiAgICAgICAgYW5jaG9yRWw9e3RpdGxlTWVudVN0YXRlLmFuY2hvclJlZi5jdXJyZW50fVxuICAgICAgICBvbkNsb3NlPXt0aXRsZU1lbnVTdGF0ZS5oYW5kbGVDbG9zZX1cbiAgICAgICAgYW5jaG9yT3JpZ2luPXt7IHZlcnRpY2FsOiAnYm90dG9tJywgaG9yaXpvbnRhbDogJ2xlZnQnIH19XG4gICAgICA+XG4gICAgICAgIDxQYXBlciBlbGV2YXRpb249e0VsZXZhdGlvbnMub3ZlcmxheXN9IGNsYXNzTmFtZT1cInAtMlwiPlxuICAgICAgICAgIDxTYXZlRm9ybVxuICAgICAgICAgICAgc2VsZWN0aW9uSW50ZXJmYWNlPXtzZWxlY3Rpb25JbnRlcmZhY2V9XG4gICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHRpdGxlTWVudVN0YXRlLmhhbmRsZUNsb3NlKClcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblNhdmU9eyh0aXRsZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzZWFyY2hEYXRhID0gVXNlclF1ZXJ5KCkudG9KU09OKClcbiAgICAgICAgICAgICAgc2VhcmNoRGF0YS50aXRsZSA9IHRpdGxlXG4gICAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBBc3luY1Rhc2tzLmNyZWF0ZVNlYXJjaCh7IGRhdGE6IHNlYXJjaERhdGEgfSlcbiAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgICAgICBwYXRobmFtZTogYC9zZWFyY2gvJHt0YXNrLmRhdGEuaWR9YCxcbiAgICAgICAgICAgICAgICBzZWFyY2g6ICcnLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1BhcGVyPlxuICAgICAgPC9Qb3BvdmVyPlxuICAgICAgPFBvcG92ZXJcbiAgICAgICAgb3Blbj17ZnJvbUV4aXN0aW5nTWVudVN0YXRlLm9wZW59XG4gICAgICAgIGFuY2hvckVsPXtmcm9tRXhpc3RpbmdNZW51U3RhdGUuYW5jaG9yUmVmLmN1cnJlbnR9XG4gICAgICAgIG9uQ2xvc2U9e2Zyb21FeGlzdGluZ01lbnVTdGF0ZS5oYW5kbGVDbG9zZX1cbiAgICAgICAgYW5jaG9yT3JpZ2luPXt7IHZlcnRpY2FsOiAnYm90dG9tJywgaG9yaXpvbnRhbDogJ2xlZnQnIH19XG4gICAgICA+XG4gICAgICAgIDxQYXBlciBlbGV2YXRpb249e0VsZXZhdGlvbnMub3ZlcmxheXN9IGNsYXNzTmFtZT1cInAtMiB3LTY0XCI+XG4gICAgICAgICAgPE9wZW5TZWFyY2hcbiAgICAgICAgICAgIGxhYmVsPVwiXCJcbiAgICAgICAgICAgIGNvbnN0cnVjdExpbms9eyhyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGAvc2VhcmNoLyR7cmVzdWx0LnBsYWluLmlkfWBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbkZpbmlzaD17KHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvcHkgPSBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlLnBsYWluLm1ldGFjYXJkLnByb3BlcnRpZXMpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgZGVsZXRlIGNvcHkuaWRcbiAgICAgICAgICAgICAgY29weS50aXRsZSA9IGBOZXcgZnJvbSAnJHtjb3B5LnRpdGxlfSdgXG4gICAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBBc3luY1Rhc2tzLmNyZWF0ZVNlYXJjaCh7IGRhdGE6IGNvcHkgfSlcbiAgICAgICAgICAgICAgLy8gcmVwbGFjZSBiZWNhdXNlIHRlY2huaWNhbGx5IHRoZXkgZ2V0IHRoZSBsaW5rIGluIGNvbnN0cnVjdExpbmsgcHV0IGludG8gaGlzdG9yeSBhcyB3ZWxsIHVuZm9ydHVuYXRlbHksIHdpbGwgbmVlZCB0byBmaXggdGhpcyBtb3JlIGdlbmVyYWxseVxuICAgICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2Uoe1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBgL3NlYXJjaC8ke3Rhc2suZGF0YS5pZH1gLFxuICAgICAgICAgICAgICAgIHNlYXJjaDogJycsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgYXV0b2NvbXBsZXRlUHJvcHM9e3tcbiAgICAgICAgICAgICAgZnVsbFdpZHRoOiB0cnVlLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6ICd3LWZ1bGwnLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1BhcGVyPlxuICAgICAgPC9Qb3BvdmVyPlxuICAgICAgPFBvcG92ZXJcbiAgICAgICAgb3Blbj17b3Blbk1lbnVTdGF0ZS5vcGVufVxuICAgICAgICBvbkNsb3NlPXtvcGVuTWVudVN0YXRlLmhhbmRsZUNsb3NlfVxuICAgICAgICBhbmNob3JFbD17b3Blbk1lbnVTdGF0ZS5hbmNob3JSZWYuY3VycmVudH1cbiAgICAgICAgYW5jaG9yT3JpZ2luPXt7IHZlcnRpY2FsOiAnYm90dG9tJywgaG9yaXpvbnRhbDogJ2xlZnQnIH19XG4gICAgICA+XG4gICAgICAgIDxNZW51SXRlbVxuICAgICAgICAgIGNvbXBvbmVudD1cImRpdlwiXG4gICAgICAgICAgcmVmPXt0aXRsZU1lbnVTdGF0ZS5hbmNob3JSZWZ9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgdGl0bGVNZW51U3RhdGUuaGFuZGxlQ2xpY2soKVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBTZWFyY2hcbiAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgY29tcG9uZW50PVwiZGl2XCJcbiAgICAgICAgICByZWY9e2Zyb21FeGlzdGluZ01lbnVTdGF0ZS5hbmNob3JSZWZ9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgZnJvbUV4aXN0aW5nTWVudVN0YXRlLmhhbmRsZUNsaWNrKClcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgU2VhcmNoIGZyb20gZXhpc3RpbmdcbiAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgIDwvUG9wb3Zlcj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBob3QobW9kdWxlKShPcGVuKVxuIl19