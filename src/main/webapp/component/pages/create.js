import { __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import Button from '@mui/material/Button';
import MenuItem from '@mui/material/MenuItem';
import Paper from '@mui/material/Paper';
import Popover from '@mui/material/Popover';
import * as React from 'react';
import { useNavigate } from 'react-router-dom';
import { AsyncTasks } from '../../js/model/AsyncTask/async-task';
import { useQuery, UserQuery } from '../../js/model/TypedQuery';
import { useMenuState } from '../menu-state/menu-state';
import { Elevations } from '../theme/theme';
import { OpenSearch, SaveForm } from './search';
import SelectionInterfaceModel from '../selection-interface/selection-interface.model';
var selectionInterface = new SelectionInterfaceModel();
var Open = function () {
    var navigate = useNavigate();
    var openMenuState = useMenuState();
    var titleMenuState = useMenuState();
    var fromExistingMenuState = useMenuState();
    var _a = __read(useQuery(), 1), search = _a[0];
    React.useEffect(function () {
        openMenuState.handleClick();
    }, []);
    React.useEffect(function () {
        selectionInterface.setCurrentQuery(search);
    }, []);
    return (_jsxs("div", { className: "w-full h-full p-2", children: [_jsx(Button, { component: "div", onClick: openMenuState.handleClick, className: "text-2xl pb-2", variant: "contained", color: "primary", ref: openMenuState.anchorRef, children: "Create" }), _jsx(Popover, { open: titleMenuState.open, anchorEl: titleMenuState.anchorRef.current, onClose: titleMenuState.handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2", children: _jsx(SaveForm, { selectionInterface: selectionInterface, onClose: function () {
                            titleMenuState.handleClose();
                        }, onSave: function (title) {
                            var searchData = UserQuery().toJSON();
                            searchData.title = title;
                            var task = AsyncTasks.createSearch({ data: searchData });
                            navigate("/search/".concat(task.data.id));
                        } }) }) }), _jsx(Popover, { open: fromExistingMenuState.open, anchorEl: fromExistingMenuState.anchorRef.current, onClose: fromExistingMenuState.handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2 w-64", children: _jsx(OpenSearch, { label: "", constructLink: function (result) {
                            return "/search/".concat(result.plain.id);
                        }, onFinish: function (value) {
                            var copy = JSON.parse(JSON.stringify(value.plain.metacard.properties));
                            delete copy.id;
                            copy.title = "New from '".concat(copy.title, "'");
                            var task = AsyncTasks.createSearch({ data: copy });
                            navigate("/search/".concat(task.data.id), {
                                replace: true,
                            });
                        }, autocompleteProps: {
                            fullWidth: true,
                            className: 'w-full',
                        } }) }) }), _jsxs(Popover, { open: openMenuState.open, onClose: openMenuState.handleClose, anchorEl: openMenuState.anchorRef.current, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: [_jsx(MenuItem, { component: "div", ref: titleMenuState.anchorRef, onClick: function () {
                            titleMenuState.handleClick();
                        }, children: "Search" }), _jsx(MenuItem, { component: "div", ref: fromExistingMenuState.anchorRef, onClick: function () {
                            fromExistingMenuState.handleClick();
                        }, children: "Search from existing" })] })] }));
};
export default Open;
//# sourceMappingURL=data:application/json;base64,