import { __assign, __read, __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from 'react';
import { GoldenLayout } from '../golden-layout/golden-layout';
import { SplitPane, useResizableGridContext, } from '../resizable-grid/resizable-grid';
import SelectionInterfaceModel from '../selection-interface/selection-interface.model';
import { useQuery, useUserQuery } from '../../js/model/TypedQuery';
import Paper from '@mui/material/Paper';
import { QueryAddReact } from '../query-add/query-add';
import KeyboardArrowLeftIcon from '@mui/icons-material/KeyboardArrowLeft';
import KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';
import queryString from 'query-string';
import Button from '@mui/material/Button';
import MoreVert from '@mui/icons-material/MoreVert';
import { Elevations } from '../theme/theme';
import SearchIcon from '@mui/icons-material/SearchTwoTone';
import { useBackbone } from '../selection-checkbox/useBackbone.hook';
import { Link, useNavigate, useLocation, useParams, } from 'react-router-dom';
import _ from 'lodash';
import TextField from '@mui/material/TextField';
import { DarkDivider } from '../dark-divider/dark-divider';
import LinearProgress from '@mui/material/LinearProgress';
import { useUpdateEffect } from 'react-use';
import { FilterBuilderClass, FilterClass, } from '../filter-builder/filter.structure';
import Skeleton from '@mui/material/Skeleton';
import CircularProgress from '@mui/material/CircularProgress';
import { useRerenderOnBackboneSync } from '../../js/model/LazyQueryResult/hooks';
import CloudDoneIcon from '@mui/icons-material/CloudDone';
import SaveIcon from '@mui/icons-material/Save';
import { useMenuState } from '../menu-state/menu-state';
import MenuItem from '@mui/material/MenuItem';
import Menu from '@mui/material/Menu';
import { TypedUserInstance } from '../singletons/TypedUser';
import useSnack from '../hooks/useSnack';
import Popover from '@mui/material/Popover';
import Autocomplete from '@mui/material/Autocomplete';
import OverflowTooltip from '../overflow-tooltip/overflow-tooltip';
import { AsyncTasks, useCreateSearchTask, useRestoreSearchTask, useSaveSearchTaskBasedOnParams, } from '../../js/model/AsyncTask/async-task';
import { Memo } from '../memo/memo';
import { useListenToEnterKeySubmitEvent } from '../custom-events/enter-key-submit';
import { useSearchResults } from '../hooks/useSearchResults';
export var SaveForm = function (_a) {
    var onClose = _a.onClose, selectionInterface = _a.selectionInterface, onSave = _a.onSave;
    var currentQuery = selectionInterface.getCurrentQuery();
    var _b = __read(React.useState(currentQuery.get('title') || ''), 2), title = _b[0], setTitle = _b[1];
    var _c = __read(React.useState({}), 2), validation = _c[0], setValidation = _c[1];
    useUpdateEffect(function () {
        if (!title) {
            setValidation({
                title: 'Cannot be blank',
            });
        }
        else {
            setValidation({});
        }
    }, [title]);
    return (_jsx(_Fragment, { children: _jsxs("form", { action: "./blank.html", method: "POST", onSubmit: function (e) {
                if (!title) {
                    setValidation({
                        title: 'Cannot be blank',
                    });
                    e.preventDefault();
                    return false;
                }
                else {
                    currentQuery.set('title', title);
                    onSave(title);
                    e.preventDefault();
                    onClose();
                    return false;
                }
            }, className: "w-full h-full", children: [_jsx("div", { className: "p-2", children: _jsx(TextField, { variant: "outlined", size: "small", label: "Name", value: title, onChange: function (e) {
                            setTitle(e.target.value);
                        }, error: Boolean(validation.title), autoFocus: true, onFocus: function (e) {
                            e.target.select();
                        }, helperText: validation.title }) }), _jsx(DarkDivider, {}), _jsxs("div", { className: "flex flex-row flex-nowrap align justify-end p-2", children: [_jsx(Button, { type: "button", variant: "text", color: "primary", onClick: function () {
                                onClose();
                            }, children: "Cancel" }), _jsx(Button, { disabled: Object.keys(validation).length > 0, type: "submit", className: "ml-3", variant: "contained", color: "primary", children: "Save" })] })] }) }));
};
var ButtonWithTwoStates = function (props) {
    var states = props.states, state = props.state, buttonProps = __rest(props, ["states", "state"]);
    if (states.length === 0) {
        return _jsx("div", { children: "You must specify at least one state" });
    }
    var longestState = states.reduce(function (longest, current) {
        if (current.state.length > longest.length) {
            return current.state;
        }
        return longest;
    }, states[0].state);
    var currentState = states.find(function (stateInfo) { return stateInfo.state === state; });
    if (currentState === undefined) {
        return _jsx("div", { children: "You must specify a valid state" });
    }
    var isLoading = currentState === null || currentState === void 0 ? void 0 : currentState.loading;
    return (_jsxs(Button, __assign({ disabled: isLoading }, buttonProps, { children: [_jsx("span", { className: "invisible ".concat(props.labelClassName), children: longestState }), _jsx("span", { className: "absolute ".concat(props.labelClassName), children: state }), isLoading ? (_jsx(LinearProgress, { className: "absolute left-0 top-0 w-full h-full opacity-50", variant: "indeterminate" })) : null] })));
};
export var OpenSearch = function (_a) {
    var onFinish = _a.onFinish, constructLink = _a.constructLink, label = _a.label, _b = _a.archived, archived = _b === void 0 ? false : _b, autocompleteProps = _a.autocompleteProps;
    var _c = __read(React.useState(false), 2), positioningDone = _c[0], setPositioningDone = _c[1];
    var _d = __read(React.useState(''), 2), value = _d[0], setValue = _d[1];
    var _f = __read(React.useState(true), 2), open = _f[0], setOpen = _f[1];
    var inputRef = React.useRef(null);
    var _g = __read(React.useState(null), 2), currentHighlight = _g[0], setCurrentHighlight = _g[1];
    var _h = __read(React.useState([]), 2), options = _h[0], setOptions = _h[1];
    var _j = useSearchResults({
        searchText: value,
        archived: archived,
    }), lazyResults = _j.lazyResults, loading = _j.loading;
    React.useEffect(function () {
        setOptions(lazyResults);
    }, [lazyResults]);
    React.useEffect(function () {
        if (currentHighlight && currentHighlight.overflowTooltip) {
            currentHighlight.overflowTooltip.setOpen(true);
        }
        return function () {
            if (currentHighlight && currentHighlight.overflowTooltip)
                currentHighlight.overflowTooltip.setOpen(false);
        };
    }, [currentHighlight]);
    React.useEffect(function () {
        var timeoutid = window.setTimeout(function () {
            setPositioningDone(true);
        }, 500);
        return function () {
            window.clearTimeout(timeoutid);
        };
    }, []);
    return (_jsx(Autocomplete, __assign({ className: "w-64", isOptionEqualToValue: function (option) { return option.plain.id === option.plain.id; }, getOptionLabel: function (option) { return option.plain.metacard.properties.title; }, options: options, ref: inputRef, open: open && positioningDone, onOpen: function () {
            setOpen(true);
        }, onClose: function () {
            setOpen(false);
        }, loading: loading, autoHighlight: true, onHighlightChange: function () {
            if (inputRef.current) {
                var highlightedElementString = inputRef.current.querySelector('input').getAttribute('aria-activedescendant');
                if (highlightedElementString) {
                    setCurrentHighlight(document.getElementById(highlightedElementString).querySelector('div'));
                }
                else {
                    setCurrentHighlight(null);
                }
            }
            else {
                setCurrentHighlight(null);
            }
        }, noOptionsText: "Nothing found.", renderOption: function (props, option) {
            return (_jsx("li", __assign({}, props, { children: _jsx(Link, { className: "w-full p-0 font-normal no-underline hover:font-normal hover:no-underline", to: constructLink(option), children: _jsx(OverflowTooltip, { tooltipProps: {
                            title: (_jsx("div", { className: "w-full p-2", children: option.plain.metacard.properties.title })),
                        }, children: _jsx("div", { className: "truncate w-full p-2", children: option.plain.metacard.properties.title }) }) }) })));
        }, ListboxProps: {
            className: 'children-p-0 MuiAutocomplete-listbox', // we have to add the original class (MuiAutocomplete-listbox) back on unfortunately
        }, onChange: function (_e, value) {
            if (value) {
                onFinish(value);
            }
        }, renderInput: function (params) {
            return (_jsx(TextField, __assign({}, params, { value: value, onChange: function (e) {
                    setValue(e.target.value);
                }, label: label, variant: "outlined", autoFocus: true, InputProps: __assign(__assign({}, params.InputProps), { endAdornment: (_jsxs(React.Fragment, { children: [loading ? (_jsx(CircularProgress, { color: "inherit", size: 20 })) : null, params.InputProps.endAdornment] })) }) })));
        } }, autocompleteProps)));
};
var OptionsButton = function () {
    var _a = React.useContext(SavedSearchModeContext), searchPageMode = _a.searchPageMode, data = _a.data, selectionInterface = _a.selectionInterface;
    var closed = useResizableGridContext().closed;
    var menuState = useMenuState();
    var menuStateOpenSearch = useMenuState();
    var menuStateNewFromExisting = useMenuState();
    var menuStateCopy = useMenuState();
    var menuStateRename = useMenuState();
    var menuStateRestore = useMenuState();
    var addSnack = useSnack();
    var navigate = useNavigate();
    var _b = __read(React.useState(''), 2), encodedQueryModelJSON = _b[0], setEncodedQueryModelJSON = _b[1];
    React.useEffect(function () {
        setEncodedQueryModelJSON(encodeURIComponent(JSON.stringify(selectionInterface.getCurrentQuery().toJSON())));
    }, [menuState.open]);
    return (_jsxs(_Fragment, { children: [_jsxs(Button, { component: "div", fullWidth: true, ref: menuState.anchorRef, onClick: menuState.handleClick, children: [closed ? null : _jsx("span", { className: "Mui-text-primary", children: "Options" }), _jsx(MoreVert, {})] }), _jsx(Popover, { open: menuStateRestore.open, anchorEl: menuState.anchorRef.current, onClose: menuStateRestore.handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2", children: _jsx(OpenSearch, { label: "Restore a search from the trash", archived: true, constructLink: function (result) {
                            var copy = JSON.parse(JSON.stringify(result.plain.metacard.properties));
                            delete copy.id;
                            delete copy.title;
                            delete copy['metacard.deleted.date'];
                            delete copy['metacard.deleted.id'];
                            delete copy['metacard.deleted.tags'];
                            delete copy['metacard.deleted.version'];
                            delete copy['metacard-tags'];
                            delete copy['metacard-type'];
                            var encodedQueryModel = encodeURIComponent(JSON.stringify(copy));
                            return {
                                pathname: '/search',
                                search: "?defaultQuery=".concat(encodedQueryModel),
                            };
                        }, onFinish: function (result) {
                            AsyncTasks.restore({ lazyResult: result });
                            // replace because technically they get the link in constructLink put into history as well unfortunately, will need to fix this more generally
                            navigate("/search/".concat(result.plain.metacard.properties['metacard.deleted.id']), {
                                replace: true,
                            });
                            menuStateRestore.handleClose();
                        } }) }) }), _jsx(Popover, { open: menuStateCopy.open, anchorEl: menuState.anchorRef.current, onClose: menuStateCopy.handleClose, anchorOrigin: {
                    vertical: 'bottom',
                    horizontal: 'left',
                }, children: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2", children: _jsx(SaveForm, { onClose: function () {
                            menuStateCopy.handleClose();
                        }, onSave: function (title) {
                            var currentQueryJSON = selectionInterface
                                .getCurrentQuery()
                                .toJSON();
                            currentQueryJSON.title = title;
                            var task = AsyncTasks.createSearch({ data: currentQueryJSON });
                            navigate("/search/".concat(task.data.id));
                            addSnack("Making a copy of ".concat(title), {
                                alertProps: { severity: 'info' },
                            });
                        }, selectionInterface: selectionInterface }) }) }), _jsx(Popover, { open: menuStateRename.open, anchorEl: menuState.anchorRef.current, onClose: menuStateRename.handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2", children: _jsx(SaveForm, { onClose: function () {
                            menuStateRename.handleClose();
                        }, onSave: function (title) {
                            if (typeof data !== 'boolean') {
                                var currentQueryJSON = selectionInterface
                                    .getCurrentQuery()
                                    .toJSON();
                                currentQueryJSON.title = title;
                                AsyncTasks.saveSearch({
                                    data: currentQueryJSON,
                                    lazyResult: data,
                                });
                            }
                        }, selectionInterface: selectionInterface }) }) }), _jsx(Popover, { open: menuStateNewFromExisting.open, anchorEl: menuState.anchorRef.current, onClose: menuStateNewFromExisting.handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2", children: _jsx(OpenSearch, { label: "Start a new search from an existing saved search", constructLink: function (result) {
                            var copy = JSON.parse(JSON.stringify(result.plain.metacard.properties));
                            delete copy.id;
                            delete copy.title;
                            var encodedQueryModel = encodeURIComponent(JSON.stringify(copy));
                            return {
                                pathname: '/search',
                                search: "?defaultQuery=".concat(encodedQueryModel),
                            };
                        }, onFinish: function (result) {
                            var copy = JSON.parse(JSON.stringify(result.plain.metacard.properties));
                            delete copy.id;
                            delete copy.title;
                            var encodedQueryModel = encodeURIComponent(JSON.stringify(copy));
                            // replace because technically they get the link in constructLink put into history as well unfortunately, will need to fix this more generally
                            navigate({
                                pathname: '/search',
                                search: "?defaultQuery=".concat(encodedQueryModel),
                            }, {
                                replace: true,
                            });
                            selectionInterface.getCurrentQuery().set(__assign(__assign({}, copy), { id: null, title: '' }));
                            addSnack("New search based on '".concat(result.plain.metacard.properties.title, "'"), {
                                alertProps: { severity: 'info' },
                            });
                            menuStateNewFromExisting.handleClose();
                        } }) }) }), _jsx(Popover, { open: menuStateOpenSearch.open, anchorEl: menuState.anchorRef.current, onClose: menuStateOpenSearch.handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2", children: _jsxs("div", { className: "flex flex-row flex-nowrap", children: [_jsx(OpenSearch, { label: "Open a saved search", constructLink: function (result) {
                                    return "/search/".concat(result.plain.id);
                                }, onFinish: function (value) {
                                    // replace because technically they get the link in constructLink put into history as well unfortunately, will need to fix this more generally
                                    navigate("/search/".concat(value.plain.id), {
                                        replace: true,
                                    });
                                    addSnack("Search '".concat(value.plain.metacard.properties.title, "' opened"), {
                                        alertProps: { severity: 'info' },
                                    });
                                    menuStateOpenSearch.handleClose();
                                } }), _jsx(Button, { color: "primary", onClick: function () {
                                    menuStateOpenSearch.handleClose();
                                    menuStateRestore.handleClick();
                                }, children: "Check Trash?" })] }) }) }), _jsxs(Menu, { anchorEl: menuState.anchorRef.current, open: menuState.open, onClose: menuState.handleClose, keepMounted: true, disableEnforceFocus: true, disableAutoFocus: true, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: [_jsx(MenuItem, { component: Link, to: "/search", onClick: function () {
                            menuState.handleClose();
                            selectionInterface
                                .getCurrentQuery()
                                .set('id', null)
                                .resetToDefaults();
                            addSnack('Starting a new search', {
                                alertProps: { severity: 'info' },
                            });
                        }, children: "New" }), _jsx(MenuItem, { component: "div", ref: menuStateNewFromExisting.anchorRef, onClick: function () {
                            menuState.handleClose();
                            menuStateNewFromExisting.handleClick();
                        }, children: "New from existing" }), _jsx(MenuItem, { component: "div", ref: menuStateOpenSearch.anchorRef, onClick: function () {
                            menuState.handleClose();
                            menuStateOpenSearch.handleClick();
                        }, children: "Open" }), _jsx(MenuItem, { component: Link, disabled: searchPageMode === 'adhoc' || typeof data === 'boolean', to: "/search?defaultQuery=".concat(encodedQueryModelJSON), onClick: function (e) {
                            e.stopPropagation();
                            e.preventDefault();
                            menuState.handleClose();
                            menuStateCopy.handleClick();
                            return;
                        }, children: "Make a copy" }), _jsx(DarkDivider, { className: "m-2" }), _jsx(MenuItem, { disabled: searchPageMode === 'adhoc' || typeof data === 'boolean', onClick: function () {
                            menuStateRename.handleClick();
                            menuState.handleClose();
                        }, children: "Rename" }), _jsx(MenuItem, { disabled: searchPageMode === 'adhoc' || typeof data === 'boolean', onClick: function () {
                            if (typeof data !== 'boolean') {
                                AsyncTasks.delete({ lazyResult: data });
                                navigate("/search");
                            }
                            menuState.handleClose();
                        }, children: "Move to trash" }), _jsx(DarkDivider, { className: "m-2" }), _jsx(MenuItem, { disabled: searchPageMode === 'saved' && typeof data === 'boolean', onClick: function () {
                            selectionInterface.getCurrentQuery().set('type', 'advanced');
                            if (searchPageMode === 'adhoc') {
                                // set this as their preference
                                TypedUserInstance.updateQuerySettings({
                                    type: 'advanced',
                                });
                            }
                            menuState.handleClose();
                        }, children: "Advanced View" }), _jsx(MenuItem, { disabled: searchPageMode === 'saved' && typeof data === 'boolean', onClick: function () {
                            selectionInterface.getCurrentQuery().set('type', 'basic');
                            if (searchPageMode === 'adhoc') {
                                // set this as their preference
                                TypedUserInstance.updateQuerySettings({
                                    type: 'basic',
                                });
                            }
                            menuState.handleClose();
                        }, children: "Basic View" })] })] }));
};
var SaveButton = function () {
    var closed = useResizableGridContext().closed;
    var _a = React.useContext(SavedSearchModeContext), data = _a.data, searchPageMode = _a.searchPageMode, isSaving = _a.isSaving;
    return (_jsx(_Fragment, { children: closed ? (_jsx(Button, { disabled: data === true, variant: "outlined", color: "primary", size: "small", children: _jsx(SaveIcon, {}) })) : (_jsx(ButtonWithTwoStates, { disabled: data === true, variant: "outlined", color: "primary", size: "small", states: [
                { state: 'Saving', loading: true },
                {
                    state: searchPageMode === 'adhoc' ? 'Save' : 'Save as',
                    loading: false,
                },
            ], state: (function () {
                if (isSaving) {
                    return 'Saving';
                }
                return searchPageMode === 'adhoc' ? 'Save' : 'Save as';
            })() })) }));
};
var LeftBottom = function () {
    var _a = useResizableGridContext(), closed = _a.closed, setClosed = _a.setClosed, lastLength = _a.lastLength, setLength = _a.setLength;
    var _b = React.useContext(SavedSearchModeContext), data = _b.data, searchPageMode = _b.searchPageMode, selectionInterface = _b.selectionInterface;
    if (closed) {
        return (_jsx("div", { className: "flex flex-col items-center w-full py-4  flex-nowrap shrink-0 overflow-hidden", children: _jsxs("div", { className: "px-2", children: [_jsxs(Button, { fullWidth: true, variant: "text", color: "primary", size: "small", onClick: function () {
                            setClosed(false);
                            setLength(lastLength);
                        }, children: [_jsx(KeyboardArrowRightIcon, { color: "inherit", className: "Mui-text-text-primary" }), _jsx(KeyboardArrowRightIcon, { color: "inherit", className: "-ml-5 Mui-text-text-primary" })] }), _jsx(Button, { disabled: typeof data === 'boolean' && searchPageMode === 'saved', className: "mt-3", fullWidth: true, variant: "contained", color: "primary", size: "small", onClick: function () {
                            selectionInterface.getCurrentQuery().startSearchFromFirstPage();
                        }, children: _jsx(SearchIcon, {}) })] }) }));
    }
    return (_jsxs("div", { className: "w-full min-h-16 py-1 px-2 flex flex-row flex-nowrap items-center", children: [_jsxs(Button, { variant: "text", color: "primary", size: "small", onClick: function () {
                    setClosed(true);
                }, children: ["Collapse", _jsx(KeyboardArrowLeftIcon, { color: "inherit", className: "Mui-text-text-primary Mui-icon-size-small" }), _jsx(KeyboardArrowLeftIcon, { color: "inherit", className: "-ml-3 Mui-text-text-primary Mui-icon-size-small" })] }), _jsx(Button, { className: "ml-auto", disabled: typeof data === 'boolean' && searchPageMode === 'saved', variant: "contained", color: "primary", size: "small", onClick: function () {
                    selectionInterface.getCurrentQuery().startSearchFromFirstPage();
                }, children: "Search" })] }));
};
var SaveIndicator = function () {
    var isSaving = React.useContext(SavedSearchModeContext).isSaving;
    var closed = useResizableGridContext().closed;
    var _a = __read(React.useState(false), 2), showTempMessage = _a[0], setShowTempMessage = _a[1];
    var popupState = useMenuState();
    useUpdateEffect(function () {
        var timeoutid = undefined;
        if (isSaving === false) {
            setShowTempMessage(true);
            timeoutid = window.setTimeout(function () {
                setShowTempMessage(false);
            }, 4000);
        }
        return function () {
            window.clearTimeout(timeoutid);
        };
    }, [isSaving]);
    return (_jsxs(_Fragment, { children: [_jsx(Popover, { anchorEl: popupState.anchorRef.current, open: popupState.open, onClose: popupState.handleClose, onMouseDown: function (e) {
                    // otherwise since we're technically in a button this will trigger it
                    e.stopPropagation();
                }, onClick: function (e) {
                    // otherwise since we're technically in a button this will trigger it
                    e.stopPropagation();
                }, anchorOrigin: { vertical: 'bottom', horizontal: 'left' }, children: _jsxs(Paper, { elevation: Elevations.overlays, children: [_jsx("div", { className: "flex flex-row flex-nowrap items-center p-4 text-2xl Mui-text-primary", children: isSaving ? (_jsxs(_Fragment, { children: [_jsx(CircularProgress, { className: "mr-2", style: { width: '1rem', height: '1rem' } }), "Saving ..."] })) : (_jsxs(_Fragment, { children: [_jsx(CloudDoneIcon, { className: "mr-2" }), " All changes saved to the system."] })) }), _jsx(DarkDivider, {}), _jsx("div", { className: "p-4", children: "Every change you make is automatically saved." })] }) }), _jsx(Button, { component: "div", className: "shrink-0", onClick: function (e) {
                    e.stopPropagation();
                    popupState.handleClick();
                }, ref: popupState.anchorRef, children: _jsx("span", { className: "opacity-75 text-sm shrink-0 flex items-center flex-nowrap ".concat(closed ? 'mr-min flex-col' : 'mt-min flex-row'), children: isSaving ? (_jsxs(_Fragment, { children: [_jsx(CircularProgress, { className: "text-current text-base", style: { width: '1rem', height: '1rem' } }), ' ', _jsx("span", { className: "".concat(closed ? 'writing-mode-vertical-lr mt-1' : 'ml-1'), children: "Saving ..." })] })) : (_jsxs(_Fragment, { children: [_jsx(CloudDoneIcon, { className: "text-base" }), ' ', _jsx("span", { className: "".concat(closed ? 'writing-mode-vertical-lr mt-1' : 'ml-1'), children: showTempMessage ? 'Saved' : '' })] })) }) })] }));
};
var LeftTop = function () {
    var closed = useResizableGridContext().closed;
    var _a = React.useContext(SavedSearchModeContext), data = _a.data, searchPageMode = _a.searchPageMode, selectionInterface = _a.selectionInterface;
    useRerenderOnBackboneSync({
        lazyResult: typeof data !== 'boolean' ? data : undefined,
    });
    var navigate = useNavigate();
    var adhocMenuState = useMenuState();
    var savedMenuState = useMenuState();
    return (_jsxs("div", { className: "min-h-16 ".concat(closed ? 'h-full shrink overflow-hidden' : ''), children: [_jsxs("div", { className: "h-full w-full relative p-2 ".concat(closed
                    ? 'flex flex-col flex-nowrap items-center'
                    : 'flex flex-row flex-nowrap items-center'), children: [searchPageMode === 'adhoc' ? (_jsxs(_Fragment, { children: [_jsx(Popover, { anchorEl: adhocMenuState.anchorRef.current, open: adhocMenuState.open, onClose: adhocMenuState.handleClose, anchorOrigin: {
                                    vertical: closed ? 'top' : 'bottom',
                                    horizontal: closed ? 'right' : 'left',
                                }, children: _jsx(Paper, { elevation: Elevations.overlays, children: _jsx(SaveForm, { onClose: function () {
                                            adhocMenuState.handleClose();
                                        }, selectionInterface: selectionInterface, onSave: function (title) {
                                            selectionInterface.getCurrentQuery().set('title', title);
                                            var searchData = selectionInterface
                                                .getCurrentQuery()
                                                .toJSON();
                                            if (searchPageMode === 'adhoc') {
                                                var task = AsyncTasks.createSearch({
                                                    data: searchData,
                                                });
                                                navigate("/search/".concat(task.data.id));
                                            }
                                            else if (typeof data !== 'boolean') {
                                                AsyncTasks.saveSearch({
                                                    lazyResult: data,
                                                    data: searchData,
                                                });
                                            }
                                        } }) }) }), _jsx(Button, { color: "inherit", component: "div", className: "text-left text-2xl shrink truncate ".concat(closed ? 'h-full' : ''), onClick: adhocMenuState.handleClick, size: "small", ref: adhocMenuState.anchorRef, children: _jsxs("div", { className: "flex items-center flex-nowrap ".concat(closed ? 'flex-col h-full' : 'flex-row w-full'), children: [_jsxs("span", { className: "opacity-50 shrink truncate ".concat(closed ? 'writing-mode-vertical-lr mb-2' : 'mr-2'), children: ["Unsaved search", ' '] }), _jsx(SaveButton, {})] }) })] })) : null, data === false && searchPageMode === 'saved' ? (_jsx("div", { className: "text-2xl opacity-50 ".concat(closed ? 'writing-mode-vertical-lr' : ''), children: "Could not find search" })) : null, data === true ? (_jsx(_Fragment, { children: _jsx(Skeleton, { variant: "rectangular", className: "w-full h-full" }) })) : null, typeof data !== 'boolean' ? (_jsxs(_Fragment, { children: [_jsx(Popover, { anchorEl: savedMenuState.anchorRef.current, open: savedMenuState.open, onClose: savedMenuState.handleClose, anchorOrigin: {
                                    vertical: closed ? 'top' : 'bottom',
                                    horizontal: closed ? 'right' : 'left',
                                }, children: _jsx(Paper, { elevation: Elevations.overlays, children: _jsx(SaveForm, { onClose: savedMenuState.handleClose, selectionInterface: selectionInterface, onSave: function (title) {
                                            selectionInterface.getCurrentQuery().set('title', title);
                                            var searchData = selectionInterface
                                                .getCurrentQuery()
                                                .toJSON();
                                            if (searchPageMode === 'adhoc') {
                                                AsyncTasks.createSearch({ data: searchData });
                                            }
                                            else if (typeof data !== 'boolean') {
                                                AsyncTasks.saveSearch({
                                                    lazyResult: data,
                                                    data: searchData,
                                                });
                                            }
                                        } }) }) }), _jsx(Button, { component: "div", fullWidth: true, className: "text-left text-2xl shrink overflow-hidden ".concat(closed ? 'h-full' : ''), onClick: savedMenuState.handleClick, size: "small", ref: savedMenuState.anchorRef, children: _jsxs("div", { className: "flex items-center flex-nowrap ".concat(closed ? 'flex-col h-full' : 'w-full flex-row'), children: [_jsx("span", { className: "truncate ".concat(closed ? 'writing-mode-vertical-lr mb-2 shrink' : 'mr-2'), children: data.plain.metacard.properties.title }), _jsx(SaveIndicator, {})] }) })] })) : (_jsx(_Fragment, {})), _jsx("div", { className: "ml-auto shrink-0 ".concat(closed ? 'w-full order-first pt-1 h-16' : ''), children: _jsx(OptionsButton, {}) })] }), closed ? null : _jsx(DarkDivider, { className: "h-min w-full" })] }));
};
var LeftMiddle = function () {
    var closed = useResizableGridContext().closed;
    var _a = React.useContext(SavedSearchModeContext), data = _a.data, searchPageMode = _a.searchPageMode, selectionInterface = _a.selectionInterface;
    if (data === false && searchPageMode === 'saved') {
        // eventually add something?
        return _jsx("div", { className: "overflow-hidden w-full h-full shrink" });
    }
    return (_jsx("div", { className: "overflow-hidden w-full ".concat(closed ? 'shrink hidden' : 'h-full'), children: data === true ? (_jsx(Skeleton, { variant: "rectangular", className: "w-full h-full p-10" })) : (_jsx("div", { className: "w-full h-full overflow-auto pb-64 ".concat(closed ? 'hidden' : ''), children: _jsx(QueryAddReact, { model: selectionInterface.getCurrentQuery() }) })) }));
};
var useKeepSearchInUrl = function (_a) {
    var queryModel = _a.queryModel, on = _a.on;
    var navigate = useNavigate();
    var _b = useBackbone(), listenTo = _b.listenTo, stopListening = _b.stopListening;
    React.useEffect(function () {
        // this is fairly expensive, so keep it heavily debounced
        var debouncedUpdate = _.debounce(function () {
            if (on) {
                var encodedQueryModel = encodeURIComponent(JSON.stringify(queryModel.toJSON()));
                navigate("?".concat(queryString.stringify({
                    defaultQuery: encodedQueryModel,
                })));
            }
        }, 2000);
        listenTo(queryModel, 'change', debouncedUpdate);
        return function () {
            debouncedUpdate.cancel();
            stopListening(queryModel, 'change', debouncedUpdate);
        };
    }, [on, queryModel]);
};
var useSearchPageMode = function (_a) {
    var id = _a.id;
    var _b = __read(React.useState(id ? 'saved' : 'adhoc'), 2), mode = _b[0], setMode = _b[1];
    React.useEffect(function () {
        if (id) {
            return setMode('saved');
        }
        return setMode('adhoc');
    }, [id]);
    return mode;
};
var useSavedSearchPageMode = function (_a) {
    var id = _a.id;
    // handle all loading / data in here
    var _b = __read(React.useState(false), 2), data = _b[0], setData = _b[1];
    var task = useCreateSearchTask({ id: id });
    var restoreTask = useRestoreSearchTask({ id: id });
    var _c = __read(useQuery({
        attributes: {
            sources: ['local'],
        },
    }), 1), queryModel = _c[0];
    React.useEffect(function () {
        if (task || restoreTask) {
            setData(true);
            return;
        }
        var subscriptionCancel = function () { };
        if (id) {
            setData(true);
            queryModel.set('filterTree', new FilterBuilderClass({
                filters: [
                    new FilterClass({
                        type: '=',
                        property: 'id',
                        value: id,
                    }),
                    new FilterClass({
                        type: 'ILIKE',
                        property: 'metacard-tags',
                        value: '*',
                    }),
                ],
            }));
            queryModel.initializeResult();
            var lazyResults_1 = queryModel.getLazyResults();
            subscriptionCancel = lazyResults_1.subscribeTo({
                subscribableThing: 'filteredResults',
                callback: function () {
                    var results = Object.values(lazyResults_1.results);
                    if (results.length > 0) {
                        setData(results[0]);
                    }
                    else {
                        setData(false);
                    }
                },
            });
            queryModel.startSearchFromFirstPage();
        }
        else {
            setData(false);
        }
        return function () {
            subscriptionCancel();
            queryModel.cancelCurrentSearches();
        };
    }, [id, task, restoreTask]);
    return data;
};
var AutoSave = function () {
    var _a = React.useContext(SavedSearchModeContext), searchPageMode = _a.searchPageMode, selectionInterface = _a.selectionInterface, data = _a.data;
    var queryModel = selectionInterface.getCurrentQuery();
    var on = searchPageMode === 'saved';
    var _b = useBackbone(), listenTo = _b.listenTo, stopListening = _b.stopListening;
    React.useEffect(function () {
        var callback = function () {
            var changedAttributes = Object.keys(queryModel.changedAttributes());
            var isFromSwappingToSavedSearch = changedAttributes.includes('id');
            var isAttributeThatMatters = changedAttributes.includes('filterTree') ||
                changedAttributes.includes('sorts') ||
                changedAttributes.includes('sources');
            if (on &&
                queryModel.get('id') &&
                !isFromSwappingToSavedSearch &&
                isAttributeThatMatters &&
                typeof data !== 'boolean') {
                AsyncTasks.saveSearch({
                    lazyResult: data,
                    data: queryModel.toJSON(),
                });
            }
        };
        listenTo(queryModel, 'change', callback);
        return function () {
            stopListening(queryModel, 'change', callback);
        };
    }, [on, queryModel, data]);
    return null;
};
var SavedSearchModeContext = React.createContext({
    data: false,
    searchPageMode: 'adhoc',
    isSaving: false,
    selectionInterface: {},
});
var decodeUrlIfValid = function (search) {
    if (location) {
        try {
            var queryParams = queryString.parse(search);
            var defaultQueryString = (queryParams['defaultQuery'] || '').toString();
            return JSON.parse(decodeURIComponent(defaultQueryString));
        }
        catch (err) {
            return {};
        }
    }
    else {
        return {};
    }
};
export default function HomePage() {
    var location = useLocation();
    var _a = __read(useUserQuery({
        attributes: decodeUrlIfValid(location.search),
    }), 1), queryModel = _a[0];
    var id = useParams().id;
    var searchPageMode = useSearchPageMode({ id: id });
    var data = useSavedSearchPageMode({ id: id });
    var saveSearchTask = useSaveSearchTaskBasedOnParams();
    var isSaving = saveSearchTask !== null;
    React.useEffect(function () {
        var urlBasedQuery = location.search.split('?defaultQuery=')[1];
        if (urlBasedQuery) {
            selectionInterface.getCurrentQuery().refetchOrStartSearchFromFirstPage();
        }
    }, []);
    var _b = __read(React.useState(new SelectionInterfaceModel({
        currentQuery: queryModel,
    })), 1), selectionInterface = _b[0];
    useKeepSearchInUrl({
        queryModel: selectionInterface.getCurrentQuery(),
        on: searchPageMode === 'adhoc',
    });
    React.useEffect(function () {
        if (typeof data !== 'boolean') {
            selectionInterface.getCurrentQuery().set(data.plain.metacard.properties);
        }
    }, [data]);
    useUpdateEffect(function () {
        if (searchPageMode === 'adhoc') {
            selectionInterface.getCurrentQuery().unset('id');
            if (location.search === '') {
                selectionInterface.getCurrentQuery().resetToDefaults();
            }
        }
    }, [searchPageMode, location.search]);
    var setElement = useListenToEnterKeySubmitEvent({
        callback: function () {
            ;
            selectionInterface.getCurrentQuery().startSearchFromFirstPage();
        },
    }).setElement;
    return (_jsx(SavedSearchModeContext.Provider, { value: {
            data: data,
            searchPageMode: searchPageMode,
            isSaving: isSaving,
            selectionInterface: selectionInterface,
        }, children: _jsxs(Memo, { dependencies: [selectionInterface], children: [_jsx(AutoSave, {}), _jsx("div", { className: "w-full h-full", children: _jsxs(SplitPane, { variant: "horizontal", collapsedLength: 80, children: [_jsx("div", { className: "h-full w-full py-2", children: _jsx(Paper, { elevation: Elevations.panels, className: "h-full overflow-hidden w-full", children: _jsxs("div", { className: "flex flex-col flex-nowrap w-full h-full", ref: setElement, children: [_jsx(LeftTop, {}), _jsx(LeftMiddle, {}), _jsx(DarkDivider, { className: "h-min w-full" }), _jsx(LeftBottom, {})] }) }) }), _jsx("div", { className: "w-full h-full", children: _jsx(GoldenLayout, { selectionInterface: selectionInterface }) })] }) })] }) }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudC9wYWdlcy9zZWFyY2gudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBQzdELE9BQU8sRUFDTCxTQUFTLEVBQ1QsdUJBQXVCLEdBQ3hCLE1BQU0sa0NBQWtDLENBQUE7QUFDekMsT0FBTyx1QkFBdUIsTUFBTSxrREFBa0QsQ0FBQTtBQUN0RixPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ2xFLE9BQU8sS0FBSyxNQUFNLHFCQUFxQixDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUN0RCxPQUFPLHFCQUFxQixNQUFNLHVDQUF1QyxDQUFBO0FBQ3pFLE9BQU8sc0JBQXNCLE1BQU0sd0NBQXdDLENBQUE7QUFDM0UsT0FBTyxXQUFXLE1BQU0sY0FBYyxDQUFBO0FBRXRDLE9BQU8sTUFBdUIsTUFBTSxzQkFBc0IsQ0FBQTtBQUMxRCxPQUFPLFFBQVEsTUFBTSw4QkFBOEIsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDM0MsT0FBTyxVQUFVLE1BQU0sbUNBQW1DLENBQUE7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBQ3BFLE9BQU8sRUFDTCxJQUFJLEVBRUosV0FBVyxFQUNYLFdBQVcsRUFDWCxTQUFTLEdBQ1YsTUFBTSxrQkFBa0IsQ0FBQTtBQUN6QixPQUFPLENBQUMsTUFBTSxRQUFRLENBQUE7QUFDdEIsT0FBTyxTQUFTLE1BQU0seUJBQXlCLENBQUE7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFN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bnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBHb2xkZW5MYXlvdXQgfSBmcm9tICcuLi9nb2xkZW4tbGF5b3V0L2dvbGRlbi1sYXlvdXQnXG5pbXBvcnQge1xuICBTcGxpdFBhbmUsXG4gIHVzZVJlc2l6YWJsZUdyaWRDb250ZXh0LFxufSBmcm9tICcuLi9yZXNpemFibGUtZ3JpZC9yZXNpemFibGUtZ3JpZCdcbmltcG9ydCBTZWxlY3Rpb25JbnRlcmZhY2VNb2RlbCBmcm9tICcuLi9zZWxlY3Rpb24taW50ZXJmYWNlL3NlbGVjdGlvbi1pbnRlcmZhY2UubW9kZWwnXG5pbXBvcnQgeyB1c2VRdWVyeSwgdXNlVXNlclF1ZXJ5IH0gZnJvbSAnLi4vLi4vanMvbW9kZWwvVHlwZWRRdWVyeSdcbmltcG9ydCBQYXBlciBmcm9tICdAbXVpL21hdGVyaWFsL1BhcGVyJ1xuaW1wb3J0IHsgUXVlcnlBZGRSZWFjdCB9IGZyb20gJy4uL3F1ZXJ5LWFkZC9xdWVyeS1hZGQnXG5pbXBvcnQgS2V5Ym9hcmRBcnJvd0xlZnRJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvS2V5Ym9hcmRBcnJvd0xlZnQnXG5pbXBvcnQgS2V5Ym9hcmRBcnJvd1JpZ2h0SWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0tleWJvYXJkQXJyb3dSaWdodCdcbmltcG9ydCBxdWVyeVN0cmluZyBmcm9tICdxdWVyeS1zdHJpbmcnXG5cbmltcG9ydCBCdXR0b24sIHsgQnV0dG9uUHJvcHMgfSBmcm9tICdAbXVpL21hdGVyaWFsL0J1dHRvbidcbmltcG9ydCBNb3JlVmVydCBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL01vcmVWZXJ0J1xuaW1wb3J0IHsgRWxldmF0aW9ucyB9IGZyb20gJy4uL3RoZW1lL3RoZW1lJ1xuaW1wb3J0IFNlYXJjaEljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9TZWFyY2hUd29Ub25lJ1xuaW1wb3J0IHsgdXNlQmFja2JvbmUgfSBmcm9tICcuLi9zZWxlY3Rpb24tY2hlY2tib3gvdXNlQmFja2JvbmUuaG9vaydcbmltcG9ydCB7XG4gIExpbmssXG4gIExpbmtQcm9wcyxcbiAgdXNlTmF2aWdhdGUsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VQYXJhbXMsXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJ0BtdWkvbWF0ZXJpYWwvVGV4dEZpZWxkJ1xuaW1wb3J0IHsgRGFya0RpdmlkZXIgfSBmcm9tICcuLi9kYXJrLWRpdmlkZXIvZGFyay1kaXZpZGVyJ1xuaW1wb3J0IExpbmVhclByb2dyZXNzIGZyb20gJ0BtdWkvbWF0ZXJpYWwvTGluZWFyUHJvZ3Jlc3MnXG5pbXBvcnQgeyB1c2VVcGRhdGVFZmZlY3QgfSBmcm9tICdyZWFjdC11c2UnXG5pbXBvcnQge1xuICBGaWx0ZXJCdWlsZGVyQ2xhc3MsXG4gIEZpbHRlckNsYXNzLFxufSBmcm9tICcuLi9maWx0ZXItYnVpbGRlci9maWx0ZXIuc3RydWN0dXJlJ1xuaW1wb3J0IHsgTGF6eVF1ZXJ5UmVzdWx0IH0gZnJvbSAnLi4vLi4vanMvbW9kZWwvTGF6eVF1ZXJ5UmVzdWx0L0xhenlRdWVyeVJlc3VsdCdcbmltcG9ydCBTa2VsZXRvbiBmcm9tICdAbXVpL21hdGVyaWFsL1NrZWxldG9uJ1xuaW1wb3J0IENpcmN1bGFyUHJvZ3Jlc3MgZnJvbSAnQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzJ1xuaW1wb3J0IHsgdXNlUmVyZW5kZXJPbkJhY2tib25lU3luYyB9IGZyb20gJy4uLy4uL2pzL21vZGVsL0xhenlRdWVyeVJlc3VsdC9ob29rcydcbmltcG9ydCBDbG91ZERvbmVJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvQ2xvdWREb25lJ1xuaW1wb3J0IFNhdmVJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvU2F2ZSdcbmltcG9ydCB7IHVzZU1lbnVTdGF0ZSB9IGZyb20gJy4uL21lbnUtc3RhdGUvbWVudS1zdGF0ZSdcbmltcG9ydCBNZW51SXRlbSBmcm9tICdAbXVpL21hdGVyaWFsL01lbnVJdGVtJ1xuaW1wb3J0IE1lbnUgZnJvbSAnQG11aS9tYXRlcmlhbC9NZW51J1xuaW1wb3J0IHsgVHlwZWRVc2VySW5zdGFuY2UgfSBmcm9tICcuLi9zaW5nbGV0b25zL1R5cGVkVXNlcidcbmltcG9ydCB1c2VTbmFjayBmcm9tICcuLi9ob29rcy91c2VTbmFjaydcbmltcG9ydCBQb3BvdmVyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvUG9wb3ZlcidcbmltcG9ydCBBdXRvY29tcGxldGUsIHsgQXV0b2NvbXBsZXRlUHJvcHMgfSBmcm9tICdAbXVpL21hdGVyaWFsL0F1dG9jb21wbGV0ZSdcbmltcG9ydCBPdmVyZmxvd1Rvb2x0aXAsIHtcbiAgT3ZlcmZsb3dUb29sdGlwSFRNTEVsZW1lbnQsXG59IGZyb20gJy4uL292ZXJmbG93LXRvb2x0aXAvb3ZlcmZsb3ctdG9vbHRpcCdcbmltcG9ydCB7XG4gIEFzeW5jVGFza3MsXG4gIHVzZUNyZWF0ZVNlYXJjaFRhc2ssXG4gIHVzZVJlc3RvcmVTZWFyY2hUYXNrLFxuICB1c2VTYXZlU2VhcmNoVGFza0Jhc2VkT25QYXJhbXMsXG59IGZyb20gJy4uLy4uL2pzL21vZGVsL0FzeW5jVGFzay9hc3luYy10YXNrJ1xuaW1wb3J0IHsgTWVtbyB9IGZyb20gJy4uL21lbW8vbWVtbydcbmltcG9ydCB7IHVzZUxpc3RlblRvRW50ZXJLZXlTdWJtaXRFdmVudCB9IGZyb20gJy4uL2N1c3RvbS1ldmVudHMvZW50ZXIta2V5LXN1Ym1pdCdcbmltcG9ydCB7IHVzZVNlYXJjaFJlc3VsdHMgfSBmcm9tICcuLi9ob29rcy91c2VTZWFyY2hSZXN1bHRzJ1xuXG50eXBlIFNhdmVGb3JtVHlwZSA9IHtcbiAgc2VsZWN0aW9uSW50ZXJmYWNlOiBhbnlcbiAgb25TYXZlOiAodGl0bGU6IHN0cmluZykgPT4gdm9pZFxuICBvbkNsb3NlOiAoKSA9PiB2b2lkXG59XG5cbmV4cG9ydCBjb25zdCBTYXZlRm9ybSA9ICh7XG4gIG9uQ2xvc2UsXG4gIHNlbGVjdGlvbkludGVyZmFjZSxcbiAgb25TYXZlLFxufTogU2F2ZUZvcm1UeXBlKSA9PiB7XG4gIGNvbnN0IGN1cnJlbnRRdWVyeSA9IHNlbGVjdGlvbkludGVyZmFjZS5nZXRDdXJyZW50UXVlcnkoKVxuXG4gIGNvbnN0IFt0aXRsZSwgc2V0VGl0bGVdID0gUmVhY3QudXNlU3RhdGUoY3VycmVudFF1ZXJ5LmdldCgndGl0bGUnKSB8fCAnJylcbiAgY29uc3QgW3ZhbGlkYXRpb24sIHNldFZhbGlkYXRpb25dID0gUmVhY3QudXNlU3RhdGUoXG4gICAge30gYXMgeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVxuICApXG4gIHVzZVVwZGF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF0aXRsZSkge1xuICAgICAgc2V0VmFsaWRhdGlvbih7XG4gICAgICAgIHRpdGxlOiAnQ2Fubm90IGJlIGJsYW5rJyxcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFZhbGlkYXRpb24oe30pXG4gICAgfVxuICB9LCBbdGl0bGVdKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxmb3JtXG4gICAgICAgIGFjdGlvbj1cIi4vYmxhbmsuaHRtbFwiXG4gICAgICAgIG1ldGhvZD1cIlBPU1RcIlxuICAgICAgICBvblN1Ym1pdD17KGUpID0+IHtcbiAgICAgICAgICBpZiAoIXRpdGxlKSB7XG4gICAgICAgICAgICBzZXRWYWxpZGF0aW9uKHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdDYW5ub3QgYmUgYmxhbmsnLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRRdWVyeS5zZXQoJ3RpdGxlJywgdGl0bGUpXG4gICAgICAgICAgICBvblNhdmUodGl0bGUpXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIG9uQ2xvc2UoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9fVxuICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCJcbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTJcIj5cbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgIGxhYmVsPVwiTmFtZVwiXG4gICAgICAgICAgICB2YWx1ZT17dGl0bGV9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgc2V0VGl0bGUoZS50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgZXJyb3I9e0Jvb2xlYW4odmFsaWRhdGlvbi50aXRsZSl9XG4gICAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICAgIG9uRm9jdXM9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIGUudGFyZ2V0LnNlbGVjdCgpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgaGVscGVyVGV4dD17dmFsaWRhdGlvbi50aXRsZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8RGFya0RpdmlkZXIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtcm93IGZsZXgtbm93cmFwIGFsaWduIGp1c3RpZnktZW5kIHAtMlwiPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgb25DbG9zZSgpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIENhbmNlbFxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGRpc2FibGVkPXtPYmplY3Qua2V5cyh2YWxpZGF0aW9uKS5sZW5ndGggPiAwfVxuICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJtbC0zXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBTYXZlXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9mb3JtPlxuICAgIDwvPlxuICApXG59XG5cbnR5cGUgQnV0dG9uV2l0aE11bHRpcGxlU3RhdGVzVHlwZSA9IHtcbiAgc3RhdGVzOiB7IHN0YXRlOiBzdHJpbmc7IGxvYWRpbmc6IGJvb2xlYW4gfVtdXG4gIHN0YXRlOiBzdHJpbmdcbiAgbGFiZWxDbGFzc05hbWU/OiBzdHJpbmdcbn0gJiBPbWl0PEJ1dHRvblByb3BzLCAnY2hpbGRyZW4nPlxuY29uc3QgQnV0dG9uV2l0aFR3b1N0YXRlcyA9IChwcm9wczogQnV0dG9uV2l0aE11bHRpcGxlU3RhdGVzVHlwZSkgPT4ge1xuICBjb25zdCB7IHN0YXRlcywgc3RhdGUsIC4uLmJ1dHRvblByb3BzIH0gPSBwcm9wc1xuICBpZiAoc3RhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiA8ZGl2PllvdSBtdXN0IHNwZWNpZnkgYXQgbGVhc3Qgb25lIHN0YXRlPC9kaXY+XG4gIH1cbiAgY29uc3QgbG9uZ2VzdFN0YXRlID0gc3RhdGVzLnJlZHVjZSgobG9uZ2VzdCwgY3VycmVudCkgPT4ge1xuICAgIGlmIChjdXJyZW50LnN0YXRlLmxlbmd0aCA+IGxvbmdlc3QubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY3VycmVudC5zdGF0ZVxuICAgIH1cbiAgICByZXR1cm4gbG9uZ2VzdFxuICB9LCBzdGF0ZXNbMF0uc3RhdGUpXG4gIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHN0YXRlcy5maW5kKChzdGF0ZUluZm8pID0+IHN0YXRlSW5mby5zdGF0ZSA9PT0gc3RhdGUpXG4gIGlmIChjdXJyZW50U3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA8ZGl2PllvdSBtdXN0IHNwZWNpZnkgYSB2YWxpZCBzdGF0ZTwvZGl2PlxuICB9XG4gIGNvbnN0IGlzTG9hZGluZyA9IGN1cnJlbnRTdGF0ZT8ubG9hZGluZ1xuICByZXR1cm4gKFxuICAgIDxCdXR0b24gZGlzYWJsZWQ9e2lzTG9hZGluZ30gey4uLmJ1dHRvblByb3BzfT5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17YGludmlzaWJsZSAke3Byb3BzLmxhYmVsQ2xhc3NOYW1lfWB9PlxuICAgICAgICB7bG9uZ2VzdFN0YXRlfVxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgYWJzb2x1dGUgJHtwcm9wcy5sYWJlbENsYXNzTmFtZX1gfT57c3RhdGV9PC9zcGFuPlxuICAgICAge2lzTG9hZGluZyA/IChcbiAgICAgICAgPExpbmVhclByb2dyZXNzXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgbGVmdC0wIHRvcC0wIHctZnVsbCBoLWZ1bGwgb3BhY2l0eS01MFwiXG4gICAgICAgICAgdmFyaWFudD1cImluZGV0ZXJtaW5hdGVcIlxuICAgICAgICAvPlxuICAgICAgKSA6IG51bGx9XG4gICAgPC9CdXR0b24+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IE9wZW5TZWFyY2ggPSAoe1xuICBvbkZpbmlzaCxcbiAgY29uc3RydWN0TGluayxcbiAgbGFiZWwsXG4gIGFyY2hpdmVkID0gZmFsc2UsXG4gIGF1dG9jb21wbGV0ZVByb3BzLFxufToge1xuICBvbkZpbmlzaDogKHNlbGVjdGlvbjogTGF6eVF1ZXJ5UmVzdWx0KSA9PiB2b2lkXG4gIGNvbnN0cnVjdExpbms6IChyZXN1bHQ6IExhenlRdWVyeVJlc3VsdCkgPT4gTGlua1Byb3BzWyd0byddXG4gIGxhYmVsOiBzdHJpbmdcbiAgYXJjaGl2ZWQ/OiBib29sZWFuXG4gIGF1dG9jb21wbGV0ZVByb3BzPzogUGFydGlhbDxcbiAgICBBdXRvY29tcGxldGVQcm9wczxMYXp5UXVlcnlSZXN1bHQsIGZhbHNlLCB0cnVlLCBmYWxzZT5cbiAgPlxufSkgPT4ge1xuICBjb25zdCBbcG9zaXRpb25pbmdEb25lLCBzZXRQb3NpdGlvbmluZ0RvbmVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoJycpXG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpXG4gIGNvbnN0IGlucHV0UmVmID0gUmVhY3QudXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxuICBjb25zdCBbY3VycmVudEhpZ2hsaWdodCwgc2V0Q3VycmVudEhpZ2hsaWdodF0gPVxuICAgIFJlYWN0LnVzZVN0YXRlPE92ZXJmbG93VG9vbHRpcEhUTUxFbGVtZW50IHwgbnVsbD4obnVsbClcbiAgY29uc3QgW29wdGlvbnMsIHNldE9wdGlvbnNdID0gUmVhY3QudXNlU3RhdGU8TGF6eVF1ZXJ5UmVzdWx0W10+KFtdKVxuICBjb25zdCB7IGxhenlSZXN1bHRzLCBsb2FkaW5nIH0gPSB1c2VTZWFyY2hSZXN1bHRzKHtcbiAgICBzZWFyY2hUZXh0OiB2YWx1ZSxcbiAgICBhcmNoaXZlZCxcbiAgfSlcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRPcHRpb25zKGxhenlSZXN1bHRzKVxuICB9LCBbbGF6eVJlc3VsdHNdKVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGN1cnJlbnRIaWdobGlnaHQgJiYgY3VycmVudEhpZ2hsaWdodC5vdmVyZmxvd1Rvb2x0aXApIHtcbiAgICAgIGN1cnJlbnRIaWdobGlnaHQub3ZlcmZsb3dUb29sdGlwLnNldE9wZW4odHJ1ZSlcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChjdXJyZW50SGlnaGxpZ2h0ICYmIGN1cnJlbnRIaWdobGlnaHQub3ZlcmZsb3dUb29sdGlwKVxuICAgICAgICBjdXJyZW50SGlnaGxpZ2h0Lm92ZXJmbG93VG9vbHRpcC5zZXRPcGVuKGZhbHNlKVxuICAgIH1cbiAgfSwgW2N1cnJlbnRIaWdobGlnaHRdKVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHRpbWVvdXRpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNldFBvc2l0aW9uaW5nRG9uZSh0cnVlKVxuICAgIH0sIDUwMClcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0aWQpXG4gICAgfVxuICB9LCBbXSlcbiAgcmV0dXJuIChcbiAgICA8QXV0b2NvbXBsZXRlXG4gICAgICBjbGFzc05hbWU9XCJ3LTY0XCJcbiAgICAgIGlzT3B0aW9uRXF1YWxUb1ZhbHVlPXsob3B0aW9uKSA9PiBvcHRpb24ucGxhaW4uaWQgPT09IG9wdGlvbi5wbGFpbi5pZH1cbiAgICAgIGdldE9wdGlvbkxhYmVsPXsob3B0aW9uKSA9PiBvcHRpb24ucGxhaW4ubWV0YWNhcmQucHJvcGVydGllcy50aXRsZX1cbiAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICByZWY9e2lucHV0UmVmfVxuICAgICAgb3Blbj17b3BlbiAmJiBwb3NpdGlvbmluZ0RvbmV9XG4gICAgICBvbk9wZW49eygpID0+IHtcbiAgICAgICAgc2V0T3Blbih0cnVlKVxuICAgICAgfX1cbiAgICAgIG9uQ2xvc2U9eygpID0+IHtcbiAgICAgICAgc2V0T3BlbihmYWxzZSlcbiAgICAgIH19XG4gICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgICAgYXV0b0hpZ2hsaWdodFxuICAgICAgb25IaWdobGlnaHRDaGFuZ2U9eygpID0+IHtcbiAgICAgICAgaWYgKGlucHV0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICBjb25zdCBoaWdobGlnaHRlZEVsZW1lbnRTdHJpbmcgPSAoXG4gICAgICAgICAgICBpbnB1dFJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykgYXMgSFRNTElucHV0RWxlbWVudFxuICAgICAgICAgICkuZ2V0QXR0cmlidXRlKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKVxuICAgICAgICAgIGlmIChoaWdobGlnaHRlZEVsZW1lbnRTdHJpbmcpIHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRIaWdobGlnaHQoXG4gICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkRWxlbWVudFN0cmluZ1xuICAgICAgICAgICAgICAgICkgYXMgSFRNTExJRWxlbWVudFxuICAgICAgICAgICAgICApLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpIGFzIE92ZXJmbG93VG9vbHRpcEhUTUxFbGVtZW50XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRIaWdobGlnaHQobnVsbClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0Q3VycmVudEhpZ2hsaWdodChudWxsKVxuICAgICAgICB9XG4gICAgICB9fVxuICAgICAgbm9PcHRpb25zVGV4dD1cIk5vdGhpbmcgZm91bmQuXCJcbiAgICAgIHJlbmRlck9wdGlvbj17KHByb3BzLCBvcHRpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8bGkgey4uLnByb3BzfT5cbiAgICAgICAgICAgIDxMaW5rXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBwLTAgZm9udC1ub3JtYWwgbm8tdW5kZXJsaW5lIGhvdmVyOmZvbnQtbm9ybWFsIGhvdmVyOm5vLXVuZGVybGluZVwiXG4gICAgICAgICAgICAgIHRvPXtjb25zdHJ1Y3RMaW5rKG9wdGlvbil9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxPdmVyZmxvd1Rvb2x0aXBcbiAgICAgICAgICAgICAgICB0b29sdGlwUHJvcHM9e3tcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIHAtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgIHtvcHRpb24ucGxhaW4ubWV0YWNhcmQucHJvcGVydGllcy50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRydW5jYXRlIHctZnVsbCBwLTJcIj5cbiAgICAgICAgICAgICAgICAgIHtvcHRpb24ucGxhaW4ubWV0YWNhcmQucHJvcGVydGllcy50aXRsZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9PdmVyZmxvd1Rvb2x0aXA+XG4gICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKVxuICAgICAgfX1cbiAgICAgIExpc3Rib3hQcm9wcz17e1xuICAgICAgICBjbGFzc05hbWU6ICdjaGlsZHJlbi1wLTAgTXVpQXV0b2NvbXBsZXRlLWxpc3Rib3gnLCAvLyB3ZSBoYXZlIHRvIGFkZCB0aGUgb3JpZ2luYWwgY2xhc3MgKE11aUF1dG9jb21wbGV0ZS1saXN0Ym94KSBiYWNrIG9uIHVuZm9ydHVuYXRlbHlcbiAgICAgIH19XG4gICAgICBvbkNoYW5nZT17KF9lLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBvbkZpbmlzaCh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgIHJlbmRlcklucHV0PXsocGFyYW1zKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgey4uLnBhcmFtc31cbiAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBzZXRWYWx1ZShlLnRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgICAgICBJbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgIC4uLnBhcmFtcy5JbnB1dFByb3BzLFxuICAgICAgICAgICAgICBlbmRBZG9ybm1lbnQ6IChcbiAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICB7bG9hZGluZyA/IChcbiAgICAgICAgICAgICAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3MgY29sb3I9XCJpbmhlcml0XCIgc2l6ZT17MjB9IC8+XG4gICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgIHtwYXJhbXMuSW5wdXRQcm9wcy5lbmRBZG9ybm1lbnR9XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKVxuICAgICAgfX1cbiAgICAgIHsuLi5hdXRvY29tcGxldGVQcm9wc31cbiAgICAvPlxuICApXG59XG5cbmNvbnN0IE9wdGlvbnNCdXR0b24gPSAoKSA9PiB7XG4gIGNvbnN0IHsgc2VhcmNoUGFnZU1vZGUsIGRhdGEsIHNlbGVjdGlvbkludGVyZmFjZSB9ID0gUmVhY3QudXNlQ29udGV4dChcbiAgICBTYXZlZFNlYXJjaE1vZGVDb250ZXh0XG4gIClcbiAgY29uc3QgeyBjbG9zZWQgfSA9IHVzZVJlc2l6YWJsZUdyaWRDb250ZXh0KClcbiAgY29uc3QgbWVudVN0YXRlID0gdXNlTWVudVN0YXRlKClcbiAgY29uc3QgbWVudVN0YXRlT3BlblNlYXJjaCA9IHVzZU1lbnVTdGF0ZSgpXG4gIGNvbnN0IG1lbnVTdGF0ZU5ld0Zyb21FeGlzdGluZyA9IHVzZU1lbnVTdGF0ZSgpXG4gIGNvbnN0IG1lbnVTdGF0ZUNvcHkgPSB1c2VNZW51U3RhdGUoKVxuICBjb25zdCBtZW51U3RhdGVSZW5hbWUgPSB1c2VNZW51U3RhdGUoKVxuICBjb25zdCBtZW51U3RhdGVSZXN0b3JlID0gdXNlTWVudVN0YXRlKClcbiAgY29uc3QgYWRkU25hY2sgPSB1c2VTbmFjaygpXG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKVxuICBjb25zdCBbZW5jb2RlZFF1ZXJ5TW9kZWxKU09OLCBzZXRFbmNvZGVkUXVlcnlNb2RlbEpTT05dID0gUmVhY3QudXNlU3RhdGUoJycpXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRFbmNvZGVkUXVlcnlNb2RlbEpTT04oXG4gICAgICBlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHNlbGVjdGlvbkludGVyZmFjZS5nZXRDdXJyZW50UXVlcnkoKS50b0pTT04oKSlcbiAgICAgIClcbiAgICApXG4gIH0sIFttZW51U3RhdGUub3Blbl0pXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgY29tcG9uZW50PVwiZGl2XCJcbiAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgIHJlZj17bWVudVN0YXRlLmFuY2hvclJlZn1cbiAgICAgICAgb25DbGljaz17bWVudVN0YXRlLmhhbmRsZUNsaWNrfVxuICAgICAgPlxuICAgICAgICB7Y2xvc2VkID8gbnVsbCA6IDxzcGFuIGNsYXNzTmFtZT1cIk11aS10ZXh0LXByaW1hcnlcIj5PcHRpb25zPC9zcGFuPn1cbiAgICAgICAgPE1vcmVWZXJ0IC8+XG4gICAgICA8L0J1dHRvbj5cbiAgICAgIDxQb3BvdmVyXG4gICAgICAgIG9wZW49e21lbnVTdGF0ZVJlc3RvcmUub3Blbn1cbiAgICAgICAgYW5jaG9yRWw9e21lbnVTdGF0ZS5hbmNob3JSZWYuY3VycmVudH1cbiAgICAgICAgb25DbG9zZT17bWVudVN0YXRlUmVzdG9yZS5oYW5kbGVDbG9zZX1cbiAgICAgICAgYW5jaG9yT3JpZ2luPXt7IHZlcnRpY2FsOiAnYm90dG9tJywgaG9yaXpvbnRhbDogJ2xlZnQnIH19XG4gICAgICA+XG4gICAgICAgIDxQYXBlciBlbGV2YXRpb249e0VsZXZhdGlvbnMub3ZlcmxheXN9IGNsYXNzTmFtZT1cInAtMlwiPlxuICAgICAgICAgIDxPcGVuU2VhcmNoXG4gICAgICAgICAgICBsYWJlbD1cIlJlc3RvcmUgYSBzZWFyY2ggZnJvbSB0aGUgdHJhc2hcIlxuICAgICAgICAgICAgYXJjaGl2ZWRcbiAgICAgICAgICAgIGNvbnN0cnVjdExpbms9eyhyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgY29weSA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocmVzdWx0LnBsYWluLm1ldGFjYXJkLnByb3BlcnRpZXMpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgZGVsZXRlIGNvcHkuaWRcbiAgICAgICAgICAgICAgZGVsZXRlIGNvcHkudGl0bGVcbiAgICAgICAgICAgICAgZGVsZXRlIGNvcHlbJ21ldGFjYXJkLmRlbGV0ZWQuZGF0ZSddXG4gICAgICAgICAgICAgIGRlbGV0ZSBjb3B5WydtZXRhY2FyZC5kZWxldGVkLmlkJ11cbiAgICAgICAgICAgICAgZGVsZXRlIGNvcHlbJ21ldGFjYXJkLmRlbGV0ZWQudGFncyddXG4gICAgICAgICAgICAgIGRlbGV0ZSBjb3B5WydtZXRhY2FyZC5kZWxldGVkLnZlcnNpb24nXVxuICAgICAgICAgICAgICBkZWxldGUgY29weVsnbWV0YWNhcmQtdGFncyddXG4gICAgICAgICAgICAgIGRlbGV0ZSBjb3B5WydtZXRhY2FyZC10eXBlJ11cblxuICAgICAgICAgICAgICBjb25zdCBlbmNvZGVkUXVlcnlNb2RlbCA9IGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjb3B5KSlcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRobmFtZTogJy9zZWFyY2gnLFxuICAgICAgICAgICAgICAgIHNlYXJjaDogYD9kZWZhdWx0UXVlcnk9JHtlbmNvZGVkUXVlcnlNb2RlbH1gLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25GaW5pc2g9eyhyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgQXN5bmNUYXNrcy5yZXN0b3JlKHsgbGF6eVJlc3VsdDogcmVzdWx0IH0pXG4gICAgICAgICAgICAgIC8vIHJlcGxhY2UgYmVjYXVzZSB0ZWNobmljYWxseSB0aGV5IGdldCB0aGUgbGluayBpbiBjb25zdHJ1Y3RMaW5rIHB1dCBpbnRvIGhpc3RvcnkgYXMgd2VsbCB1bmZvcnR1bmF0ZWx5LCB3aWxsIG5lZWQgdG8gZml4IHRoaXMgbW9yZSBnZW5lcmFsbHlcbiAgICAgICAgICAgICAgbmF2aWdhdGUoXG4gICAgICAgICAgICAgICAgYC9zZWFyY2gvJHtyZXN1bHQucGxhaW4ubWV0YWNhcmQucHJvcGVydGllc1snbWV0YWNhcmQuZGVsZXRlZC5pZCddfWAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgbWVudVN0YXRlUmVzdG9yZS5oYW5kbGVDbG9zZSgpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvUGFwZXI+XG4gICAgICA8L1BvcG92ZXI+XG4gICAgICA8UG9wb3ZlclxuICAgICAgICBvcGVuPXttZW51U3RhdGVDb3B5Lm9wZW59XG4gICAgICAgIGFuY2hvckVsPXttZW51U3RhdGUuYW5jaG9yUmVmLmN1cnJlbnR9XG4gICAgICAgIG9uQ2xvc2U9e21lbnVTdGF0ZUNvcHkuaGFuZGxlQ2xvc2V9XG4gICAgICAgIGFuY2hvck9yaWdpbj17e1xuICAgICAgICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICAgICAgICBob3Jpem9udGFsOiAnbGVmdCcsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxQYXBlciBlbGV2YXRpb249e0VsZXZhdGlvbnMub3ZlcmxheXN9IGNsYXNzTmFtZT1cInAtMlwiPlxuICAgICAgICAgIDxTYXZlRm9ybVxuICAgICAgICAgICAgb25DbG9zZT17KCkgPT4ge1xuICAgICAgICAgICAgICBtZW51U3RhdGVDb3B5LmhhbmRsZUNsb3NlKClcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblNhdmU9eyh0aXRsZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UXVlcnlKU09OID0gc2VsZWN0aW9uSW50ZXJmYWNlXG4gICAgICAgICAgICAgICAgLmdldEN1cnJlbnRRdWVyeSgpXG4gICAgICAgICAgICAgICAgLnRvSlNPTigpXG4gICAgICAgICAgICAgIGN1cnJlbnRRdWVyeUpTT04udGl0bGUgPSB0aXRsZVxuICAgICAgICAgICAgICBjb25zdCB0YXNrID0gQXN5bmNUYXNrcy5jcmVhdGVTZWFyY2goeyBkYXRhOiBjdXJyZW50UXVlcnlKU09OIH0pXG4gICAgICAgICAgICAgIG5hdmlnYXRlKGAvc2VhcmNoLyR7dGFzay5kYXRhLmlkfWApXG5cbiAgICAgICAgICAgICAgYWRkU25hY2soYE1ha2luZyBhIGNvcHkgb2YgJHt0aXRsZX1gLCB7XG4gICAgICAgICAgICAgICAgYWxlcnRQcm9wczogeyBzZXZlcml0eTogJ2luZm8nIH0sXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgc2VsZWN0aW9uSW50ZXJmYWNlPXtzZWxlY3Rpb25JbnRlcmZhY2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9QYXBlcj5cbiAgICAgIDwvUG9wb3Zlcj5cbiAgICAgIDxQb3BvdmVyXG4gICAgICAgIG9wZW49e21lbnVTdGF0ZVJlbmFtZS5vcGVufVxuICAgICAgICBhbmNob3JFbD17bWVudVN0YXRlLmFuY2hvclJlZi5jdXJyZW50fVxuICAgICAgICBvbkNsb3NlPXttZW51U3RhdGVSZW5hbWUuaGFuZGxlQ2xvc2V9XG4gICAgICAgIGFuY2hvck9yaWdpbj17eyB2ZXJ0aWNhbDogJ2JvdHRvbScsIGhvcml6b250YWw6ICdsZWZ0JyB9fVxuICAgICAgPlxuICAgICAgICA8UGFwZXIgZWxldmF0aW9uPXtFbGV2YXRpb25zLm92ZXJsYXlzfSBjbGFzc05hbWU9XCJwLTJcIj5cbiAgICAgICAgICA8U2F2ZUZvcm1cbiAgICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHtcbiAgICAgICAgICAgICAgbWVudVN0YXRlUmVuYW1lLmhhbmRsZUNsb3NlKClcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblNhdmU9eyh0aXRsZSkgPT4ge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRRdWVyeUpTT04gPSBzZWxlY3Rpb25JbnRlcmZhY2VcbiAgICAgICAgICAgICAgICAgIC5nZXRDdXJyZW50UXVlcnkoKVxuICAgICAgICAgICAgICAgICAgLnRvSlNPTigpXG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXJ5SlNPTi50aXRsZSA9IHRpdGxlXG4gICAgICAgICAgICAgICAgQXN5bmNUYXNrcy5zYXZlU2VhcmNoKHtcbiAgICAgICAgICAgICAgICAgIGRhdGE6IGN1cnJlbnRRdWVyeUpTT04sXG4gICAgICAgICAgICAgICAgICBsYXp5UmVzdWx0OiBkYXRhLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBzZWxlY3Rpb25JbnRlcmZhY2U9e3NlbGVjdGlvbkludGVyZmFjZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1BhcGVyPlxuICAgICAgPC9Qb3BvdmVyPlxuICAgICAgPFBvcG92ZXJcbiAgICAgICAgb3Blbj17bWVudVN0YXRlTmV3RnJvbUV4aXN0aW5nLm9wZW59XG4gICAgICAgIGFuY2hvckVsPXttZW51U3RhdGUuYW5jaG9yUmVmLmN1cnJlbnR9XG4gICAgICAgIG9uQ2xvc2U9e21lbnVTdGF0ZU5ld0Zyb21FeGlzdGluZy5oYW5kbGVDbG9zZX1cbiAgICAgICAgYW5jaG9yT3JpZ2luPXt7IHZlcnRpY2FsOiAnYm90dG9tJywgaG9yaXpvbnRhbDogJ2xlZnQnIH19XG4gICAgICA+XG4gICAgICAgIDxQYXBlciBlbGV2YXRpb249e0VsZXZhdGlvbnMub3ZlcmxheXN9IGNsYXNzTmFtZT1cInAtMlwiPlxuICAgICAgICAgIDxPcGVuU2VhcmNoXG4gICAgICAgICAgICBsYWJlbD1cIlN0YXJ0IGEgbmV3IHNlYXJjaCBmcm9tIGFuIGV4aXN0aW5nIHNhdmVkIHNlYXJjaFwiXG4gICAgICAgICAgICBjb25zdHJ1Y3RMaW5rPXsocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvcHkgPSBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHJlc3VsdC5wbGFpbi5tZXRhY2FyZC5wcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGRlbGV0ZSBjb3B5LmlkXG4gICAgICAgICAgICAgIGRlbGV0ZSBjb3B5LnRpdGxlXG4gICAgICAgICAgICAgIGNvbnN0IGVuY29kZWRRdWVyeU1vZGVsID0gZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNvcHkpKVxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lOiAnL3NlYXJjaCcsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBgP2RlZmF1bHRRdWVyeT0ke2VuY29kZWRRdWVyeU1vZGVsfWAsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbkZpbmlzaD17KHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjb3B5ID0gSlNPTi5wYXJzZShcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShyZXN1bHQucGxhaW4ubWV0YWNhcmQucHJvcGVydGllcylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBkZWxldGUgY29weS5pZFxuICAgICAgICAgICAgICBkZWxldGUgY29weS50aXRsZVxuICAgICAgICAgICAgICBjb25zdCBlbmNvZGVkUXVlcnlNb2RlbCA9IGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjb3B5KSlcbiAgICAgICAgICAgICAgLy8gcmVwbGFjZSBiZWNhdXNlIHRlY2huaWNhbGx5IHRoZXkgZ2V0IHRoZSBsaW5rIGluIGNvbnN0cnVjdExpbmsgcHV0IGludG8gaGlzdG9yeSBhcyB3ZWxsIHVuZm9ydHVuYXRlbHksIHdpbGwgbmVlZCB0byBmaXggdGhpcyBtb3JlIGdlbmVyYWxseVxuICAgICAgICAgICAgICBuYXZpZ2F0ZShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBwYXRobmFtZTogJy9zZWFyY2gnLFxuICAgICAgICAgICAgICAgICAgc2VhcmNoOiBgP2RlZmF1bHRRdWVyeT0ke2VuY29kZWRRdWVyeU1vZGVsfWAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBzZWxlY3Rpb25JbnRlcmZhY2UuZ2V0Q3VycmVudFF1ZXJ5KCkuc2V0KHtcbiAgICAgICAgICAgICAgICAuLi5jb3B5LFxuICAgICAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgYWRkU25hY2soXG4gICAgICAgICAgICAgICAgYE5ldyBzZWFyY2ggYmFzZWQgb24gJyR7cmVzdWx0LnBsYWluLm1ldGFjYXJkLnByb3BlcnRpZXMudGl0bGV9J2AsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYWxlcnRQcm9wczogeyBzZXZlcml0eTogJ2luZm8nIH0sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIG1lbnVTdGF0ZU5ld0Zyb21FeGlzdGluZy5oYW5kbGVDbG9zZSgpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvUGFwZXI+XG4gICAgICA8L1BvcG92ZXI+XG4gICAgICA8UG9wb3ZlclxuICAgICAgICBvcGVuPXttZW51U3RhdGVPcGVuU2VhcmNoLm9wZW59XG4gICAgICAgIGFuY2hvckVsPXttZW51U3RhdGUuYW5jaG9yUmVmLmN1cnJlbnR9XG4gICAgICAgIG9uQ2xvc2U9e21lbnVTdGF0ZU9wZW5TZWFyY2guaGFuZGxlQ2xvc2V9XG4gICAgICAgIGFuY2hvck9yaWdpbj17eyB2ZXJ0aWNhbDogJ2JvdHRvbScsIGhvcml6b250YWw6ICdsZWZ0JyB9fVxuICAgICAgPlxuICAgICAgICA8UGFwZXIgZWxldmF0aW9uPXtFbGV2YXRpb25zLm92ZXJsYXlzfSBjbGFzc05hbWU9XCJwLTJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1yb3cgZmxleC1ub3dyYXBcIj5cbiAgICAgICAgICAgIDxPcGVuU2VhcmNoXG4gICAgICAgICAgICAgIGxhYmVsPVwiT3BlbiBhIHNhdmVkIHNlYXJjaFwiXG4gICAgICAgICAgICAgIGNvbnN0cnVjdExpbms9eyhyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYC9zZWFyY2gvJHtyZXN1bHQucGxhaW4uaWR9YFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBvbkZpbmlzaD17KHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBiZWNhdXNlIHRlY2huaWNhbGx5IHRoZXkgZ2V0IHRoZSBsaW5rIGluIGNvbnN0cnVjdExpbmsgcHV0IGludG8gaGlzdG9yeSBhcyB3ZWxsIHVuZm9ydHVuYXRlbHksIHdpbGwgbmVlZCB0byBmaXggdGhpcyBtb3JlIGdlbmVyYWxseVxuICAgICAgICAgICAgICAgIG5hdmlnYXRlKGAvc2VhcmNoLyR7dmFsdWUucGxhaW4uaWR9YCwge1xuICAgICAgICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGFkZFNuYWNrKFxuICAgICAgICAgICAgICAgICAgYFNlYXJjaCAnJHt2YWx1ZS5wbGFpbi5tZXRhY2FyZC5wcm9wZXJ0aWVzLnRpdGxlfScgb3BlbmVkYCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRQcm9wczogeyBzZXZlcml0eTogJ2luZm8nIH0sXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIG1lbnVTdGF0ZU9wZW5TZWFyY2guaGFuZGxlQ2xvc2UoKVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIG1lbnVTdGF0ZU9wZW5TZWFyY2guaGFuZGxlQ2xvc2UoKVxuICAgICAgICAgICAgICAgIG1lbnVTdGF0ZVJlc3RvcmUuaGFuZGxlQ2xpY2soKVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBDaGVjayBUcmFzaD9cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1BhcGVyPlxuICAgICAgPC9Qb3BvdmVyPlxuICAgICAgPE1lbnVcbiAgICAgICAgYW5jaG9yRWw9e21lbnVTdGF0ZS5hbmNob3JSZWYuY3VycmVudH1cbiAgICAgICAgb3Blbj17bWVudVN0YXRlLm9wZW59XG4gICAgICAgIG9uQ2xvc2U9e21lbnVTdGF0ZS5oYW5kbGVDbG9zZX1cbiAgICAgICAga2VlcE1vdW50ZWQ9e3RydWV9XG4gICAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXNcbiAgICAgICAgZGlzYWJsZUF1dG9Gb2N1c1xuICAgICAgICBhbmNob3JPcmlnaW49e3sgdmVydGljYWw6ICdib3R0b20nLCBob3Jpem9udGFsOiAnbGVmdCcgfX1cbiAgICAgID5cbiAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgY29tcG9uZW50PXtMaW5rfVxuICAgICAgICAgIHRvPVwiL3NlYXJjaFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgbWVudVN0YXRlLmhhbmRsZUNsb3NlKClcbiAgICAgICAgICAgIHNlbGVjdGlvbkludGVyZmFjZVxuICAgICAgICAgICAgICAuZ2V0Q3VycmVudFF1ZXJ5KClcbiAgICAgICAgICAgICAgLnNldCgnaWQnLCBudWxsKVxuICAgICAgICAgICAgICAucmVzZXRUb0RlZmF1bHRzKClcbiAgICAgICAgICAgIGFkZFNuYWNrKCdTdGFydGluZyBhIG5ldyBzZWFyY2gnLCB7XG4gICAgICAgICAgICAgIGFsZXJ0UHJvcHM6IHsgc2V2ZXJpdHk6ICdpbmZvJyB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgTmV3XG4gICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgIDxNZW51SXRlbVxuICAgICAgICAgIGNvbXBvbmVudD1cImRpdlwiXG4gICAgICAgICAgcmVmPXttZW51U3RhdGVOZXdGcm9tRXhpc3RpbmcuYW5jaG9yUmVmfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIG1lbnVTdGF0ZS5oYW5kbGVDbG9zZSgpXG4gICAgICAgICAgICBtZW51U3RhdGVOZXdGcm9tRXhpc3RpbmcuaGFuZGxlQ2xpY2soKVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBOZXcgZnJvbSBleGlzdGluZ1xuICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICA8TWVudUl0ZW1cbiAgICAgICAgICBjb21wb25lbnQ9XCJkaXZcIlxuICAgICAgICAgIHJlZj17bWVudVN0YXRlT3BlblNlYXJjaC5hbmNob3JSZWZ9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgbWVudVN0YXRlLmhhbmRsZUNsb3NlKClcbiAgICAgICAgICAgIG1lbnVTdGF0ZU9wZW5TZWFyY2guaGFuZGxlQ2xpY2soKVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBPcGVuXG4gICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgIHsvKiA8TWVudUl0ZW1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBtZW51U3RhdGVSZXN0b3JlLmhhbmRsZUNsaWNrKClcbiAgICAgICAgICAgIG1lbnVTdGF0ZS5oYW5kbGVDbG9zZSgpXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIFJlc3RvcmUgZnJvbSB0cmFzaFxuICAgICAgICA8L01lbnVJdGVtPiAqL31cbiAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgY29tcG9uZW50PXtMaW5rfVxuICAgICAgICAgIGRpc2FibGVkPXtzZWFyY2hQYWdlTW9kZSA9PT0gJ2FkaG9jJyB8fCB0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nfVxuICAgICAgICAgIHRvPXtgL3NlYXJjaD9kZWZhdWx0UXVlcnk9JHtlbmNvZGVkUXVlcnlNb2RlbEpTT059YH1cbiAgICAgICAgICBvbkNsaWNrPXsoZTogYW55KSA9PiB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIG1lbnVTdGF0ZS5oYW5kbGVDbG9zZSgpXG4gICAgICAgICAgICBtZW51U3RhdGVDb3B5LmhhbmRsZUNsaWNrKClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBNYWtlIGEgY29weVxuICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICA8RGFya0RpdmlkZXIgY2xhc3NOYW1lPVwibS0yXCIgLz5cbiAgICAgICAgey8qIDxNZW51SXRlbSBkaXNhYmxlZD17c2VhcmNoUGFnZU1vZGUgPT09ICdhZGhvYyd9PlNhdmU8L01lbnVJdGVtPlxuICAgICAgICA8TWVudUl0ZW0gZGlzYWJsZWQ9e3NlYXJjaFBhZ2VNb2RlID09PSAnYWRob2MnfT5TYXZlIGFzPC9NZW51SXRlbT4gKi99XG4gICAgICAgIDxNZW51SXRlbVxuICAgICAgICAgIGRpc2FibGVkPXtzZWFyY2hQYWdlTW9kZSA9PT0gJ2FkaG9jJyB8fCB0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIG1lbnVTdGF0ZVJlbmFtZS5oYW5kbGVDbGljaygpXG4gICAgICAgICAgICBtZW51U3RhdGUuaGFuZGxlQ2xvc2UoKVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBSZW5hbWVcbiAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgZGlzYWJsZWQ9e3NlYXJjaFBhZ2VNb2RlID09PSAnYWRob2MnIHx8IHR5cGVvZiBkYXRhID09PSAnYm9vbGVhbid9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgQXN5bmNUYXNrcy5kZWxldGUoeyBsYXp5UmVzdWx0OiBkYXRhIH0pXG4gICAgICAgICAgICAgIG5hdmlnYXRlKGAvc2VhcmNoYClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lbnVTdGF0ZS5oYW5kbGVDbG9zZSgpXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIE1vdmUgdG8gdHJhc2hcbiAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICAgPERhcmtEaXZpZGVyIGNsYXNzTmFtZT1cIm0tMlwiIC8+XG4gICAgICAgIDxNZW51SXRlbVxuICAgICAgICAgIGRpc2FibGVkPXtzZWFyY2hQYWdlTW9kZSA9PT0gJ3NhdmVkJyAmJiB0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIHNlbGVjdGlvbkludGVyZmFjZS5nZXRDdXJyZW50UXVlcnkoKS5zZXQoJ3R5cGUnLCAnYWR2YW5jZWQnKVxuICAgICAgICAgICAgaWYgKHNlYXJjaFBhZ2VNb2RlID09PSAnYWRob2MnKSB7XG4gICAgICAgICAgICAgIC8vIHNldCB0aGlzIGFzIHRoZWlyIHByZWZlcmVuY2VcbiAgICAgICAgICAgICAgVHlwZWRVc2VySW5zdGFuY2UudXBkYXRlUXVlcnlTZXR0aW5ncyh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2FkdmFuY2VkJyxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lbnVTdGF0ZS5oYW5kbGVDbG9zZSgpXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIEFkdmFuY2VkIFZpZXdcbiAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgZGlzYWJsZWQ9e3NlYXJjaFBhZ2VNb2RlID09PSAnc2F2ZWQnICYmIHR5cGVvZiBkYXRhID09PSAnYm9vbGVhbid9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgc2VsZWN0aW9uSW50ZXJmYWNlLmdldEN1cnJlbnRRdWVyeSgpLnNldCgndHlwZScsICdiYXNpYycpXG4gICAgICAgICAgICBpZiAoc2VhcmNoUGFnZU1vZGUgPT09ICdhZGhvYycpIHtcbiAgICAgICAgICAgICAgLy8gc2V0IHRoaXMgYXMgdGhlaXIgcHJlZmVyZW5jZVxuICAgICAgICAgICAgICBUeXBlZFVzZXJJbnN0YW5jZS51cGRhdGVRdWVyeVNldHRpbmdzKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFzaWMnLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVudVN0YXRlLmhhbmRsZUNsb3NlKClcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgQmFzaWMgVmlld1xuICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgPC9NZW51PlxuICAgIDwvPlxuICApXG59XG5cbmNvbnN0IFNhdmVCdXR0b24gPSAoKSA9PiB7XG4gIGNvbnN0IHsgY2xvc2VkIH0gPSB1c2VSZXNpemFibGVHcmlkQ29udGV4dCgpXG4gIGNvbnN0IHsgZGF0YSwgc2VhcmNoUGFnZU1vZGUsIGlzU2F2aW5nIH0gPSBSZWFjdC51c2VDb250ZXh0KFxuICAgIFNhdmVkU2VhcmNoTW9kZUNvbnRleHRcbiAgKVxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7Y2xvc2VkID8gKFxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgZGlzYWJsZWQ9e2RhdGEgPT09IHRydWV9XG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgID5cbiAgICAgICAgICA8U2F2ZUljb24gLz5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApIDogKFxuICAgICAgICA8QnV0dG9uV2l0aFR3b1N0YXRlc1xuICAgICAgICAgIGRpc2FibGVkPXtkYXRhID09PSB0cnVlfVxuICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIHN0YXRlcz17W1xuICAgICAgICAgICAgeyBzdGF0ZTogJ1NhdmluZycsIGxvYWRpbmc6IHRydWUgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3RhdGU6IHNlYXJjaFBhZ2VNb2RlID09PSAnYWRob2MnID8gJ1NhdmUnIDogJ1NhdmUgYXMnLFxuICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXX1cbiAgICAgICAgICBzdGF0ZT17KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1NhdmluZykge1xuICAgICAgICAgICAgICByZXR1cm4gJ1NhdmluZydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hQYWdlTW9kZSA9PT0gJ2FkaG9jJyA/ICdTYXZlJyA6ICdTYXZlIGFzJ1xuICAgICAgICAgIH0pKCl9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvPlxuICApXG59XG5cbmNvbnN0IExlZnRCb3R0b20gPSAoKSA9PiB7XG4gIGNvbnN0IHsgY2xvc2VkLCBzZXRDbG9zZWQsIGxhc3RMZW5ndGgsIHNldExlbmd0aCB9ID0gdXNlUmVzaXphYmxlR3JpZENvbnRleHQoKVxuICBjb25zdCB7IGRhdGEsIHNlYXJjaFBhZ2VNb2RlLCBzZWxlY3Rpb25JbnRlcmZhY2UgfSA9IFJlYWN0LnVzZUNvbnRleHQoXG4gICAgU2F2ZWRTZWFyY2hNb2RlQ29udGV4dFxuICApXG5cbiAgaWYgKGNsb3NlZCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIHctZnVsbCBweS00ICBmbGV4LW5vd3JhcCBzaHJpbmstMCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJweC0yXCI+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgc2V0Q2xvc2VkKGZhbHNlKVxuICAgICAgICAgICAgICBzZXRMZW5ndGgobGFzdExlbmd0aClcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEtleWJvYXJkQXJyb3dSaWdodEljb25cbiAgICAgICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiTXVpLXRleHQtdGV4dC1wcmltYXJ5XCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8S2V5Ym9hcmRBcnJvd1JpZ2h0SWNvblxuICAgICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCItbWwtNSBNdWktdGV4dC10ZXh0LXByaW1hcnlcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGRpc2FibGVkPXt0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nICYmIHNlYXJjaFBhZ2VNb2RlID09PSAnc2F2ZWQnfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibXQtM1wiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbGVjdGlvbkludGVyZmFjZS5nZXRDdXJyZW50UXVlcnkoKS5zdGFydFNlYXJjaEZyb21GaXJzdFBhZ2UoKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8U2VhcmNoSWNvbiAvPlxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIG1pbi1oLTE2IHB5LTEgcHgtMiBmbGV4IGZsZXgtcm93IGZsZXgtbm93cmFwIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgPEJ1dHRvblxuICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBzZXRDbG9zZWQodHJ1ZSlcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgQ29sbGFwc2VcbiAgICAgICAgPEtleWJvYXJkQXJyb3dMZWZ0SWNvblxuICAgICAgICAgIGNvbG9yPVwiaW5oZXJpdFwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiTXVpLXRleHQtdGV4dC1wcmltYXJ5IE11aS1pY29uLXNpemUtc21hbGxcIlxuICAgICAgICAvPlxuICAgICAgICA8S2V5Ym9hcmRBcnJvd0xlZnRJY29uXG4gICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICBjbGFzc05hbWU9XCItbWwtMyBNdWktdGV4dC10ZXh0LXByaW1hcnkgTXVpLWljb24tc2l6ZS1zbWFsbFwiXG4gICAgICAgIC8+XG4gICAgICA8L0J1dHRvbj5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwibWwtYXV0b1wiXG4gICAgICAgIGRpc2FibGVkPXt0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nICYmIHNlYXJjaFBhZ2VNb2RlID09PSAnc2F2ZWQnfVxuICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIHNlbGVjdGlvbkludGVyZmFjZS5nZXRDdXJyZW50UXVlcnkoKS5zdGFydFNlYXJjaEZyb21GaXJzdFBhZ2UoKVxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICBTZWFyY2hcbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IFNhdmVJbmRpY2F0b3IgPSAoKSA9PiB7XG4gIGNvbnN0IHsgaXNTYXZpbmcgfSA9IFJlYWN0LnVzZUNvbnRleHQoU2F2ZWRTZWFyY2hNb2RlQ29udGV4dClcbiAgY29uc3QgeyBjbG9zZWQgfSA9IHVzZVJlc2l6YWJsZUdyaWRDb250ZXh0KClcbiAgY29uc3QgW3Nob3dUZW1wTWVzc2FnZSwgc2V0U2hvd1RlbXBNZXNzYWdlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBwb3B1cFN0YXRlID0gdXNlTWVudVN0YXRlKClcbiAgdXNlVXBkYXRlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgdGltZW91dGlkID0gdW5kZWZpbmVkIGFzIG51bWJlciB8IHVuZGVmaW5lZFxuICAgIGlmIChpc1NhdmluZyA9PT0gZmFsc2UpIHtcbiAgICAgIHNldFNob3dUZW1wTWVzc2FnZSh0cnVlKVxuICAgICAgdGltZW91dGlkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRTaG93VGVtcE1lc3NhZ2UoZmFsc2UpXG4gICAgICB9LCA0MDAwKVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0aWQpXG4gICAgfVxuICB9LCBbaXNTYXZpbmddKVxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8UG9wb3ZlclxuICAgICAgICBhbmNob3JFbD17cG9wdXBTdGF0ZS5hbmNob3JSZWYuY3VycmVudH1cbiAgICAgICAgb3Blbj17cG9wdXBTdGF0ZS5vcGVufVxuICAgICAgICBvbkNsb3NlPXtwb3B1cFN0YXRlLmhhbmRsZUNsb3NlfVxuICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugc2luY2Ugd2UncmUgdGVjaG5pY2FsbHkgaW4gYSBidXR0b24gdGhpcyB3aWxsIHRyaWdnZXIgaXRcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIH19XG4gICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIHNpbmNlIHdlJ3JlIHRlY2huaWNhbGx5IGluIGEgYnV0dG9uIHRoaXMgd2lsbCB0cmlnZ2VyIGl0XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICB9fVxuICAgICAgICBhbmNob3JPcmlnaW49e3sgdmVydGljYWw6ICdib3R0b20nLCBob3Jpem9udGFsOiAnbGVmdCcgfX1cbiAgICAgID5cbiAgICAgICAgPFBhcGVyIGVsZXZhdGlvbj17RWxldmF0aW9ucy5vdmVybGF5c30+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtcm93IGZsZXgtbm93cmFwIGl0ZW1zLWNlbnRlciBwLTQgdGV4dC0yeGwgTXVpLXRleHQtcHJpbWFyeVwiPlxuICAgICAgICAgICAge2lzU2F2aW5nID8gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxDaXJjdWxhclByb2dyZXNzXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtci0yXCJcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMXJlbScsIGhlaWdodDogJzFyZW0nIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICBTYXZpbmcgLi4uXG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8Q2xvdWREb25lSWNvbiBjbGFzc05hbWU9XCJtci0yXCIgLz4gQWxsIGNoYW5nZXMgc2F2ZWQgdG8gdGhlXG4gICAgICAgICAgICAgICAgc3lzdGVtLlxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPERhcmtEaXZpZGVyIC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTRcIj5cbiAgICAgICAgICAgIEV2ZXJ5IGNoYW5nZSB5b3UgbWFrZSBpcyBhdXRvbWF0aWNhbGx5IHNhdmVkLlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1BhcGVyPlxuICAgICAgPC9Qb3BvdmVyPlxuICAgICAgPEJ1dHRvblxuICAgICAgICBjb21wb25lbnQ9XCJkaXZcIlxuICAgICAgICBjbGFzc05hbWU9XCJzaHJpbmstMFwiXG4gICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgIHBvcHVwU3RhdGUuaGFuZGxlQ2xpY2soKVxuICAgICAgICB9fVxuICAgICAgICByZWY9e3BvcHVwU3RhdGUuYW5jaG9yUmVmfVxuICAgICAgPlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNsYXNzTmFtZT17YG9wYWNpdHktNzUgdGV4dC1zbSBzaHJpbmstMCBmbGV4IGl0ZW1zLWNlbnRlciBmbGV4LW5vd3JhcCAke1xuICAgICAgICAgICAgY2xvc2VkID8gJ21yLW1pbiBmbGV4LWNvbCcgOiAnbXQtbWluIGZsZXgtcm93J1xuICAgICAgICAgIH1gfVxuICAgICAgICA+XG4gICAgICAgICAge2lzU2F2aW5nID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWN1cnJlbnQgdGV4dC1iYXNlXCJcbiAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzFyZW0nLCBoZWlnaHQ6ICcxcmVtJyB9fVxuICAgICAgICAgICAgICAvPnsnICd9XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtcbiAgICAgICAgICAgICAgICAgIGNsb3NlZCA/ICd3cml0aW5nLW1vZGUtdmVydGljYWwtbHIgbXQtMScgOiAnbWwtMSdcbiAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFNhdmluZyAuLi5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxDbG91ZERvbmVJY29uIGNsYXNzTmFtZT1cInRleHQtYmFzZVwiIC8+eycgJ31cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Ake1xuICAgICAgICAgICAgICAgICAgY2xvc2VkID8gJ3dyaXRpbmctbW9kZS12ZXJ0aWNhbC1sciBtdC0xJyA6ICdtbC0xJ1xuICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3Nob3dUZW1wTWVzc2FnZSA/ICdTYXZlZCcgOiAnJ31cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9CdXR0b24+XG4gICAgPC8+XG4gIClcbn1cblxuY29uc3QgTGVmdFRvcCA9ICgpID0+IHtcbiAgY29uc3QgeyBjbG9zZWQgfSA9IHVzZVJlc2l6YWJsZUdyaWRDb250ZXh0KClcbiAgY29uc3QgeyBkYXRhLCBzZWFyY2hQYWdlTW9kZSwgc2VsZWN0aW9uSW50ZXJmYWNlIH0gPSBSZWFjdC51c2VDb250ZXh0KFxuICAgIFNhdmVkU2VhcmNoTW9kZUNvbnRleHRcbiAgKVxuICB1c2VSZXJlbmRlck9uQmFja2JvbmVTeW5jKHtcbiAgICBsYXp5UmVzdWx0OiB0eXBlb2YgZGF0YSAhPT0gJ2Jvb2xlYW4nID8gZGF0YSA6IHVuZGVmaW5lZCxcbiAgfSlcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG4gIGNvbnN0IGFkaG9jTWVudVN0YXRlID0gdXNlTWVudVN0YXRlKClcbiAgY29uc3Qgc2F2ZWRNZW51U3RhdGUgPSB1c2VNZW51U3RhdGUoKVxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17YG1pbi1oLTE2ICR7Y2xvc2VkID8gJ2gtZnVsbCBzaHJpbmsgb3ZlcmZsb3ctaGlkZGVuJyA6ICcnfWB9XG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2BoLWZ1bGwgdy1mdWxsIHJlbGF0aXZlIHAtMiAke1xuICAgICAgICAgIGNsb3NlZFxuICAgICAgICAgICAgPyAnZmxleCBmbGV4LWNvbCBmbGV4LW5vd3JhcCBpdGVtcy1jZW50ZXInXG4gICAgICAgICAgICA6ICdmbGV4IGZsZXgtcm93IGZsZXgtbm93cmFwIGl0ZW1zLWNlbnRlcidcbiAgICAgICAgfWB9XG4gICAgICA+XG4gICAgICAgIHtzZWFyY2hQYWdlTW9kZSA9PT0gJ2FkaG9jJyA/IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPFBvcG92ZXJcbiAgICAgICAgICAgICAgYW5jaG9yRWw9e2FkaG9jTWVudVN0YXRlLmFuY2hvclJlZi5jdXJyZW50fVxuICAgICAgICAgICAgICBvcGVuPXthZGhvY01lbnVTdGF0ZS5vcGVufVxuICAgICAgICAgICAgICBvbkNsb3NlPXthZGhvY01lbnVTdGF0ZS5oYW5kbGVDbG9zZX1cbiAgICAgICAgICAgICAgYW5jaG9yT3JpZ2luPXt7XG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGNsb3NlZCA/ICd0b3AnIDogJ2JvdHRvbScsXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogY2xvc2VkID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFBhcGVyIGVsZXZhdGlvbj17RWxldmF0aW9ucy5vdmVybGF5c30+XG4gICAgICAgICAgICAgICAgPFNhdmVGb3JtXG4gICAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFkaG9jTWVudVN0YXRlLmhhbmRsZUNsb3NlKClcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb25JbnRlcmZhY2U9e3NlbGVjdGlvbkludGVyZmFjZX1cbiAgICAgICAgICAgICAgICAgIG9uU2F2ZT17KHRpdGxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbkludGVyZmFjZS5nZXRDdXJyZW50UXVlcnkoKS5zZXQoJ3RpdGxlJywgdGl0bGUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaERhdGEgPSBzZWxlY3Rpb25JbnRlcmZhY2VcbiAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q3VycmVudFF1ZXJ5KClcbiAgICAgICAgICAgICAgICAgICAgICAudG9KU09OKClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaFBhZ2VNb2RlID09PSAnYWRob2MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFzayA9IEFzeW5jVGFza3MuY3JlYXRlU2VhcmNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNlYXJjaERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZShgL3NlYXJjaC8ke3Rhc2suZGF0YS5pZH1gKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICBBc3luY1Rhc2tzLnNhdmVTZWFyY2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF6eVJlc3VsdDogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNlYXJjaERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxuICAgICAgICAgICAgICBjb21wb25lbnQ9XCJkaXZcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0ZXh0LWxlZnQgdGV4dC0yeGwgc2hyaW5rIHRydW5jYXRlICR7XG4gICAgICAgICAgICAgICAgY2xvc2VkID8gJ2gtZnVsbCcgOiAnJ1xuICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgb25DbGljaz17YWRob2NNZW51U3RhdGUuaGFuZGxlQ2xpY2t9XG4gICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICAgIHJlZj17YWRob2NNZW51U3RhdGUuYW5jaG9yUmVmfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgZmxleCBpdGVtcy1jZW50ZXIgZmxleC1ub3dyYXAgJHtcbiAgICAgICAgICAgICAgICAgIGNsb3NlZCA/ICdmbGV4LWNvbCBoLWZ1bGwnIDogJ2ZsZXgtcm93IHctZnVsbCdcbiAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BvcGFjaXR5LTUwIHNocmluayB0cnVuY2F0ZSAke1xuICAgICAgICAgICAgICAgICAgICBjbG9zZWQgPyAnd3JpdGluZy1tb2RlLXZlcnRpY2FsLWxyIG1iLTInIDogJ21yLTInXG4gICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBVbnNhdmVkIHNlYXJjaHsnICd9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxTYXZlQnV0dG9uIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICB7ZGF0YSA9PT0gZmFsc2UgJiYgc2VhcmNoUGFnZU1vZGUgPT09ICdzYXZlZCcgPyAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgdGV4dC0yeGwgb3BhY2l0eS01MCAke1xuICAgICAgICAgICAgICBjbG9zZWQgPyAnd3JpdGluZy1tb2RlLXZlcnRpY2FsLWxyJyA6ICcnXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBDb3VsZCBub3QgZmluZCBzZWFyY2hcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIHtkYXRhID09PSB0cnVlID8gKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8U2tlbGV0b24gdmFyaWFudD1cInJlY3Rhbmd1bGFyXCIgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbFwiIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICB7dHlwZW9mIGRhdGEgIT09ICdib29sZWFuJyA/IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPFBvcG92ZXJcbiAgICAgICAgICAgICAgYW5jaG9yRWw9e3NhdmVkTWVudVN0YXRlLmFuY2hvclJlZi5jdXJyZW50fVxuICAgICAgICAgICAgICBvcGVuPXtzYXZlZE1lbnVTdGF0ZS5vcGVufVxuICAgICAgICAgICAgICBvbkNsb3NlPXtzYXZlZE1lbnVTdGF0ZS5oYW5kbGVDbG9zZX1cbiAgICAgICAgICAgICAgYW5jaG9yT3JpZ2luPXt7XG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGNsb3NlZCA/ICd0b3AnIDogJ2JvdHRvbScsXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogY2xvc2VkID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFBhcGVyIGVsZXZhdGlvbj17RWxldmF0aW9ucy5vdmVybGF5c30+XG4gICAgICAgICAgICAgICAgPFNhdmVGb3JtXG4gICAgICAgICAgICAgICAgICBvbkNsb3NlPXtzYXZlZE1lbnVTdGF0ZS5oYW5kbGVDbG9zZX1cbiAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbkludGVyZmFjZT17c2VsZWN0aW9uSW50ZXJmYWNlfVxuICAgICAgICAgICAgICAgICAgb25TYXZlPXsodGl0bGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uSW50ZXJmYWNlLmdldEN1cnJlbnRRdWVyeSgpLnNldCgndGl0bGUnLCB0aXRsZSlcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VhcmNoRGF0YSA9IHNlbGVjdGlvbkludGVyZmFjZVxuICAgICAgICAgICAgICAgICAgICAgIC5nZXRDdXJyZW50UXVlcnkoKVxuICAgICAgICAgICAgICAgICAgICAgIC50b0pTT04oKVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoUGFnZU1vZGUgPT09ICdhZGhvYycpIHtcbiAgICAgICAgICAgICAgICAgICAgICBBc3luY1Rhc2tzLmNyZWF0ZVNlYXJjaCh7IGRhdGE6IHNlYXJjaERhdGEgfSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQXN5bmNUYXNrcy5zYXZlU2VhcmNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhenlSZXN1bHQ6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBzZWFyY2hEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgY29tcG9uZW50PVwiZGl2XCJcbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17YHRleHQtbGVmdCB0ZXh0LTJ4bCBzaHJpbmsgb3ZlcmZsb3ctaGlkZGVuICR7XG4gICAgICAgICAgICAgICAgY2xvc2VkID8gJ2gtZnVsbCcgOiAnJ1xuICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgb25DbGljaz17c2F2ZWRNZW51U3RhdGUuaGFuZGxlQ2xpY2t9XG4gICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICAgIHJlZj17c2F2ZWRNZW51U3RhdGUuYW5jaG9yUmVmfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgZmxleCBpdGVtcy1jZW50ZXIgZmxleC1ub3dyYXAgJHtcbiAgICAgICAgICAgICAgICAgIGNsb3NlZCA/ICdmbGV4LWNvbCBoLWZ1bGwnIDogJ3ctZnVsbCBmbGV4LXJvdydcbiAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0cnVuY2F0ZSAke1xuICAgICAgICAgICAgICAgICAgICBjbG9zZWQgPyAnd3JpdGluZy1tb2RlLXZlcnRpY2FsLWxyIG1iLTIgc2hyaW5rJyA6ICdtci0yJ1xuICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2RhdGEucGxhaW4ubWV0YWNhcmQucHJvcGVydGllcy50aXRsZX1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPFNhdmVJbmRpY2F0b3IgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8PjwvPlxuICAgICAgICApfVxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtgbWwtYXV0byBzaHJpbmstMCAke1xuICAgICAgICAgICAgY2xvc2VkID8gJ3ctZnVsbCBvcmRlci1maXJzdCBwdC0xIGgtMTYnIDogJydcbiAgICAgICAgICB9YH1cbiAgICAgICAgPlxuICAgICAgICAgIDxPcHRpb25zQnV0dG9uIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICB7Y2xvc2VkID8gbnVsbCA6IDxEYXJrRGl2aWRlciBjbGFzc05hbWU9XCJoLW1pbiB3LWZ1bGxcIiAvPn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBMZWZ0TWlkZGxlID0gKCkgPT4ge1xuICBjb25zdCB7IGNsb3NlZCB9ID0gdXNlUmVzaXphYmxlR3JpZENvbnRleHQoKVxuICBjb25zdCB7IGRhdGEsIHNlYXJjaFBhZ2VNb2RlLCBzZWxlY3Rpb25JbnRlcmZhY2UgfSA9IFJlYWN0LnVzZUNvbnRleHQoXG4gICAgU2F2ZWRTZWFyY2hNb2RlQ29udGV4dFxuICApXG5cbiAgaWYgKGRhdGEgPT09IGZhbHNlICYmIHNlYXJjaFBhZ2VNb2RlID09PSAnc2F2ZWQnKSB7XG4gICAgLy8gZXZlbnR1YWxseSBhZGQgc29tZXRoaW5nP1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm92ZXJmbG93LWhpZGRlbiB3LWZ1bGwgaC1mdWxsIHNocmlua1wiPjwvZGl2PlxuICB9XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtgb3ZlcmZsb3ctaGlkZGVuIHctZnVsbCAke1xuICAgICAgICBjbG9zZWQgPyAnc2hyaW5rIGhpZGRlbicgOiAnaC1mdWxsJ1xuICAgICAgfWB9XG4gICAgPlxuICAgICAge2RhdGEgPT09IHRydWUgPyAoXG4gICAgICAgIDxTa2VsZXRvblxuICAgICAgICAgIHZhcmlhbnQ9XCJyZWN0YW5ndWxhclwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCBwLTEwXCJcbiAgICAgICAgPjwvU2tlbGV0b24+XG4gICAgICApIDogKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtgdy1mdWxsIGgtZnVsbCBvdmVyZmxvdy1hdXRvIHBiLTY0ICR7XG4gICAgICAgICAgICBjbG9zZWQgPyAnaGlkZGVuJyA6ICcnXG4gICAgICAgICAgfWB9XG4gICAgICAgID5cbiAgICAgICAgICA8UXVlcnlBZGRSZWFjdCBtb2RlbD17c2VsZWN0aW9uSW50ZXJmYWNlLmdldEN1cnJlbnRRdWVyeSgpfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgdXNlS2VlcFNlYXJjaEluVXJsID0gKHtcbiAgcXVlcnlNb2RlbCxcbiAgb24sXG59OiB7XG4gIHF1ZXJ5TW9kZWw6IGFueVxuICBvbjogYm9vbGVhblxufSkgPT4ge1xuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKClcbiAgY29uc3QgeyBsaXN0ZW5Ubywgc3RvcExpc3RlbmluZyB9ID0gdXNlQmFja2JvbmUoKVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIHRoaXMgaXMgZmFpcmx5IGV4cGVuc2l2ZSwgc28ga2VlcCBpdCBoZWF2aWx5IGRlYm91bmNlZFxuICAgIGNvbnN0IGRlYm91bmNlZFVwZGF0ZSA9IF8uZGVib3VuY2UoKCkgPT4ge1xuICAgICAgaWYgKG9uKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZWRRdWVyeU1vZGVsID0gZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHF1ZXJ5TW9kZWwudG9KU09OKCkpXG4gICAgICAgIClcbiAgICAgICAgbmF2aWdhdGUoXG4gICAgICAgICAgYD8ke3F1ZXJ5U3RyaW5nLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBkZWZhdWx0UXVlcnk6IGVuY29kZWRRdWVyeU1vZGVsLFxuICAgICAgICAgIH0pfWBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0sIDIwMDApXG4gICAgbGlzdGVuVG8ocXVlcnlNb2RlbCwgJ2NoYW5nZScsIGRlYm91bmNlZFVwZGF0ZSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZWJvdW5jZWRVcGRhdGUuY2FuY2VsKClcbiAgICAgIHN0b3BMaXN0ZW5pbmcocXVlcnlNb2RlbCwgJ2NoYW5nZScsIGRlYm91bmNlZFVwZGF0ZSlcbiAgICB9XG4gIH0sIFtvbiwgcXVlcnlNb2RlbF0pXG59XG5cbnR5cGUgU2VhcmNoUGFnZU1vZGUgPSAnc2F2ZWQnIHwgJ2FkaG9jJ1xuXG5jb25zdCB1c2VTZWFyY2hQYWdlTW9kZSA9ICh7IGlkIH06IHsgaWQ/OiBzdHJpbmcgfSk6IFNlYXJjaFBhZ2VNb2RlID0+IHtcbiAgY29uc3QgW21vZGUsIHNldE1vZGVdID0gUmVhY3QudXNlU3RhdGU8U2VhcmNoUGFnZU1vZGU+KGlkID8gJ3NhdmVkJyA6ICdhZGhvYycpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlkKSB7XG4gICAgICByZXR1cm4gc2V0TW9kZSgnc2F2ZWQnKVxuICAgIH1cbiAgICByZXR1cm4gc2V0TW9kZSgnYWRob2MnKVxuICB9LCBbaWRdKVxuICByZXR1cm4gbW9kZVxufVxuXG50eXBlIFNhdmVkU2VhcmNoUGFnZU1vZGUgPSBib29sZWFuIHwgTGF6eVF1ZXJ5UmVzdWx0XG5jb25zdCB1c2VTYXZlZFNlYXJjaFBhZ2VNb2RlID0gKHtcbiAgaWQsXG59OiB7XG4gIGlkPzogc3RyaW5nXG59KTogU2F2ZWRTZWFyY2hQYWdlTW9kZSA9PiB7XG4gIC8vIGhhbmRsZSBhbGwgbG9hZGluZyAvIGRhdGEgaW4gaGVyZVxuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSBSZWFjdC51c2VTdGF0ZTxTYXZlZFNlYXJjaFBhZ2VNb2RlPihmYWxzZSlcbiAgY29uc3QgdGFzayA9IHVzZUNyZWF0ZVNlYXJjaFRhc2soeyBpZCB9KVxuICBjb25zdCByZXN0b3JlVGFzayA9IHVzZVJlc3RvcmVTZWFyY2hUYXNrKHsgaWQgfSlcbiAgY29uc3QgW3F1ZXJ5TW9kZWxdID0gdXNlUXVlcnkoe1xuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIHNvdXJjZXM6IFsnbG9jYWwnXSxcbiAgICB9LFxuICB9KVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0YXNrIHx8IHJlc3RvcmVUYXNrKSB7XG4gICAgICBzZXREYXRhKHRydWUpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IHN1YnNjcmlwdGlvbkNhbmNlbCA9ICgpID0+IHt9XG5cbiAgICBpZiAoaWQpIHtcbiAgICAgIHNldERhdGEodHJ1ZSlcbiAgICAgIHF1ZXJ5TW9kZWwuc2V0KFxuICAgICAgICAnZmlsdGVyVHJlZScsXG4gICAgICAgIG5ldyBGaWx0ZXJCdWlsZGVyQ2xhc3Moe1xuICAgICAgICAgIGZpbHRlcnM6IFtcbiAgICAgICAgICAgIG5ldyBGaWx0ZXJDbGFzcyh7XG4gICAgICAgICAgICAgIHR5cGU6ICc9JyxcbiAgICAgICAgICAgICAgcHJvcGVydHk6ICdpZCcsXG4gICAgICAgICAgICAgIHZhbHVlOiBpZCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IEZpbHRlckNsYXNzKHtcbiAgICAgICAgICAgICAgdHlwZTogJ0lMSUtFJyxcbiAgICAgICAgICAgICAgcHJvcGVydHk6ICdtZXRhY2FyZC10YWdzJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICcqJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICBxdWVyeU1vZGVsLmluaXRpYWxpemVSZXN1bHQoKVxuICAgICAgY29uc3QgbGF6eVJlc3VsdHMgPSBxdWVyeU1vZGVsLmdldExhenlSZXN1bHRzKClcbiAgICAgIHN1YnNjcmlwdGlvbkNhbmNlbCA9IGxhenlSZXN1bHRzLnN1YnNjcmliZVRvKHtcbiAgICAgICAgc3Vic2NyaWJhYmxlVGhpbmc6ICdmaWx0ZXJlZFJlc3VsdHMnLFxuICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBPYmplY3QudmFsdWVzKGxhenlSZXN1bHRzLnJlc3VsdHMpXG4gICAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2V0RGF0YShyZXN1bHRzWzBdKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXREYXRhKGZhbHNlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICBxdWVyeU1vZGVsLnN0YXJ0U2VhcmNoRnJvbUZpcnN0UGFnZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldERhdGEoZmFsc2UpXG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb25DYW5jZWwoKVxuICAgICAgcXVlcnlNb2RlbC5jYW5jZWxDdXJyZW50U2VhcmNoZXMoKVxuICAgIH1cbiAgfSwgW2lkLCB0YXNrLCByZXN0b3JlVGFza10pXG4gIHJldHVybiBkYXRhXG59XG5cbmNvbnN0IEF1dG9TYXZlID0gKCkgPT4ge1xuICBjb25zdCB7IHNlYXJjaFBhZ2VNb2RlLCBzZWxlY3Rpb25JbnRlcmZhY2UsIGRhdGEgfSA9IFJlYWN0LnVzZUNvbnRleHQoXG4gICAgU2F2ZWRTZWFyY2hNb2RlQ29udGV4dFxuICApXG4gIGNvbnN0IHF1ZXJ5TW9kZWwgPSBzZWxlY3Rpb25JbnRlcmZhY2UuZ2V0Q3VycmVudFF1ZXJ5KClcbiAgY29uc3Qgb24gPSBzZWFyY2hQYWdlTW9kZSA9PT0gJ3NhdmVkJ1xuXG4gIGNvbnN0IHsgbGlzdGVuVG8sIHN0b3BMaXN0ZW5pbmcgfSA9IHVzZUJhY2tib25lKClcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGNoYW5nZWRBdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMocXVlcnlNb2RlbC5jaGFuZ2VkQXR0cmlidXRlcygpKVxuICAgICAgY29uc3QgaXNGcm9tU3dhcHBpbmdUb1NhdmVkU2VhcmNoID0gY2hhbmdlZEF0dHJpYnV0ZXMuaW5jbHVkZXMoJ2lkJylcbiAgICAgIGNvbnN0IGlzQXR0cmlidXRlVGhhdE1hdHRlcnMgPVxuICAgICAgICBjaGFuZ2VkQXR0cmlidXRlcy5pbmNsdWRlcygnZmlsdGVyVHJlZScpIHx8XG4gICAgICAgIGNoYW5nZWRBdHRyaWJ1dGVzLmluY2x1ZGVzKCdzb3J0cycpIHx8XG4gICAgICAgIGNoYW5nZWRBdHRyaWJ1dGVzLmluY2x1ZGVzKCdzb3VyY2VzJylcbiAgICAgIGlmIChcbiAgICAgICAgb24gJiZcbiAgICAgICAgcXVlcnlNb2RlbC5nZXQoJ2lkJykgJiZcbiAgICAgICAgIWlzRnJvbVN3YXBwaW5nVG9TYXZlZFNlYXJjaCAmJlxuICAgICAgICBpc0F0dHJpYnV0ZVRoYXRNYXR0ZXJzICYmXG4gICAgICAgIHR5cGVvZiBkYXRhICE9PSAnYm9vbGVhbidcbiAgICAgICkge1xuICAgICAgICBBc3luY1Rhc2tzLnNhdmVTZWFyY2goe1xuICAgICAgICAgIGxhenlSZXN1bHQ6IGRhdGEsXG4gICAgICAgICAgZGF0YTogcXVlcnlNb2RlbC50b0pTT04oKSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgbGlzdGVuVG8ocXVlcnlNb2RlbCwgJ2NoYW5nZScsIGNhbGxiYWNrKVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN0b3BMaXN0ZW5pbmcocXVlcnlNb2RlbCwgJ2NoYW5nZScsIGNhbGxiYWNrKVxuICAgIH1cbiAgfSwgW29uLCBxdWVyeU1vZGVsLCBkYXRhXSlcbiAgcmV0dXJuIG51bGxcbn1cblxuY29uc3QgU2F2ZWRTZWFyY2hNb2RlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBkYXRhOiBmYWxzZSBhcyBTYXZlZFNlYXJjaFBhZ2VNb2RlLFxuICBzZWFyY2hQYWdlTW9kZTogJ2FkaG9jJyBhcyBTZWFyY2hQYWdlTW9kZSxcbiAgaXNTYXZpbmc6IGZhbHNlIGFzIGJvb2xlYW4sXG4gIHNlbGVjdGlvbkludGVyZmFjZToge30gYXMgYW55LFxufSlcblxuY29uc3QgZGVjb2RlVXJsSWZWYWxpZCA9IChzZWFyY2g6IHN0cmluZykgPT4ge1xuICBpZiAobG9jYXRpb24pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSBxdWVyeVN0cmluZy5wYXJzZShzZWFyY2gpXG4gICAgICBjb25zdCBkZWZhdWx0UXVlcnlTdHJpbmcgPSAocXVlcnlQYXJhbXNbJ2RlZmF1bHRRdWVyeSddIHx8ICcnKS50b1N0cmluZygpXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoZGVmYXVsdFF1ZXJ5U3RyaW5nKSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7fVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge31cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lUGFnZSgpIHtcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpXG4gIGNvbnN0IFtxdWVyeU1vZGVsXSA9IHVzZVVzZXJRdWVyeSh7XG4gICAgYXR0cmlidXRlczogZGVjb2RlVXJsSWZWYWxpZChsb2NhdGlvbi5zZWFyY2gpLFxuICB9KVxuICBjb25zdCB7IGlkIH0gPSB1c2VQYXJhbXM8eyBpZD86IHN0cmluZyB9PigpXG4gIGNvbnN0IHNlYXJjaFBhZ2VNb2RlID0gdXNlU2VhcmNoUGFnZU1vZGUoeyBpZCB9KVxuICBjb25zdCBkYXRhID0gdXNlU2F2ZWRTZWFyY2hQYWdlTW9kZSh7IGlkIH0pXG4gIGNvbnN0IHNhdmVTZWFyY2hUYXNrID0gdXNlU2F2ZVNlYXJjaFRhc2tCYXNlZE9uUGFyYW1zKClcbiAgY29uc3QgaXNTYXZpbmcgPSBzYXZlU2VhcmNoVGFzayAhPT0gbnVsbFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCB1cmxCYXNlZFF1ZXJ5ID0gbG9jYXRpb24uc2VhcmNoLnNwbGl0KCc/ZGVmYXVsdFF1ZXJ5PScpWzFdXG4gICAgaWYgKHVybEJhc2VkUXVlcnkpIHtcbiAgICAgIHNlbGVjdGlvbkludGVyZmFjZS5nZXRDdXJyZW50UXVlcnkoKS5yZWZldGNoT3JTdGFydFNlYXJjaEZyb21GaXJzdFBhZ2UoKVxuICAgIH1cbiAgfSwgW10pXG4gIGNvbnN0IFtzZWxlY3Rpb25JbnRlcmZhY2VdID0gUmVhY3QudXNlU3RhdGUoXG4gICAgbmV3IFNlbGVjdGlvbkludGVyZmFjZU1vZGVsKHtcbiAgICAgIGN1cnJlbnRRdWVyeTogcXVlcnlNb2RlbCxcbiAgICB9KVxuICApXG4gIHVzZUtlZXBTZWFyY2hJblVybCh7XG4gICAgcXVlcnlNb2RlbDogc2VsZWN0aW9uSW50ZXJmYWNlLmdldEN1cnJlbnRRdWVyeSgpLFxuICAgIG9uOiBzZWFyY2hQYWdlTW9kZSA9PT0gJ2FkaG9jJyxcbiAgfSlcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdib29sZWFuJykge1xuICAgICAgc2VsZWN0aW9uSW50ZXJmYWNlLmdldEN1cnJlbnRRdWVyeSgpLnNldChkYXRhLnBsYWluLm1ldGFjYXJkLnByb3BlcnRpZXMpXG4gICAgfVxuICB9LCBbZGF0YV0pXG4gIHVzZVVwZGF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHNlYXJjaFBhZ2VNb2RlID09PSAnYWRob2MnKSB7XG4gICAgICBzZWxlY3Rpb25JbnRlcmZhY2UuZ2V0Q3VycmVudFF1ZXJ5KCkudW5zZXQoJ2lkJylcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2ggPT09ICcnKSB7XG4gICAgICAgIHNlbGVjdGlvbkludGVyZmFjZS5nZXRDdXJyZW50UXVlcnkoKS5yZXNldFRvRGVmYXVsdHMoKVxuICAgICAgfVxuICAgIH1cbiAgfSwgW3NlYXJjaFBhZ2VNb2RlLCBsb2NhdGlvbi5zZWFyY2hdKVxuICBjb25zdCB7IHNldEVsZW1lbnQgfSA9IHVzZUxpc3RlblRvRW50ZXJLZXlTdWJtaXRFdmVudCh7XG4gICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgIDsoc2VsZWN0aW9uSW50ZXJmYWNlLmdldEN1cnJlbnRRdWVyeSgpIGFzIGFueSkuc3RhcnRTZWFyY2hGcm9tRmlyc3RQYWdlKClcbiAgICB9LFxuICB9KVxuICByZXR1cm4gKFxuICAgIDxTYXZlZFNlYXJjaE1vZGVDb250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17e1xuICAgICAgICBkYXRhLFxuICAgICAgICBzZWFyY2hQYWdlTW9kZSxcbiAgICAgICAgaXNTYXZpbmcsXG4gICAgICAgIHNlbGVjdGlvbkludGVyZmFjZSxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPE1lbW8gZGVwZW5kZW5jaWVzPXtbc2VsZWN0aW9uSW50ZXJmYWNlXX0+XG4gICAgICAgIDxBdXRvU2F2ZSAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGxcIj5cbiAgICAgICAgICA8U3BsaXRQYW5lXG4gICAgICAgICAgICB2YXJpYW50PVwiaG9yaXpvbnRhbFwiXG4gICAgICAgICAgICBjb2xsYXBzZWRMZW5ndGg9ezgwfVxuICAgICAgICAgICAgLy8gc3RhcnRpbmdMZW5ndGg9ezQwfSAvLyBnb29kIGZvciByYXBpZGx5IHRlc3RpbmcgY29sbGFwc2VkIG1vZGUgaW4gZGV2IHNlcnZlclxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaC1mdWxsIHctZnVsbCBweS0yXCI+XG4gICAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICAgIGVsZXZhdGlvbj17RWxldmF0aW9ucy5wYW5lbHN9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaC1mdWxsIG92ZXJmbG93LWhpZGRlbiB3LWZ1bGxcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBmbGV4LW5vd3JhcCB3LWZ1bGwgaC1mdWxsXCJcbiAgICAgICAgICAgICAgICAgIHJlZj17c2V0RWxlbWVudH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8TGVmdFRvcCAvPlxuXG4gICAgICAgICAgICAgICAgICA8TGVmdE1pZGRsZSAvPlxuICAgICAgICAgICAgICAgICAgPERhcmtEaXZpZGVyIGNsYXNzTmFtZT1cImgtbWluIHctZnVsbFwiIC8+XG4gICAgICAgICAgICAgICAgICA8TGVmdEJvdHRvbSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGxcIj5cbiAgICAgICAgICAgICAgPEdvbGRlbkxheW91dCBzZWxlY3Rpb25JbnRlcmZhY2U9e3NlbGVjdGlvbkludGVyZmFjZX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvU3BsaXRQYW5lPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvTWVtbz5cbiAgICA8L1NhdmVkU2VhcmNoTW9kZUNvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cbiJdfQ==