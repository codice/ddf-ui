import { __read } from "tslib";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import React from 'react';
import { useListenTo } from '../selection-checkbox/useBackbone.hook';
import LinearProgress from '@mui/material/LinearProgress';
import Button from '@mui/material/Button';
import { useHistory } from 'react-router-dom';
export var UploadSummaryViewReact = function (_a) {
    var model = _a.model;
    var history = useHistory();
    var _b = __read(React.useState(model.toJSON()), 2), modelJson = _b[0], setModelJson = _b[1];
    useListenTo(model, 'change:amount change:errors change:complete change:percentage change:sending change:issues', function () {
        setModelJson(model.toJSON());
    });
    var amount = modelJson.amount, complete = modelJson.complete, percentage = modelJson.percentage, success = modelJson.success, sending = modelJson.sending, error = modelJson.error, issues = modelJson.issues, interrupted = modelJson.interrupted, finished = modelJson.finished;
    var isSending = sending;
    var hasError = error;
    var hasSuccess = success;
    var hasIssues = issues > 0;
    var wasInterrupted = interrupted;
    return (React.createElement(Button, { className: "".concat(isSending ? 'show-progress' : '', " ").concat(hasError ? 'has-error' : '', " ").concat(hasSuccess ? 'has-success' : '', " ").concat(hasIssues ? 'has-issues' : '', " ").concat(wasInterrupted ? 'was-interrupted' : ''), fullWidth: true, onClick: function () {
            history.push({
                pathname: "/uploads/".concat(model.id),
            });
        } },
        React.createElement("div", { className: "upload-summary is-medium-font" },
            React.createElement("div", { className: "summary-info flex flex-col justify-start items-center" },
                React.createElement("div", { className: "info-files" },
                    React.createElement("span", { className: "files-issues fa fa-exclamation-triangle mr-2" }),
                    React.createElement("span", { className: "files-text" }, "".concat(complete + ' / ' + amount + ' Completed'))),
                !finished && !wasInterrupted ? (React.createElement(React.Fragment, null,
                    React.createElement("div", { className: "info-percentage" }, Math.floor(percentage) + '%'),
                    React.createElement(LinearProgress, { className: "w-full h-2", variant: "determinate", value: percentage }))) : (React.createElement(React.Fragment, null))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLXN1bW1hcnkudmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvdXBsb2FkLXN1bW1hcnkvdXBsb2FkLXN1bW1hcnkudmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7QUFDSixPQUFPLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDekIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBQ3BFLE9BQU8sY0FBYyxNQUFNLDhCQUE4QixDQUFBO0FBQ3pELE9BQU8sTUFBTSxNQUFNLHNCQUFzQixDQUFBO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUk3QyxNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBRyxVQUFDLEVBRVY7UUFEM0IsS0FBSyxXQUFBO0lBRUwsSUFBTSxPQUFPLEdBQUcsVUFBVSxFQUFFLENBQUE7SUFDdEIsSUFBQSxLQUFBLE9BQTRCLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUEsRUFBekQsU0FBUyxRQUFBLEVBQUUsWUFBWSxRQUFrQyxDQUFBO0lBQ2hFLFdBQVcsQ0FDVCxLQUFLLEVBQ0wsNEZBQTRGLEVBQzVGO1FBQ0UsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzlCLENBQUMsQ0FDRixDQUFBO0lBRUMsSUFBQSxNQUFNLEdBU0osU0FBUyxPQVRMLEVBQ04sUUFBUSxHQVFOLFNBQVMsU0FSSCxFQUNSLFVBQVUsR0FPUixTQUFTLFdBUEQsRUFDVixPQUFPLEdBTUwsU0FBUyxRQU5KLEVBQ1AsT0FBTyxHQUtMLFNBQVMsUUFMSixFQUNQLEtBQUssR0FJSCxTQUFTLE1BSk4sRUFDTCxNQUFNLEdBR0osU0FBUyxPQUhMLEVBQ04sV0FBVyxHQUVULFNBQVMsWUFGQSxFQUNYLFFBQVEsR0FDTixTQUFTLFNBREgsQ0FDRztJQUNiLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQTtJQUN6QixJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUE7SUFDdEIsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFBO0lBQzFCLElBQU0sU0FBUyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUE7SUFDNUIsSUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFBO0lBQ2xDLE9BQU8sQ0FDTCxvQkFBQyxNQUFNLElBQ0wsU0FBUyxFQUFFLFVBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FDNUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FDekIsVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUNsRSxjQUFjLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ3ZDLEVBQ0YsU0FBUyxRQUNULE9BQU8sRUFBRTtZQUNQLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsUUFBUSxFQUFFLG1CQUFZLEtBQUssQ0FBQyxFQUFFLENBQUU7YUFDakMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUVELDZCQUFLLFNBQVMsRUFBQywrQkFBK0I7WUFDNUMsNkJBQUssU0FBUyxFQUFDLHVEQUF1RDtnQkFDcEUsNkJBQUssU0FBUyxFQUFDLFlBQVk7b0JBQ3pCLDhCQUFNLFNBQVMsRUFBQyw4Q0FBOEMsR0FBUTtvQkFDdEUsOEJBQU0sU0FBUyxFQUFDLFlBQVksSUFBRSxVQUM1QixRQUFRLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxZQUFZLENBQ3hDLENBQVEsQ0FDTjtnQkFDTCxDQUFDLFFBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FDOUI7b0JBQ0UsNkJBQUssU0FBUyxFQUFDLGlCQUFpQixJQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FDekI7b0JBQ04sb0JBQUMsY0FBYyxJQUNiLFNBQVMsRUFBQyxZQUFZLEVBQ3RCLE9BQU8sRUFBQyxhQUFhLEVBQ3JCLEtBQUssRUFBRSxVQUFVLEdBQ2pCLENBQ0QsQ0FDSixDQUFDLENBQUMsQ0FBQyxDQUNGLHlDQUFLLENBQ04sQ0FDRyxDQUNGLENBQ0MsQ0FDVixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIENvZGljZSBGb3VuZGF0aW9uXG4gKlxuICogVGhpcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXRcbiAqIGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gQSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGlzIGRpc3RyaWJ1dGVkIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtIGFuZCBjYW4gYmUgZm91bmQgYXRcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvbGdwbC5odG1sPi5cbiAqXG4gKiovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VMaXN0ZW5UbyB9IGZyb20gJy4uL3NlbGVjdGlvbi1jaGVja2JveC91c2VCYWNrYm9uZS5ob29rJ1xuaW1wb3J0IExpbmVhclByb2dyZXNzIGZyb20gJ0BtdWkvbWF0ZXJpYWwvTGluZWFyUHJvZ3Jlc3MnXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJ1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG50eXBlIFVwbG9hZFN1bW1hcnlWaWV3UmVhY3RUeXBlID0ge1xuICBtb2RlbDogYW55XG59XG5leHBvcnQgY29uc3QgVXBsb2FkU3VtbWFyeVZpZXdSZWFjdCA9ICh7XG4gIG1vZGVsLFxufTogVXBsb2FkU3VtbWFyeVZpZXdSZWFjdFR5cGUpID0+IHtcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKVxuICBjb25zdCBbbW9kZWxKc29uLCBzZXRNb2RlbEpzb25dID0gUmVhY3QudXNlU3RhdGUobW9kZWwudG9KU09OKCkpXG4gIHVzZUxpc3RlblRvKFxuICAgIG1vZGVsLFxuICAgICdjaGFuZ2U6YW1vdW50IGNoYW5nZTplcnJvcnMgY2hhbmdlOmNvbXBsZXRlIGNoYW5nZTpwZXJjZW50YWdlIGNoYW5nZTpzZW5kaW5nIGNoYW5nZTppc3N1ZXMnLFxuICAgICgpID0+IHtcbiAgICAgIHNldE1vZGVsSnNvbihtb2RlbC50b0pTT04oKSlcbiAgICB9XG4gIClcbiAgY29uc3Qge1xuICAgIGFtb3VudCxcbiAgICBjb21wbGV0ZSxcbiAgICBwZXJjZW50YWdlLFxuICAgIHN1Y2Nlc3MsXG4gICAgc2VuZGluZyxcbiAgICBlcnJvcixcbiAgICBpc3N1ZXMsXG4gICAgaW50ZXJydXB0ZWQsXG4gICAgZmluaXNoZWQsXG4gIH0gPSBtb2RlbEpzb25cbiAgY29uc3QgaXNTZW5kaW5nID0gc2VuZGluZ1xuICBjb25zdCBoYXNFcnJvciA9IGVycm9yXG4gIGNvbnN0IGhhc1N1Y2Nlc3MgPSBzdWNjZXNzXG4gIGNvbnN0IGhhc0lzc3VlcyA9IGlzc3VlcyA+IDBcbiAgY29uc3Qgd2FzSW50ZXJydXB0ZWQgPSBpbnRlcnJ1cHRlZFxuICByZXR1cm4gKFxuICAgIDxCdXR0b25cbiAgICAgIGNsYXNzTmFtZT17YCR7aXNTZW5kaW5nID8gJ3Nob3ctcHJvZ3Jlc3MnIDogJyd9ICR7XG4gICAgICAgIGhhc0Vycm9yID8gJ2hhcy1lcnJvcicgOiAnJ1xuICAgICAgfSAke2hhc1N1Y2Nlc3MgPyAnaGFzLXN1Y2Nlc3MnIDogJyd9ICR7aGFzSXNzdWVzID8gJ2hhcy1pc3N1ZXMnIDogJyd9ICR7XG4gICAgICAgIHdhc0ludGVycnVwdGVkID8gJ3dhcy1pbnRlcnJ1cHRlZCcgOiAnJ1xuICAgICAgfWB9XG4gICAgICBmdWxsV2lkdGhcbiAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICBwYXRobmFtZTogYC91cGxvYWRzLyR7bW9kZWwuaWR9YCxcbiAgICAgICAgfSlcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cGxvYWQtc3VtbWFyeSBpcy1tZWRpdW0tZm9udFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN1bW1hcnktaW5mbyBmbGV4IGZsZXgtY29sIGp1c3RpZnktc3RhcnQgaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvLWZpbGVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmaWxlcy1pc3N1ZXMgZmEgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUgbXItMlwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZpbGVzLXRleHRcIj57YCR7XG4gICAgICAgICAgICAgIGNvbXBsZXRlICsgJyAvICcgKyBhbW91bnQgKyAnIENvbXBsZXRlZCdcbiAgICAgICAgICAgIH1gfTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7IWZpbmlzaGVkICYmICF3YXNJbnRlcnJ1cHRlZCA/IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mby1wZXJjZW50YWdlXCI+XG4gICAgICAgICAgICAgICAge01hdGguZmxvb3IocGVyY2VudGFnZSkgKyAnJSd9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8TGluZWFyUHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC0yXCJcbiAgICAgICAgICAgICAgICB2YXJpYW50PVwiZGV0ZXJtaW5hdGVcIlxuICAgICAgICAgICAgICAgIHZhbHVlPXtwZXJjZW50YWdlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDw+PC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L0J1dHRvbj5cbiAgKVxufVxuIl19