import { __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import React from 'react';
import { useListenTo } from '../selection-checkbox/useBackbone.hook';
import LinearProgress from '@mui/material/LinearProgress';
import Button from '@mui/material/Button';
import { useNavigate } from 'react-router-dom';
export var UploadSummaryViewReact = function (_a) {
    var model = _a.model;
    var navigate = useNavigate();
    var _b = __read(React.useState(model.toJSON()), 2), modelJson = _b[0], setModelJson = _b[1];
    useListenTo(model, 'change:amount change:errors change:complete change:percentage change:sending change:issues', function () {
        setModelJson(model.toJSON());
    });
    var amount = modelJson.amount, complete = modelJson.complete, percentage = modelJson.percentage, success = modelJson.success, sending = modelJson.sending, error = modelJson.error, issues = modelJson.issues, interrupted = modelJson.interrupted, finished = modelJson.finished;
    var isSending = sending;
    var hasError = error;
    var hasSuccess = success;
    var hasIssues = issues > 0;
    var wasInterrupted = interrupted;
    return (_jsx(Button, { className: "".concat(isSending ? 'show-progress' : '', " ").concat(hasError ? 'has-error' : '', " ").concat(hasSuccess ? 'has-success' : '', " ").concat(hasIssues ? 'has-issues' : '', " ").concat(wasInterrupted ? 'was-interrupted' : ''), fullWidth: true, onClick: function () {
            navigate("/uploads/".concat(model.id));
        }, children: _jsx("div", { className: "upload-summary is-medium-font", children: _jsxs("div", { className: "summary-info flex flex-col justify-start items-center", children: [_jsxs("div", { className: "info-files", children: [_jsx("span", { className: "files-issues fa fa-exclamation-triangle mr-2" }), _jsx("span", { className: "files-text", children: "".concat(complete + ' / ' + amount + ' Completed') })] }), !finished && !wasInterrupted ? (_jsxs(_Fragment, { children: [_jsx("div", { className: "info-percentage", children: Math.floor(percentage) + '%' }), _jsx(LinearProgress, { className: "w-full h-2", variant: "determinate", value: percentage })] })) : (_jsx(_Fragment, {}))] }) }) }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLXN1bW1hcnkudmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvdXBsb2FkLXN1bW1hcnkvdXBsb2FkLXN1bW1hcnkudmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQ3pCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQTtBQUNwRSxPQUFPLGNBQWMsTUFBTSw4QkFBOEIsQ0FBQTtBQUN6RCxPQUFPLE1BQU0sTUFBTSxzQkFBc0IsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFJOUMsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQUcsVUFBQyxFQUVWO1FBRDNCLEtBQUssV0FBQTtJQUVMLElBQU0sUUFBUSxHQUFHLFdBQVcsRUFBRSxDQUFBO0lBQ3hCLElBQUEsS0FBQSxPQUE0QixLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFBLEVBQXpELFNBQVMsUUFBQSxFQUFFLFlBQVksUUFBa0MsQ0FBQTtJQUNoRSxXQUFXLENBQ1QsS0FBSyxFQUNMLDRGQUE0RixFQUM1RjtRQUNFLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUM5QixDQUFDLENBQ0YsQ0FBQTtJQUVDLElBQUEsTUFBTSxHQVNKLFNBQVMsT0FUTCxFQUNOLFFBQVEsR0FRTixTQUFTLFNBUkgsRUFDUixVQUFVLEdBT1IsU0FBUyxXQVBELEVBQ1YsT0FBTyxHQU1MLFNBQVMsUUFOSixFQUNQLE9BQU8sR0FLTCxTQUFTLFFBTEosRUFDUCxLQUFLLEdBSUgsU0FBUyxNQUpOLEVBQ0wsTUFBTSxHQUdKLFNBQVMsT0FITCxFQUNOLFdBQVcsR0FFVCxTQUFTLFlBRkEsRUFDWCxRQUFRLEdBQ04sU0FBUyxTQURILENBQ0c7SUFDYixJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUE7SUFDekIsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLElBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQTtJQUMxQixJQUFNLFNBQVMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFBO0lBQzVCLElBQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQTtJQUNsQyxPQUFPLENBQ0wsS0FBQyxNQUFNLElBQ0wsU0FBUyxFQUFFLFVBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FDNUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FDekIsVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUNsRSxjQUFjLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ3ZDLEVBQ0YsU0FBUyxRQUNULE9BQU8sRUFBRTtZQUNQLFFBQVEsQ0FBQyxtQkFBWSxLQUFLLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQTtRQUNsQyxDQUFDLFlBRUQsY0FBSyxTQUFTLEVBQUMsK0JBQStCLFlBQzVDLGVBQUssU0FBUyxFQUFDLHVEQUF1RCxhQUNwRSxlQUFLLFNBQVMsRUFBQyxZQUFZLGFBQ3pCLGVBQU0sU0FBUyxFQUFDLDhDQUE4QyxHQUFRLEVBQ3RFLGVBQU0sU0FBUyxFQUFDLFlBQVksWUFBRSxVQUM1QixRQUFRLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxZQUFZLENBQ3hDLEdBQVEsSUFDTixFQUNMLENBQUMsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUM5Qiw4QkFDRSxjQUFLLFNBQVMsRUFBQyxpQkFBaUIsWUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLEdBQ3pCLEVBQ04sS0FBQyxjQUFjLElBQ2IsU0FBUyxFQUFDLFlBQVksRUFDdEIsT0FBTyxFQUFDLGFBQWEsRUFDckIsS0FBSyxFQUFFLFVBQVUsR0FDakIsSUFDRCxDQUNKLENBQUMsQ0FBQyxDQUFDLENBQ0YsbUJBQUssQ0FDTixJQUNHLEdBQ0YsR0FDQyxDQUNWLENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZUxpc3RlblRvIH0gZnJvbSAnLi4vc2VsZWN0aW9uLWNoZWNrYm94L3VzZUJhY2tib25lLmhvb2snXG5pbXBvcnQgTGluZWFyUHJvZ3Jlc3MgZnJvbSAnQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcydcbmltcG9ydCBCdXR0b24gZnJvbSAnQG11aS9tYXRlcmlhbC9CdXR0b24nXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG50eXBlIFVwbG9hZFN1bW1hcnlWaWV3UmVhY3RUeXBlID0ge1xuICBtb2RlbDogYW55XG59XG5leHBvcnQgY29uc3QgVXBsb2FkU3VtbWFyeVZpZXdSZWFjdCA9ICh7XG4gIG1vZGVsLFxufTogVXBsb2FkU3VtbWFyeVZpZXdSZWFjdFR5cGUpID0+IHtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG4gIGNvbnN0IFttb2RlbEpzb24sIHNldE1vZGVsSnNvbl0gPSBSZWFjdC51c2VTdGF0ZShtb2RlbC50b0pTT04oKSlcbiAgdXNlTGlzdGVuVG8oXG4gICAgbW9kZWwsXG4gICAgJ2NoYW5nZTphbW91bnQgY2hhbmdlOmVycm9ycyBjaGFuZ2U6Y29tcGxldGUgY2hhbmdlOnBlcmNlbnRhZ2UgY2hhbmdlOnNlbmRpbmcgY2hhbmdlOmlzc3VlcycsXG4gICAgKCkgPT4ge1xuICAgICAgc2V0TW9kZWxKc29uKG1vZGVsLnRvSlNPTigpKVxuICAgIH1cbiAgKVxuICBjb25zdCB7XG4gICAgYW1vdW50LFxuICAgIGNvbXBsZXRlLFxuICAgIHBlcmNlbnRhZ2UsXG4gICAgc3VjY2VzcyxcbiAgICBzZW5kaW5nLFxuICAgIGVycm9yLFxuICAgIGlzc3VlcyxcbiAgICBpbnRlcnJ1cHRlZCxcbiAgICBmaW5pc2hlZCxcbiAgfSA9IG1vZGVsSnNvblxuICBjb25zdCBpc1NlbmRpbmcgPSBzZW5kaW5nXG4gIGNvbnN0IGhhc0Vycm9yID0gZXJyb3JcbiAgY29uc3QgaGFzU3VjY2VzcyA9IHN1Y2Nlc3NcbiAgY29uc3QgaGFzSXNzdWVzID0gaXNzdWVzID4gMFxuICBjb25zdCB3YXNJbnRlcnJ1cHRlZCA9IGludGVycnVwdGVkXG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgY2xhc3NOYW1lPXtgJHtpc1NlbmRpbmcgPyAnc2hvdy1wcm9ncmVzcycgOiAnJ30gJHtcbiAgICAgICAgaGFzRXJyb3IgPyAnaGFzLWVycm9yJyA6ICcnXG4gICAgICB9ICR7aGFzU3VjY2VzcyA/ICdoYXMtc3VjY2VzcycgOiAnJ30gJHtoYXNJc3N1ZXMgPyAnaGFzLWlzc3VlcycgOiAnJ30gJHtcbiAgICAgICAgd2FzSW50ZXJydXB0ZWQgPyAnd2FzLWludGVycnVwdGVkJyA6ICcnXG4gICAgICB9YH1cbiAgICAgIGZ1bGxXaWR0aFxuICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBuYXZpZ2F0ZShgL3VwbG9hZHMvJHttb2RlbC5pZH1gKVxuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwbG9hZC1zdW1tYXJ5IGlzLW1lZGl1bS1mb250XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3VtbWFyeS1pbmZvIGZsZXggZmxleC1jb2wganVzdGlmeS1zdGFydCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm8tZmlsZXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZpbGVzLWlzc3VlcyBmYSBmYS1leGNsYW1hdGlvbi10cmlhbmdsZSBtci0yXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmlsZXMtdGV4dFwiPntgJHtcbiAgICAgICAgICAgICAgY29tcGxldGUgKyAnIC8gJyArIGFtb3VudCArICcgQ29tcGxldGVkJ1xuICAgICAgICAgICAgfWB9PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHshZmluaXNoZWQgJiYgIXdhc0ludGVycnVwdGVkID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvLXBlcmNlbnRhZ2VcIj5cbiAgICAgICAgICAgICAgICB7TWF0aC5mbG9vcihwZXJjZW50YWdlKSArICclJ31cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxMaW5lYXJQcm9ncmVzc1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBoLTJcIlxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJkZXRlcm1pbmF0ZVwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e3BlcmNlbnRhZ2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPD48Lz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvQnV0dG9uPlxuICApXG59XG4iXX0=