import { __read } from "tslib";
import moment from 'moment-timezone';
import { useState } from 'react';
var withinTimeScale = function (newValues, timescale) {
    var domain = timescale.domain().map(function (value) { return moment(value); });
    if (newValues.length === 0) {
        return true;
    }
    else if (newValues.length === 1) {
        return domain[0] < newValues[0] && newValues[0] < domain[1];
    }
    else if (newValues.length === 2) {
        return domain[0] < newValues[0] && newValues[1] < domain[1];
    }
    else {
        console.debug('selectionRange can have a maximum of two elements.');
        return false;
    }
};
export var useSelectionRange = function (defaultValues, timescale) {
    var _a = __read(useState(defaultValues), 2), values = _a[0], setValues = _a[1];
    var setSelectionRange = function (newValues) {
        if (withinTimeScale(newValues, timescale)) {
            setValues(newValues);
        }
    };
    return [values, setSelectionRange];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50L3RpbWVsaW5lL2hvb2tzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxNQUFrQixNQUFNLGlCQUFpQixDQUFBO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFHaEMsSUFBTSxlQUFlLEdBQUcsVUFBQyxTQUFtQixFQUFFLFNBQW9CO0lBQ2hFLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUE7SUFFL0QsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQTtLQUNaO1NBQU0sSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNqQyxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM1RDtTQUFNLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDakMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDNUQ7U0FBTTtRQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELENBQUMsQ0FBQTtRQUNuRSxPQUFPLEtBQUssQ0FBQTtLQUNiO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBQUcsVUFDL0IsYUFBdUIsRUFDdkIsU0FBb0I7SUFFZCxJQUFBLEtBQUEsT0FBc0IsUUFBUSxDQUFXLGFBQWEsQ0FBQyxJQUFBLEVBQXRELE1BQU0sUUFBQSxFQUFFLFNBQVMsUUFBcUMsQ0FBQTtJQUM3RCxJQUFNLGlCQUFpQixHQUFHLFVBQUMsU0FBbUI7UUFDNUMsSUFBSSxlQUFlLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQ3pDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtTQUNyQjtJQUNILENBQUMsQ0FBQTtJQUVELE9BQU8sQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtBQUNwQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9tZW50LCB7IE1vbWVudCB9IGZyb20gJ21vbWVudC10aW1lem9uZSdcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBUaW1lc2NhbGUgfSBmcm9tICcuL3R5cGVzJ1xuXG5jb25zdCB3aXRoaW5UaW1lU2NhbGUgPSAobmV3VmFsdWVzOiBNb21lbnRbXSwgdGltZXNjYWxlOiBUaW1lc2NhbGUpID0+IHtcbiAgY29uc3QgZG9tYWluID0gdGltZXNjYWxlLmRvbWFpbigpLm1hcCgodmFsdWUpID0+IG1vbWVudCh2YWx1ZSkpXG5cbiAgaWYgKG5ld1ZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9IGVsc2UgaWYgKG5ld1ZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZG9tYWluWzBdIDwgbmV3VmFsdWVzWzBdICYmIG5ld1ZhbHVlc1swXSA8IGRvbWFpblsxXVxuICB9IGVsc2UgaWYgKG5ld1ZhbHVlcy5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gZG9tYWluWzBdIDwgbmV3VmFsdWVzWzBdICYmIG5ld1ZhbHVlc1sxXSA8IGRvbWFpblsxXVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZGVidWcoJ3NlbGVjdGlvblJhbmdlIGNhbiBoYXZlIGEgbWF4aW11bSBvZiB0d28gZWxlbWVudHMuJylcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXNlU2VsZWN0aW9uUmFuZ2UgPSAoXG4gIGRlZmF1bHRWYWx1ZXM6IE1vbWVudFtdLFxuICB0aW1lc2NhbGU6IFRpbWVzY2FsZVxuKTogW01vbWVudFtdLCAobmV3VmFsdWU6IE1vbWVudFtdKSA9PiB2b2lkXSA9PiB7XG4gIGNvbnN0IFt2YWx1ZXMsIHNldFZhbHVlc10gPSB1c2VTdGF0ZTxNb21lbnRbXT4oZGVmYXVsdFZhbHVlcylcbiAgY29uc3Qgc2V0U2VsZWN0aW9uUmFuZ2UgPSAobmV3VmFsdWVzOiBNb21lbnRbXSkgPT4ge1xuICAgIGlmICh3aXRoaW5UaW1lU2NhbGUobmV3VmFsdWVzLCB0aW1lc2NhbGUpKSB7XG4gICAgICBzZXRWYWx1ZXMobmV3VmFsdWVzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbdmFsdWVzLCBzZXRTZWxlY3Rpb25SYW5nZV1cbn1cbiJdfQ==