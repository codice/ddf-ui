import { __read } from "tslib";
import * as React from 'react';
import { useQuery } from '../../js/model/TypedQuery';
import { FilterBuilderClass, FilterClass, } from '../filter-builder/filter.structure';
import SelectionInterfaceModel from '../selection-interface/selection-interface.model';
import { useResultsAndStatus } from '../../js/model/LazyQueryResult/hooks';
import { useLazyResultsFromSelectionInterface } from '../selection-interface/hooks';
import { debounce } from 'lodash';
var createFilterTree = function (searchText, archived) {
    var baseFilters = [
        new FilterClass({
            property: 'title',
            value: "*".concat(searchText, "*"),
            type: 'ILIKE',
        }),
        new FilterClass({
            property: archived ? 'metacard.deleted.tags' : 'metacard-tags',
            value: 'query',
            type: 'ILIKE',
        }),
    ];
    if (archived) {
        baseFilters.push(new FilterClass({
            property: 'metacard-tags',
            value: '*',
            type: 'ILIKE',
        }));
    }
    return new FilterBuilderClass({
        type: 'AND',
        filters: baseFilters,
    });
};
var useDebounceSearch = function (selectionInterface, searchText, archived, setHasSearched) {
    var debouncedSearch = React.useCallback(debounce(function (query) {
        query.startSearchFromFirstPage();
        setHasSearched(true);
    }, 500), [setHasSearched]);
    React.useEffect(function () {
        var currentQuery = selectionInterface.getCurrentQuery();
        currentQuery.set('filterTree', createFilterTree(searchText, archived));
        currentQuery.cancelCurrentSearches();
        debouncedSearch(currentQuery);
        return function () {
            debouncedSearch.cancel();
        };
    }, [
        searchText,
        archived,
        selectionInterface,
        setHasSearched,
        debouncedSearch,
    ]);
};
export var useSearchResults = function (_a) {
    var searchText = _a.searchText, _b = _a.archived, archived = _b === void 0 ? false : _b;
    var _c = __read(React.useState(false), 2), hasSearched = _c[0], setHasSearched = _c[1];
    var _d = __read(useQuery({
        attributes: {
            sorts: [{ attribute: 'metacard.modified', direction: 'descending' }],
            filterTree: createFilterTree(searchText, archived),
        },
    }), 1), queryModel = _d[0];
    var selectionInterface = React.useMemo(function () { return new SelectionInterfaceModel({ currentQuery: queryModel }); }, [queryModel]);
    useDebounceSearch(selectionInterface, searchText, archived, setHasSearched);
    var lazyResults = useLazyResultsFromSelectionInterface({
        selectionInterface: selectionInterface,
    });
    var _e = useResultsAndStatus({ lazyResults: lazyResults }), status = _e.status, results = _e.results;
    return {
        lazyResults: results,
        loading: hasSearched ? status.isSearching : true,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlU2VhcmNoUmVzdWx0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvaG9va3MvdXNlU2VhcmNoUmVzdWx0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBRTlCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUNwRCxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLFdBQVcsR0FDWixNQUFNLG9DQUFvQyxDQUFBO0FBQzNDLE9BQU8sdUJBQXVCLE1BQU0sa0RBQWtELENBQUE7QUFDdEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUE7QUFDMUUsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFDbkYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQVlqQyxJQUFNLGdCQUFnQixHQUFHLFVBQ3ZCLFVBQWtCLEVBQ2xCLFFBQWlCO0lBRWpCLElBQU0sV0FBVyxHQUFHO1FBQ2xCLElBQUksV0FBVyxDQUFDO1lBQ2QsUUFBUSxFQUFFLE9BQU87WUFDakIsS0FBSyxFQUFFLFdBQUksVUFBVSxNQUFHO1lBQ3hCLElBQUksRUFBRSxPQUFPO1NBQ2QsQ0FBQztRQUNGLElBQUksV0FBVyxDQUFDO1lBQ2QsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLGVBQWU7WUFDOUQsS0FBSyxFQUFFLE9BQU87WUFDZCxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7S0FDSCxDQUFBO0lBRUQsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNiLFdBQVcsQ0FBQyxJQUFJLENBQ2QsSUFBSSxXQUFXLENBQUM7WUFDZCxRQUFRLEVBQUUsZUFBZTtZQUN6QixLQUFLLEVBQUUsR0FBRztZQUNWLElBQUksRUFBRSxPQUFPO1NBQ2QsQ0FBQyxDQUNILENBQUE7SUFDSCxDQUFDO0lBRUQsT0FBTyxJQUFJLGtCQUFrQixDQUFDO1FBQzVCLElBQUksRUFBRSxLQUFLO1FBQ1gsT0FBTyxFQUFFLFdBQVc7S0FDckIsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBRUQsSUFBTSxpQkFBaUIsR0FBRyxVQUN4QixrQkFBa0QsRUFDbEQsVUFBa0IsRUFDbEIsUUFBaUIsRUFDakIsY0FBNkQ7SUFFN0QsSUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FDdkMsUUFBUSxDQUFDLFVBQUMsS0FBSztRQUNiLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxDQUFBO1FBQ2hDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN0QixDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQ1AsQ0FBQyxjQUFjLENBQUMsQ0FDakIsQ0FBQTtJQUVELEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDZCxJQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUN6RCxZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUN0RSxZQUFZLENBQUMscUJBQXFCLEVBQUUsQ0FBQTtRQUNwQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUE7UUFFN0IsT0FBTztZQUNMLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUMxQixDQUFDLENBQUE7SUFDSCxDQUFDLEVBQUU7UUFDRCxVQUFVO1FBQ1YsUUFBUTtRQUNSLGtCQUFrQjtRQUNsQixjQUFjO1FBQ2QsZUFBZTtLQUNoQixDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FBRyxVQUFDLEVBR1Q7UUFGdEIsVUFBVSxnQkFBQSxFQUNWLGdCQUFnQixFQUFoQixRQUFRLG1CQUFHLEtBQUssS0FBQTtJQUVWLElBQUEsS0FBQSxPQUFnQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFBLEVBQXBELFdBQVcsUUFBQSxFQUFFLGNBQWMsUUFBeUIsQ0FBQTtJQUNyRCxJQUFBLEtBQUEsT0FBZSxRQUFRLENBQUM7UUFDNUIsVUFBVSxFQUFFO1lBQ1YsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxDQUFDO1lBQ3BFLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDO1NBQ25EO0tBQ0YsQ0FBQyxJQUFBLEVBTEssVUFBVSxRQUtmLENBQUE7SUFFRixJQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxPQUFPLENBQ3RDLGNBQU0sT0FBQSxJQUFJLHVCQUF1QixDQUFDLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQXpELENBQXlELEVBQy9ELENBQUMsVUFBVSxDQUFDLENBQ2IsQ0FBQTtJQUVELGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUE7SUFFM0UsSUFBTSxXQUFXLEdBQUcsb0NBQW9DLENBQUM7UUFDdkQsa0JBQWtCLG9CQUFBO0tBQ25CLENBQUMsQ0FBQTtJQUNJLElBQUEsS0FBc0IsbUJBQW1CLENBQUMsRUFBRSxXQUFXLGFBQUEsRUFBRSxDQUFDLEVBQXhELE1BQU0sWUFBQSxFQUFFLE9BQU8sYUFBeUMsQ0FBQTtJQUVoRSxPQUFPO1FBQ0wsV0FBVyxFQUFFLE9BQU87UUFDcEIsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSTtLQUNqRCxDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMYXp5UXVlcnlSZXN1bHQgfSBmcm9tICcuLi8uLi9qcy9tb2RlbC9MYXp5UXVlcnlSZXN1bHQvTGF6eVF1ZXJ5UmVzdWx0J1xuaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tICcuLi8uLi9qcy9tb2RlbC9UeXBlZFF1ZXJ5J1xuaW1wb3J0IHtcbiAgRmlsdGVyQnVpbGRlckNsYXNzLFxuICBGaWx0ZXJDbGFzcyxcbn0gZnJvbSAnLi4vZmlsdGVyLWJ1aWxkZXIvZmlsdGVyLnN0cnVjdHVyZSdcbmltcG9ydCBTZWxlY3Rpb25JbnRlcmZhY2VNb2RlbCBmcm9tICcuLi9zZWxlY3Rpb24taW50ZXJmYWNlL3NlbGVjdGlvbi1pbnRlcmZhY2UubW9kZWwnXG5pbXBvcnQgeyB1c2VSZXN1bHRzQW5kU3RhdHVzIH0gZnJvbSAnLi4vLi4vanMvbW9kZWwvTGF6eVF1ZXJ5UmVzdWx0L2hvb2tzJ1xuaW1wb3J0IHsgdXNlTGF6eVJlc3VsdHNGcm9tU2VsZWN0aW9uSW50ZXJmYWNlIH0gZnJvbSAnLi4vc2VsZWN0aW9uLWludGVyZmFjZS9ob29rcydcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnbG9kYXNoJ1xuXG50eXBlIFVzZVNlYXJjaFJlc3VsdHNQcm9wcyA9IHtcbiAgc2VhcmNoVGV4dDogc3RyaW5nXG4gIGFyY2hpdmVkPzogYm9vbGVhblxufVxuXG50eXBlIFVzZVNlYXJjaFJlc3VsdHNSZXR1cm4gPSB7XG4gIGxhenlSZXN1bHRzOiBMYXp5UXVlcnlSZXN1bHRbXVxuICBsb2FkaW5nOiBib29sZWFuXG59XG5cbmNvbnN0IGNyZWF0ZUZpbHRlclRyZWUgPSAoXG4gIHNlYXJjaFRleHQ6IHN0cmluZyxcbiAgYXJjaGl2ZWQ6IGJvb2xlYW5cbik6IEZpbHRlckJ1aWxkZXJDbGFzcyA9PiB7XG4gIGNvbnN0IGJhc2VGaWx0ZXJzID0gW1xuICAgIG5ldyBGaWx0ZXJDbGFzcyh7XG4gICAgICBwcm9wZXJ0eTogJ3RpdGxlJyxcbiAgICAgIHZhbHVlOiBgKiR7c2VhcmNoVGV4dH0qYCxcbiAgICAgIHR5cGU6ICdJTElLRScsXG4gICAgfSksXG4gICAgbmV3IEZpbHRlckNsYXNzKHtcbiAgICAgIHByb3BlcnR5OiBhcmNoaXZlZCA/ICdtZXRhY2FyZC5kZWxldGVkLnRhZ3MnIDogJ21ldGFjYXJkLXRhZ3MnLFxuICAgICAgdmFsdWU6ICdxdWVyeScsXG4gICAgICB0eXBlOiAnSUxJS0UnLFxuICAgIH0pLFxuICBdXG5cbiAgaWYgKGFyY2hpdmVkKSB7XG4gICAgYmFzZUZpbHRlcnMucHVzaChcbiAgICAgIG5ldyBGaWx0ZXJDbGFzcyh7XG4gICAgICAgIHByb3BlcnR5OiAnbWV0YWNhcmQtdGFncycsXG4gICAgICAgIHZhbHVlOiAnKicsXG4gICAgICAgIHR5cGU6ICdJTElLRScsXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIHJldHVybiBuZXcgRmlsdGVyQnVpbGRlckNsYXNzKHtcbiAgICB0eXBlOiAnQU5EJyxcbiAgICBmaWx0ZXJzOiBiYXNlRmlsdGVycyxcbiAgfSlcbn1cblxuY29uc3QgdXNlRGVib3VuY2VTZWFyY2ggPSAoXG4gIHNlbGVjdGlvbkludGVyZmFjZTogdHlwZW9mIFNlbGVjdGlvbkludGVyZmFjZU1vZGVsLFxuICBzZWFyY2hUZXh0OiBzdHJpbmcsXG4gIGFyY2hpdmVkOiBib29sZWFuLFxuICBzZXRIYXNTZWFyY2hlZDogUmVhY3QuRGlzcGF0Y2g8UmVhY3QuU2V0U3RhdGVBY3Rpb248Ym9vbGVhbj4+XG4pID0+IHtcbiAgY29uc3QgZGVib3VuY2VkU2VhcmNoID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgZGVib3VuY2UoKHF1ZXJ5KSA9PiB7XG4gICAgICBxdWVyeS5zdGFydFNlYXJjaEZyb21GaXJzdFBhZ2UoKVxuICAgICAgc2V0SGFzU2VhcmNoZWQodHJ1ZSlcbiAgICB9LCA1MDApLFxuICAgIFtzZXRIYXNTZWFyY2hlZF1cbiAgKVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFF1ZXJ5ID0gc2VsZWN0aW9uSW50ZXJmYWNlLmdldEN1cnJlbnRRdWVyeSgpXG4gICAgY3VycmVudFF1ZXJ5LnNldCgnZmlsdGVyVHJlZScsIGNyZWF0ZUZpbHRlclRyZWUoc2VhcmNoVGV4dCwgYXJjaGl2ZWQpKVxuICAgIGN1cnJlbnRRdWVyeS5jYW5jZWxDdXJyZW50U2VhcmNoZXMoKVxuICAgIGRlYm91bmNlZFNlYXJjaChjdXJyZW50UXVlcnkpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGVib3VuY2VkU2VhcmNoLmNhbmNlbCgpXG4gICAgfVxuICB9LCBbXG4gICAgc2VhcmNoVGV4dCxcbiAgICBhcmNoaXZlZCxcbiAgICBzZWxlY3Rpb25JbnRlcmZhY2UsXG4gICAgc2V0SGFzU2VhcmNoZWQsXG4gICAgZGVib3VuY2VkU2VhcmNoLFxuICBdKVxufVxuXG5leHBvcnQgY29uc3QgdXNlU2VhcmNoUmVzdWx0cyA9ICh7XG4gIHNlYXJjaFRleHQsXG4gIGFyY2hpdmVkID0gZmFsc2UsXG59OiBVc2VTZWFyY2hSZXN1bHRzUHJvcHMpOiBVc2VTZWFyY2hSZXN1bHRzUmV0dXJuID0+IHtcbiAgY29uc3QgW2hhc1NlYXJjaGVkLCBzZXRIYXNTZWFyY2hlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW3F1ZXJ5TW9kZWxdID0gdXNlUXVlcnkoe1xuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIHNvcnRzOiBbeyBhdHRyaWJ1dGU6ICdtZXRhY2FyZC5tb2RpZmllZCcsIGRpcmVjdGlvbjogJ2Rlc2NlbmRpbmcnIH1dLFxuICAgICAgZmlsdGVyVHJlZTogY3JlYXRlRmlsdGVyVHJlZShzZWFyY2hUZXh0LCBhcmNoaXZlZCksXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBzZWxlY3Rpb25JbnRlcmZhY2UgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IG5ldyBTZWxlY3Rpb25JbnRlcmZhY2VNb2RlbCh7IGN1cnJlbnRRdWVyeTogcXVlcnlNb2RlbCB9KSxcbiAgICBbcXVlcnlNb2RlbF1cbiAgKVxuXG4gIHVzZURlYm91bmNlU2VhcmNoKHNlbGVjdGlvbkludGVyZmFjZSwgc2VhcmNoVGV4dCwgYXJjaGl2ZWQsIHNldEhhc1NlYXJjaGVkKVxuXG4gIGNvbnN0IGxhenlSZXN1bHRzID0gdXNlTGF6eVJlc3VsdHNGcm9tU2VsZWN0aW9uSW50ZXJmYWNlKHtcbiAgICBzZWxlY3Rpb25JbnRlcmZhY2UsXG4gIH0pXG4gIGNvbnN0IHsgc3RhdHVzLCByZXN1bHRzIH0gPSB1c2VSZXN1bHRzQW5kU3RhdHVzKHsgbGF6eVJlc3VsdHMgfSlcblxuICByZXR1cm4ge1xuICAgIGxhenlSZXN1bHRzOiByZXN1bHRzLFxuICAgIGxvYWRpbmc6IGhhc1NlYXJjaGVkID8gc3RhdHVzLmlzU2VhcmNoaW5nIDogdHJ1ZSxcbiAgfVxufVxuIl19