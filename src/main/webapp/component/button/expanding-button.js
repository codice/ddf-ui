import { __assign, __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import FakeIcon from '@mui/icons-material/AcUnit';
import Button from '@mui/material/Button';
import Tooltip from '@mui/material/Tooltip';
import Paper from '@mui/material/Paper';
import { Elevations } from '../theme/theme';
import { useIsTruncated } from '../overflow-tooltip/overflow-tooltip';
var ExpandingButton = function (_a) {
    var expanded = _a.expanded, Icon = _a.Icon, expandedLabel = _a.expandedLabel, unexpandedLabel = _a.unexpandedLabel, _b = _a.dataId, dataId = _b === void 0 ? (expandedLabel === null || expandedLabel === void 0 ? void 0 : expandedLabel.toString()) || 'default' : _b, _c = _a.orientation, orientation = _c === void 0 ? 'horizontal' : _c, buttonProps = __rest(_a, ["expanded", "Icon", "expandedLabel", "unexpandedLabel", "dataId", "orientation"]);
    var className = buttonProps.className, otherButtonProps = __rest(buttonProps, ["className"]);
    var isTruncatedState = useIsTruncated();
    var disableTooltip = (function () {
        if ((orientation === 'vertical' && !expanded) ||
            (!unexpandedLabel && !expanded)) {
            return false;
        }
        else {
            return !isTruncatedState.isTruncated;
        }
    })();
    return (_jsx(Tooltip, { title: disableTooltip ? ('') : (_jsx(Paper, { elevation: Elevations.overlays, children: _jsx("div", { className: "p-2", children: expandedLabel }) })), onOpen: function () {
            isTruncatedState.compareSize.current();
        }, placement: "right", children: _jsx(Button, __assign({ "data-id": dataId, fullWidth: true, className: "".concat(className, " transition-all duration-200 ease-in-out whitespace-nowrap max-w-full overflow-hidden relative outline-none ").concat(expanded ? '' : 'p-0') }, otherButtonProps, { children: _jsxs("div", { className: "flex flex-row flex-nowrap items-center w-full h-full", ref: isTruncatedState.ref, children: [_jsxs("div", { className: " ".concat(expanded ? 'hidden' : '', " w-full flex flex-col shrink-0 items-center justify-start flex-nowrap py-2"), children: [Icon ? _jsx(Icon, { className: "py-1" }) : null, _jsx("div", { className: "".concat(orientation === 'horizontal'
                                    ? 'w-full'
                                    : 'writing-mode-vertical-lr', " truncate text-center"), children: unexpandedLabel })] }), _jsx("div", { className: "".concat(expanded ? '' : 'hidden', " pl-4 shrink-1 w-full truncate"), children: _jsxs("div", { className: "flex flex-row items-center flex-nowrap w-full", children: [Icon ? (_jsx(Icon, { className: "transition duration-200 ease-in-out mr-2 shrink-0" })) : (_jsx(FakeIcon, { className: "transition duration-200 ease-in-out mr-2 opacity-0 shrink-0" })), _jsx("div", { className: "flex flex-col items-start flex-nowrap text-lg w-full shrink-1 truncate", children: expandedLabel })] }) })] }) })) }));
};
export default ExpandingButton;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kaW5nLWJ1dHRvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvYnV0dG9uL2V4cGFuZGluZy1idXR0b24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsT0FBTyxRQUFRLE1BQU0sNEJBQTRCLENBQUE7QUFDakQsT0FBTyxNQUF1QixNQUFNLHNCQUFzQixDQUFBO0FBRzFELE9BQU8sT0FBTyxNQUFNLHVCQUF1QixDQUFBO0FBQzNDLE9BQU8sS0FBSyxNQUFNLHFCQUFxQixDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUE7QUE0QnJFLElBQU0sZUFBZSxHQUFHLFVBQUMsRUFRRjtJQVByQixJQUFBLFFBQVEsY0FBQSxFQUNSLElBQUksVUFBQSxFQUNKLGFBQWEsbUJBQUEsRUFDYixlQUFlLHFCQUFBLEVBQ2YsY0FBK0MsRUFBL0MsTUFBTSxtQkFBRyxDQUFBLGFBQWEsYUFBYixhQUFhLHVCQUFiLGFBQWEsQ0FBRSxRQUFRLEVBQUUsS0FBSSxTQUFTLEtBQUEsRUFDL0MsbUJBQTBCLEVBQTFCLFdBQVcsbUJBQUcsWUFBWSxLQUFBLEVBQ3ZCLFdBQVcsY0FQUyxpRkFReEIsQ0FEZTtJQUVOLElBQUEsU0FBUyxHQUEwQixXQUFXLFVBQXJDLEVBQUssZ0JBQWdCLFVBQUssV0FBVyxFQUFoRCxhQUFrQyxDQUFGLENBQWdCO0lBQ3RELElBQU0sZ0JBQWdCLEdBQUcsY0FBYyxFQUFrQixDQUFBO0lBQ3pELElBQU0sY0FBYyxHQUFHLENBQUM7UUFDdEIsSUFDRSxDQUFDLFdBQVcsS0FBSyxVQUFVLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDekMsQ0FBQyxDQUFDLGVBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUMvQixDQUFDO1lBQ0QsT0FBTyxLQUFLLENBQUE7UUFDZCxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUE7UUFDdEMsQ0FBQztJQUNILENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDSixPQUFPLENBQ0wsS0FBQyxPQUFPLElBQ04sS0FBSyxFQUNILGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FDZixFQUFFLENBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FDRixLQUFDLEtBQUssSUFBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLFFBQVEsWUFDbkMsY0FBSyxTQUFTLEVBQUMsS0FBSyxZQUFFLGFBQWEsR0FBTyxHQUNwQyxDQUNULEVBRUgsTUFBTSxFQUFFO1lBQ04sZ0JBQWdCLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3hDLENBQUMsRUFDRCxTQUFTLEVBQUMsT0FBTyxZQUVqQixLQUFDLE1BQU0sd0JBQ0ksTUFBTSxFQUNmLFNBQVMsUUFDVCxTQUFTLEVBQUUsVUFBRyxTQUFTLHlIQUNyQixRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUNyQixJQUNFLGdCQUFnQixjQUVwQixlQUNFLFNBQVMsRUFBRSxzREFBc0QsRUFDakUsR0FBRyxFQUFFLGdCQUFnQixDQUFDLEdBQUcsYUFFekIsZUFDRSxTQUFTLEVBQUUsV0FDVCxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSwrRUFDa0QsYUFFM0UsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFDLElBQUksSUFBQyxTQUFTLEVBQUUsTUFBTSxHQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFDMUMsY0FDRSxTQUFTLEVBQUUsVUFDVCxXQUFXLEtBQUssWUFBWTtvQ0FDMUIsQ0FBQyxDQUFDLFFBQVE7b0NBQ1YsQ0FBQyxDQUFDLDBCQUEwQiwwQkFDVCxZQUV0QixlQUFlLEdBQ1osSUFDRixFQUVOLGNBQ0UsU0FBUyxFQUFFLFVBQ1QsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsbUNBQ00sWUFFaEMsZUFBSyxTQUFTLEVBQUMsK0NBQStDLGFBQzNELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDTixLQUFDLElBQUksSUFBQyxTQUFTLEVBQUMsbURBQW1ELEdBQUcsQ0FDdkUsQ0FBQyxDQUFDLENBQUMsQ0FDRixLQUFDLFFBQVEsSUFBQyxTQUFTLEVBQUMsNkRBQTZELEdBQUcsQ0FDckYsRUFDRCxjQUFLLFNBQVMsRUFBQyx3RUFBd0UsWUFDcEYsYUFBYSxHQUNWLElBQ0YsR0FDRixJQUNGLElBQ0MsR0FDRCxDQUNYLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxlQUFlLGVBQWUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEZha2VJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvQWNVbml0J1xuaW1wb3J0IEJ1dHRvbiwgeyBCdXR0b25Qcm9wcyB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJ1xuaW1wb3J0IHsgTGlua1Byb3BzLCBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IFRvb2x0aXAgZnJvbSAnQG11aS9tYXRlcmlhbC9Ub29sdGlwJ1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvUGFwZXInXG5pbXBvcnQgeyBFbGV2YXRpb25zIH0gZnJvbSAnLi4vdGhlbWUvdGhlbWUnXG5pbXBvcnQgeyB1c2VJc1RydW5jYXRlZCB9IGZyb20gJy4uL292ZXJmbG93LXRvb2x0aXAvb3ZlcmZsb3ctdG9vbHRpcCdcblxuZXhwb3J0IHR5cGUgQmFzZVByb3BzID0ge1xuICBJY29uPzogUmVhY3QuRkM8UmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48YW55Pj5cbiAgZXhwYW5kZWRMYWJlbDogUmVhY3QuUmVhY3ROb2RlXG4gIHVuZXhwYW5kZWRMYWJlbDogUmVhY3QuUmVhY3ROb2RlXG4gIGRhdGFJZD86IHN0cmluZ1xuICBleHBhbmRlZDogYm9vbGVhblxuICBvcmllbnRhdGlvbj86ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCdcbn1cblxudHlwZSBFeHBhbmRpbmdCdXR0b25Qcm9wcyA9XG4gIHwgKEJ1dHRvblByb3BzICYge1xuICAgICAgY29tcG9uZW50PzogdW5kZWZpbmVkXG4gICAgfSAmIEJhc2VQcm9wcylcbiAgfCAoQnV0dG9uUHJvcHMgJlxuICAgICAgQmFzZVByb3BzICYge1xuICAgICAgICBjb21wb25lbnQ6IHR5cGVvZiBMaW5rXG4gICAgICB9ICYgUGFydGlhbDxMaW5rUHJvcHM+KVxuICB8IChCdXR0b25Qcm9wcyAmXG4gICAgICBCYXNlUHJvcHMgJiB7XG4gICAgICAgIGNvbXBvbmVudDogJ2EnXG4gICAgICB9ICYgUGFydGlhbDxSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4+KVxuICB8IChCdXR0b25Qcm9wcyAmXG4gICAgICBCYXNlUHJvcHMgJiB7XG4gICAgICAgIGNvbXBvbmVudDogdHlwZW9mIEJ1dHRvblxuICAgICAgfSAmIFBhcnRpYWw8QnV0dG9uUHJvcHM+KVxuXG5jb25zdCBFeHBhbmRpbmdCdXR0b24gPSAoe1xuICBleHBhbmRlZCxcbiAgSWNvbixcbiAgZXhwYW5kZWRMYWJlbCxcbiAgdW5leHBhbmRlZExhYmVsLFxuICBkYXRhSWQgPSBleHBhbmRlZExhYmVsPy50b1N0cmluZygpIHx8ICdkZWZhdWx0JyxcbiAgb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCcsXG4gIC4uLmJ1dHRvblByb3BzXG59OiBFeHBhbmRpbmdCdXR0b25Qcm9wcykgPT4ge1xuICBjb25zdCB7IGNsYXNzTmFtZSwgLi4ub3RoZXJCdXR0b25Qcm9wcyB9ID0gYnV0dG9uUHJvcHNcbiAgY29uc3QgaXNUcnVuY2F0ZWRTdGF0ZSA9IHVzZUlzVHJ1bmNhdGVkPEhUTUxEaXZFbGVtZW50PigpXG4gIGNvbnN0IGRpc2FibGVUb29sdGlwID0gKCgpID0+IHtcbiAgICBpZiAoXG4gICAgICAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgIWV4cGFuZGVkKSB8fFxuICAgICAgKCF1bmV4cGFuZGVkTGFiZWwgJiYgIWV4cGFuZGVkKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAhaXNUcnVuY2F0ZWRTdGF0ZS5pc1RydW5jYXRlZFxuICAgIH1cbiAgfSkoKVxuICByZXR1cm4gKFxuICAgIDxUb29sdGlwXG4gICAgICB0aXRsZT17XG4gICAgICAgIGRpc2FibGVUb29sdGlwID8gKFxuICAgICAgICAgICcnXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPFBhcGVyIGVsZXZhdGlvbj17RWxldmF0aW9ucy5vdmVybGF5c30+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtMlwiPntleHBhbmRlZExhYmVsfTwvZGl2PlxuICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIG9uT3Blbj17KCkgPT4ge1xuICAgICAgICBpc1RydW5jYXRlZFN0YXRlLmNvbXBhcmVTaXplLmN1cnJlbnQoKVxuICAgICAgfX1cbiAgICAgIHBsYWNlbWVudD1cInJpZ2h0XCJcbiAgICA+XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGRhdGEtaWQ9e2RhdGFJZH1cbiAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgIGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfSB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1pbi1vdXQgd2hpdGVzcGFjZS1ub3dyYXAgbWF4LXctZnVsbCBvdmVyZmxvdy1oaWRkZW4gcmVsYXRpdmUgb3V0bGluZS1ub25lICR7XG4gICAgICAgICAgZXhwYW5kZWQgPyAnJyA6ICdwLTAnXG4gICAgICAgIH1gfVxuICAgICAgICB7Li4ub3RoZXJCdXR0b25Qcm9wc31cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17YGZsZXggZmxleC1yb3cgZmxleC1ub3dyYXAgaXRlbXMtY2VudGVyIHctZnVsbCBoLWZ1bGxgfVxuICAgICAgICAgIHJlZj17aXNUcnVuY2F0ZWRTdGF0ZS5yZWZ9XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e2AgJHtcbiAgICAgICAgICAgICAgZXhwYW5kZWQgPyAnaGlkZGVuJyA6ICcnXG4gICAgICAgICAgICB9IHctZnVsbCBmbGV4IGZsZXgtY29sIHNocmluay0wIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LXN0YXJ0IGZsZXgtbm93cmFwIHB5LTJgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtJY29uID8gPEljb24gY2xhc3NOYW1lPXtgcHktMWB9IC8+IDogbnVsbH1cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnXG4gICAgICAgICAgICAgICAgICA/ICd3LWZ1bGwnXG4gICAgICAgICAgICAgICAgICA6ICd3cml0aW5nLW1vZGUtdmVydGljYWwtbHInXG4gICAgICAgICAgICAgIH0gdHJ1bmNhdGUgdGV4dC1jZW50ZXJgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dW5leHBhbmRlZExhYmVsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake1xuICAgICAgICAgICAgICBleHBhbmRlZCA/ICcnIDogJ2hpZGRlbidcbiAgICAgICAgICAgIH0gcGwtNCBzaHJpbmstMSB3LWZ1bGwgdHJ1bmNhdGVgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgZmxleC1ub3dyYXAgdy1mdWxsXCI+XG4gICAgICAgICAgICAgIHtJY29uID8gKFxuICAgICAgICAgICAgICAgIDxJY29uIGNsYXNzTmFtZT1cInRyYW5zaXRpb24gZHVyYXRpb24tMjAwIGVhc2UtaW4tb3V0IG1yLTIgc2hyaW5rLTBcIiAvPlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxGYWtlSWNvbiBjbGFzc05hbWU9XCJ0cmFuc2l0aW9uIGR1cmF0aW9uLTIwMCBlYXNlLWluLW91dCBtci0yIG9wYWNpdHktMCBzaHJpbmstMFwiIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBpdGVtcy1zdGFydCBmbGV4LW5vd3JhcCB0ZXh0LWxnIHctZnVsbCBzaHJpbmstMSB0cnVuY2F0ZVwiPlxuICAgICAgICAgICAgICAgIHtleHBhbmRlZExhYmVsfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvVG9vbHRpcD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHBhbmRpbmdCdXR0b25cbiJdfQ==