import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
import Paper from '@mui/material/Paper';
import Popover from '@mui/material/Popover';
import StorageIcon from '@mui/icons-material/Storage';
import * as React from 'react';
import ExtensionPoints from '../../extension-points';
import SourcesPage from '../../react-component/sources/presentation';
import { Elevations } from '../theme/theme';
import { useMenuState } from '../menu-state/menu-state';
var SourcesInfo = function () {
    var _a = useMenuState(), anchorRef = _a.anchorRef, handleClick = _a.handleClick, handleClose = _a.handleClose, open = _a.open;
    var popoverActions = React.useRef(null);
    var onChange = function () {
        if (popoverActions.current) {
            popoverActions.current.updatePosition();
        }
    };
    return (_jsxs(React.Fragment, { children: [_jsx(Button, { component: "div", "data-id": "sources-button", fullWidth: true, variant: "text", color: "primary", onClick: handleClick, ref: anchorRef, children: _jsxs(Grid, { container: true, direction: "row", alignItems: "center", wrap: "nowrap", children: [_jsx(Grid, { item: true, className: "pr-1", children: _jsx(StorageIcon, { className: "Mui-text-text-primary" }) }), _jsx(Grid, { item: true, children: "Sources" })] }) }), _jsx(Popover, { action: popoverActions, open: open, anchorEl: anchorRef.current, onClose: handleClose, anchorOrigin: {
                    vertical: 'bottom',
                    horizontal: 'center',
                }, transformOrigin: {
                    vertical: 'top',
                    horizontal: 'center',
                }, className: "max-h-screen-1/2", children: _jsx(Paper, { elevation: Elevations.overlays, className: "min-w-120", children: ExtensionPoints.customSourcesPage ? (_jsx(ExtensionPoints.customSourcesPage, { onChange: onChange })) : (_jsx(SourcesPage, {})) }) })] }));
};
export default SourcesInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlcy1pbmZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudC9xdWVyeS1zZXR0aW5ncy9zb3VyY2VzLWluZm8udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLE1BQU0sTUFBTSxzQkFBc0IsQ0FBQTtBQUN6QyxPQUFPLElBQUksTUFBTSxvQkFBb0IsQ0FBQTtBQUNyQyxPQUFPLEtBQUssTUFBTSxxQkFBcUIsQ0FBQTtBQUN2QyxPQUFPLE9BQTJCLE1BQU0sdUJBQXVCLENBQUE7QUFDL0QsT0FBTyxXQUFXLE1BQU0sNkJBQTZCLENBQUE7QUFDckQsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFFOUIsT0FBTyxlQUFlLE1BQU0sd0JBQXdCLENBQUE7QUFDcEQsT0FBTyxXQUFXLE1BQU0sNENBQTRDLENBQUE7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUV2RCxJQUFNLFdBQVcsR0FBRztJQUNaLElBQUEsS0FBZ0QsWUFBWSxFQUFFLEVBQTVELFNBQVMsZUFBQSxFQUFFLFdBQVcsaUJBQUEsRUFBRSxXQUFXLGlCQUFBLEVBQUUsSUFBSSxVQUFtQixDQUFBO0lBQ3BFLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQWlCLElBQUksQ0FBQyxDQUFBO0lBRXpELElBQU0sUUFBUSxHQUFHO1FBQ2YsSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0IsY0FBYyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUN6QyxDQUFDO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsT0FBTyxDQUNMLE1BQUMsS0FBSyxDQUFDLFFBQVEsZUFDYixLQUFDLE1BQU0sSUFDTCxTQUFTLEVBQUMsS0FBSyxhQUNQLGdCQUFnQixFQUN4QixTQUFTLFFBQ1QsT0FBTyxFQUFDLE1BQU0sRUFDZCxLQUFLLEVBQUMsU0FBUyxFQUNmLE9BQU8sRUFBRSxXQUFXLEVBQ3BCLEdBQUcsRUFBRSxTQUFTLFlBRWQsTUFBQyxJQUFJLElBQUMsU0FBUyxRQUFDLFNBQVMsRUFBQyxLQUFLLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxJQUFJLEVBQUMsUUFBUSxhQUMvRCxLQUFDLElBQUksSUFBQyxJQUFJLFFBQUMsU0FBUyxFQUFDLE1BQU0sWUFDekIsS0FBQyxXQUFXLElBQUMsU0FBUyxFQUFDLHVCQUF1QixHQUFHLEdBQzVDLEVBQ1AsS0FBQyxJQUFJLElBQUMsSUFBSSw4QkFBZSxJQUNwQixHQUNBLEVBQ1QsS0FBQyxPQUFPLElBQ04sTUFBTSxFQUFFLGNBQWMsRUFDdEIsSUFBSSxFQUFFLElBQUksRUFDVixRQUFRLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFDM0IsT0FBTyxFQUFFLFdBQVcsRUFDcEIsWUFBWSxFQUFFO29CQUNaLFFBQVEsRUFBRSxRQUFRO29CQUNsQixVQUFVLEVBQUUsUUFBUTtpQkFDckIsRUFDRCxlQUFlLEVBQUU7b0JBQ2YsUUFBUSxFQUFFLEtBQUs7b0JBQ2YsVUFBVSxFQUFFLFFBQVE7aUJBQ3JCLEVBQ0QsU0FBUyxFQUFDLGtCQUFrQixZQUU1QixLQUFDLEtBQUssSUFBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUMsV0FBVyxZQUN6RCxlQUFlLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQ25DLEtBQUMsZUFBZSxDQUFDLGlCQUFpQixJQUFDLFFBQVEsRUFBRSxRQUFRLEdBQUksQ0FDMUQsQ0FBQyxDQUFDLENBQUMsQ0FDRixLQUFDLFdBQVcsS0FBRyxDQUNoQixHQUNLLEdBQ0EsSUFDSyxDQUNsQixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsZUFBZSxXQUFXLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJ1xuaW1wb3J0IEdyaWQgZnJvbSAnQG11aS9tYXRlcmlhbC9HcmlkJ1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvUGFwZXInXG5pbXBvcnQgUG9wb3ZlciwgeyBQb3BvdmVyQWN0aW9ucyB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvUG9wb3ZlcidcbmltcG9ydCBTdG9yYWdlSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL1N0b3JhZ2UnXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IEV4dGVuc2lvblBvaW50cyBmcm9tICcuLi8uLi9leHRlbnNpb24tcG9pbnRzJ1xuaW1wb3J0IFNvdXJjZXNQYWdlIGZyb20gJy4uLy4uL3JlYWN0LWNvbXBvbmVudC9zb3VyY2VzL3ByZXNlbnRhdGlvbidcbmltcG9ydCB7IEVsZXZhdGlvbnMgfSBmcm9tICcuLi90aGVtZS90aGVtZSdcbmltcG9ydCB7IHVzZU1lbnVTdGF0ZSB9IGZyb20gJy4uL21lbnUtc3RhdGUvbWVudS1zdGF0ZSdcblxuY29uc3QgU291cmNlc0luZm8gPSAoKSA9PiB7XG4gIGNvbnN0IHsgYW5jaG9yUmVmLCBoYW5kbGVDbGljaywgaGFuZGxlQ2xvc2UsIG9wZW4gfSA9IHVzZU1lbnVTdGF0ZSgpXG4gIGNvbnN0IHBvcG92ZXJBY3Rpb25zID0gUmVhY3QudXNlUmVmPFBvcG92ZXJBY3Rpb25zPihudWxsKVxuXG4gIGNvbnN0IG9uQ2hhbmdlID0gKCkgPT4ge1xuICAgIGlmIChwb3BvdmVyQWN0aW9ucy5jdXJyZW50KSB7XG4gICAgICBwb3BvdmVyQWN0aW9ucy5jdXJyZW50LnVwZGF0ZVBvc2l0aW9uKClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgY29tcG9uZW50PVwiZGl2XCJcbiAgICAgICAgZGF0YS1pZD1cInNvdXJjZXMtYnV0dG9uXCJcbiAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgIHJlZj17YW5jaG9yUmVmfVxuICAgICAgPlxuICAgICAgICA8R3JpZCBjb250YWluZXIgZGlyZWN0aW9uPVwicm93XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHdyYXA9XCJub3dyYXBcIj5cbiAgICAgICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInByLTFcIj5cbiAgICAgICAgICAgIDxTdG9yYWdlSWNvbiBjbGFzc05hbWU9XCJNdWktdGV4dC10ZXh0LXByaW1hcnlcIiAvPlxuICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICA8R3JpZCBpdGVtPlNvdXJjZXM8L0dyaWQ+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgIDwvQnV0dG9uPlxuICAgICAgPFBvcG92ZXJcbiAgICAgICAgYWN0aW9uPXtwb3BvdmVyQWN0aW9uc31cbiAgICAgICAgb3Blbj17b3Blbn1cbiAgICAgICAgYW5jaG9yRWw9e2FuY2hvclJlZi5jdXJyZW50fVxuICAgICAgICBvbkNsb3NlPXtoYW5kbGVDbG9zZX1cbiAgICAgICAgYW5jaG9yT3JpZ2luPXt7XG4gICAgICAgICAgdmVydGljYWw6ICdib3R0b20nLFxuICAgICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInLFxuICAgICAgICB9fVxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW49e3tcbiAgICAgICAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcicsXG4gICAgICAgIH19XG4gICAgICAgIGNsYXNzTmFtZT1cIm1heC1oLXNjcmVlbi0xLzJcIlxuICAgICAgPlxuICAgICAgICA8UGFwZXIgZWxldmF0aW9uPXtFbGV2YXRpb25zLm92ZXJsYXlzfSBjbGFzc05hbWU9XCJtaW4tdy0xMjBcIj5cbiAgICAgICAgICB7RXh0ZW5zaW9uUG9pbnRzLmN1c3RvbVNvdXJjZXNQYWdlID8gKFxuICAgICAgICAgICAgPEV4dGVuc2lvblBvaW50cy5jdXN0b21Tb3VyY2VzUGFnZSBvbkNoYW5nZT17b25DaGFuZ2V9IC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxTb3VyY2VzUGFnZSAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvUGFwZXI+XG4gICAgICA8L1BvcG92ZXI+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTb3VyY2VzSW5mb1xuIl19