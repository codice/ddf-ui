import { __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { useBackbone } from '../selection-checkbox/useBackbone.hook';
import TextField from '@mui/material/TextField';
import MenuItem from '@mui/material/MenuItem';
import Typography from '@mui/material/Typography';
import Swath from '../swath/swath';
import Grid from '@mui/material/Grid';
import HomeIcon from '@mui/icons-material/Home';
import CloudIcon from '@mui/icons-material/Cloud';
import WarningIcon from '@mui/icons-material/Warning';
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
import Chip from '@mui/material/Chip';
import _ from 'lodash';
import { useSources } from '../../js/model/Startup/sources.hooks';
export var getHumanReadableSourceName = function (sourceId) {
    if (sourceId === 'all') {
        return 'All';
    }
    else if (sourceId === 'remote') {
        return (_jsxs("div", { className: "flex flex-row items-center", children: [_jsx("div", { children: "Slow (offsite)" }), ' ', _jsx("div", { children: _jsx(CloudIcon, {}) })] }));
    }
    else if (sourceId === 'local') {
        return (_jsxs("div", { className: "flex flex-row items-center", children: [_jsx("div", { children: "Fast (onsite)" }), ' ', _jsx("div", { children: _jsx(HomeIcon, {}) })] }));
    }
    return sourceId;
};
var getSourcesFromSearch = function (_a) {
    var search = _a.search;
    return search.get('sources') || [];
};
var shouldBeSelected = function (_a) {
    var srcId = _a.srcId, sources = _a.sources, isHarvested = _a.isHarvested;
    if (sources.includes('all')) {
        return true;
    }
    else if (sources.includes('local') && isHarvested(srcId)) {
        return true;
    }
    else if (sources.includes('remote') &&
        !isHarvested(srcId) &&
        srcId !== 'all' &&
        srcId !== 'local') {
        return true;
    }
    if (sources.includes(srcId)) {
        return true;
    }
    return false;
};
/**
 * So we used to use two separate search properties to track sources, federation and sources.
 * If federation was enterprise, we searched everything.  If not, we looked to sources.  I also think local was a thing.
 *
 * Instead, we're going to swap to storing only one property, sources (an array of strings).
 * If sources includes, 'all' then that's enterprise.  If it includes 'local', then that means everything local.
 * If it includes 'remote', that that means everything remote.  All other values are singular selections of a source.
 */
var SourceSelector = function (_a) {
    var search = _a.search;
    var availableSources = useSources().sources;
    var _b = __read(React.useState(getSourcesFromSearch({ search: search })), 2), sources = _b[0], setSources = _b[1];
    var listenTo = useBackbone().listenTo;
    React.useEffect(function () {
        listenTo(search, 'change:sources', function () {
            setSources(getSourcesFromSearch({ search: search }));
        });
    }, []);
    React.useEffect(function () {
        search.set('sources', sources);
    }, [sources]);
    var availableLocalSources = availableSources.filter(function (availableSource) {
        return availableSource.harvested;
    });
    var availableRemoteSources = availableSources.filter(function (availableSource) {
        return !availableSource.harvested;
    });
    var isHarvested = function (source) {
        return availableLocalSources.some(function (availableSource) {
            return availableSource.id === source;
        });
    };
    return (_jsxs("div", { children: [_jsx(Typography, { className: "pb-2", children: "Data Sources" }), _jsxs(TextField, { "data-id": "data-sources-select", fullWidth: true, variant: "outlined", select: true, SelectProps: {
                    multiple: true,
                    renderValue: function (selected) {
                        return (_jsx(Grid, { container: true, alignItems: "center", direction: "row", children: selected
                                .sort(function (a, b) {
                                return a.toLowerCase().localeCompare(b.toLowerCase()); // case insensitive sort
                            })
                                .sort(function (a) {
                                if (a === 'local' || a === 'remote') {
                                    return -1; // move these subcategories upwards to front
                                }
                                return 0;
                            })
                                .map(function (src) {
                                return (_jsx(Grid, { item: true, className: "mr-2", children: _jsx(Chip, { variant: "outlined", color: "default", className: "cursor-pointer", label: getHumanReadableSourceName(src) }) }, src));
                            }) }));
                    },
                    MenuProps: {},
                }, value: sources, onChange: function (e) {
                    // first of all I'm sorry, second of all, order matters in these cases.  Should really just make a state machine out of this.
                    // https://xstate.js.org/docs/  perhaps?
                    var newSources = e.target.value;
                    // these first three if only apply if the value didn't previous exist (user is going from not all to 'all', etc.)
                    var newLocalSources = newSources
                        .filter(function (src) { return !['all', 'remote', 'local'].includes(src); })
                        .filter(function (src) { return isHarvested(src); });
                    var newRemoteSources = newSources
                        .filter(function (src) { return !['all', 'remote', 'local'].includes(src); })
                        .filter(function (src) { return !isHarvested(src); });
                    if ((newSources.includes('all') && !sources.includes('all')) ||
                        (newSources.includes('local') &&
                            newSources.includes('remote') &&
                            (!sources.includes('remote') || !sources.includes('local')) &&
                            !sources.includes('all'))) {
                        setSources(['all']);
                    }
                    else if (sources.includes('all') && newSources.includes('local')) {
                        setSources(['remote']);
                    }
                    else if (sources.includes('all') && newSources.includes('remote')) {
                        setSources(['local']);
                    }
                    else if (sources.includes('all') && newLocalSources.length > 0) {
                        setSources(_.difference(availableLocalSources.map(function (src) { return src.id; }).concat(['remote']), newLocalSources));
                    }
                    else if (sources.includes('all') && newRemoteSources.length > 0) {
                        setSources(_.difference(availableRemoteSources.map(function (src) { return src.id; }).concat(['local']), newRemoteSources));
                    }
                    else if (sources.includes('local') && newLocalSources.length > 0) {
                        setSources(_.difference(sources
                            .filter(function (src) { return src !== 'local'; })
                            .concat(availableLocalSources.map(function (src) { return src.id; })), newLocalSources));
                    }
                    else if (sources.includes('remote') &&
                        newRemoteSources.length > 0) {
                        setSources(_.difference(sources
                            .filter(function (src) { return src !== 'remote'; })
                            .concat(availableRemoteSources.map(function (src) { return src.id; })), newRemoteSources));
                    }
                    else if (newSources.includes('local') &&
                        !sources.includes('local')) {
                        setSources(newSources.filter(function (val) { return !isHarvested(val) && val !== 'all'; }));
                    }
                    else if (newSources.includes('remote') &&
                        !sources.includes('remote')) {
                        setSources(['remote'].concat(newSources.filter(function (val) { return isHarvested(val) && val !== 'all'; })));
                    }
                    else if (newSources.length ===
                        availableLocalSources.length + availableRemoteSources.length ||
                        (newSources.includes('local') &&
                            newSources.length === availableRemoteSources.length + 1) ||
                        (newSources.includes('remote') &&
                            newSources.length === availableLocalSources.length + 1)) {
                        setSources(['all']);
                    }
                    else if (availableLocalSources.length > 0 &&
                        _.difference(availableLocalSources.map(function (src) { return src.id; }), newSources.filter(function (src) { return isHarvested(src); })).length === 0) {
                        setSources(['local'].concat(newSources.filter(function (src) { return !isHarvested(src); })));
                    }
                    else if (availableRemoteSources.length > 0 &&
                        _.difference(availableRemoteSources.map(function (src) { return src.id; }), newSources.filter(function (src) { return !isHarvested(src); })).length === 0) {
                        setSources(['remote'].concat(newSources.filter(function (src) { return isHarvested(src); })));
                    }
                    else {
                        // in these case, we now have to determine if we should remove all, remote, or local based on what is in newSources
                        // no matter what all should be removed
                        newSources = newSources.filter(function (src) { return src !== 'all'; });
                        if (newSources.find(function (src) { return isHarvested(src); })) {
                            newSources = newSources.filter(function (src) { return src !== 'local'; });
                        }
                        if (newSources.find(function (src) { return src !== 'remote' && !isHarvested(src); })) {
                            newSources = newSources.filter(function (src) { return src !== 'remote'; });
                        }
                        setSources(newSources);
                    }
                }, size: "small", children: [_jsx(MenuItem, { "data-id": "all-option", value: "all", children: _jsx(Grid, { container: true, alignItems: "stretch", direction: "row", wrap: "nowrap", children: _jsxs(Grid, { container: true, direction: "row", alignItems: "center", children: [_jsx(Grid, { item: true, className: "pr-2", children: shouldBeSelected({ srcId: 'all', sources: sources, isHarvested: isHarvested }) ? (_jsx(CheckBoxIcon, {})) : (_jsx(CheckBoxOutlineBlankIcon, {})) }), _jsx(Grid, { item: true, children: "All" })] }) }) }), availableLocalSources.length > 0 ? (_jsx(MenuItem, { "data-id": "onsite-option", value: "local", children: _jsxs(Grid, { container: true, alignItems: "stretch", direction: "row", wrap: "nowrap", className: "pl-3", children: [_jsx(Grid, { item: true, className: "pr-2", children: _jsx(Swath, { className: "w-1 h-full" }) }), _jsxs(Grid, { container: true, direction: "row", alignItems: "center", children: [_jsx(Grid, { item: true, className: "pr-2", children: shouldBeSelected({
                                                srcId: 'local',
                                                sources: sources,
                                                isHarvested: isHarvested,
                                            }) ? (_jsx(CheckBoxIcon, {})) : (_jsx(CheckBoxOutlineBlankIcon, {})) }), _jsx(Grid, { item: true, children: "Fast (onsite)" }), _jsx(Grid, { item: true, className: "pl-2", children: _jsx(HomeIcon, {}) })] })] }) })) : null, availableLocalSources.length > 0
                        ? availableLocalSources.map(function (source) {
                            return (_jsx(MenuItem, { "data-id": "source-".concat(source.id, "-option"), value: source.id, children: _jsxs(Grid, { container: true, alignItems: "stretch", direction: "row", wrap: "nowrap", className: "pl-6", children: [_jsx(Grid, { item: true, className: "pl-3 pr-3", children: _jsx(Swath, { className: "w-1 h-full" }) }), _jsxs(Grid, { container: true, direction: "row", alignItems: "center", children: [_jsx(Grid, { item: true, className: "pr-2", children: shouldBeSelected({
                                                        srcId: source.id,
                                                        sources: sources,
                                                        isHarvested: isHarvested,
                                                    }) ? (_jsx(CheckBoxIcon, {})) : (_jsx(CheckBoxOutlineBlankIcon, {})) }), _jsx(Grid, { item: true, children: _jsx("div", { className: source.available
                                                            ? 'Mui-text-text-primary'
                                                            : 'Mui-text-warning', children: source.id }) }), _jsx(Grid, { item: true, className: "pl-2", children: source.available ? null : _jsx(WarningIcon, {}) })] })] }) }, source.id));
                        })
                        : null, availableRemoteSources.length > -1 ? (_jsx(MenuItem, { "data-id": "offsite-option", value: "remote", children: _jsxs(Grid, { container: true, alignItems: "stretch", direction: "row", wrap: "nowrap", className: "pl-3", children: [_jsx(Grid, { item: true, className: "pr-2", children: _jsx(Swath, { className: "w-1 h-full" }) }), _jsxs(Grid, { container: true, direction: "row", alignItems: "center", children: [_jsx(Grid, { item: true, className: "pr-2", children: shouldBeSelected({
                                                srcId: 'remote',
                                                sources: sources,
                                                isHarvested: isHarvested,
                                            }) ? (_jsx(CheckBoxIcon, {})) : (_jsx(CheckBoxOutlineBlankIcon, {})) }), _jsx(Grid, { item: true, children: "Slow (offsite)" }), _jsx(Grid, { item: true, className: "pl-2", children: _jsx(CloudIcon, {}) })] })] }) })) : null, availableRemoteSources.length > 0
                        ? availableRemoteSources.map(function (source) {
                            return (_jsx(MenuItem, { "data-id": "source-".concat(source.id, "-option"), value: source.id, children: _jsxs(Grid, { container: true, alignItems: "stretch", direction: "row", wrap: "nowrap", className: "pl-6", children: [_jsx(Grid, { item: true, className: "pl-3 pr-3", children: _jsx(Swath, { className: "w-1 h-full" }) }), _jsxs(Grid, { container: true, direction: "row", alignItems: "center", children: [_jsx(Grid, { item: true, className: "pr-2", children: shouldBeSelected({
                                                        srcId: source.id,
                                                        sources: sources,
                                                        isHarvested: isHarvested,
                                                    }) ? (_jsx(CheckBoxIcon, {})) : (_jsx(CheckBoxOutlineBlankIcon, {})) }), _jsx(Grid, { item: true, children: _jsx("div", { className: source.available
                                                            ? 'Mui-text-text-primary'
                                                            : 'Mui-text-warning', children: source.id }) }), _jsx(Grid, { item: true, className: "pl-2", children: source.available ? null : _jsx(WarningIcon, {}) })] })] }) }, source.id));
                        })
                        : null] })] }));
};
export default SourceSelector;
//# sourceMappingURL=data:application/json;base64,