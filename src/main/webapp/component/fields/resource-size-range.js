import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import { ResourceSizeRangeFilterClass, sizeUnits, isResourceSizeRangeFilterClass, } from '../filter-builder/filter.structure';
import { EnterKeySubmitProps } from '../custom-events/enter-key-submit';
import { NumberField } from './number';
import Autocomplete from '@mui/material/Autocomplete';
import TextField from '@mui/material/TextField';
import LinearProgress from '@mui/material/LinearProgress';
var defaultValue = {
    start: 0,
    end: 1,
    startUnits: 'B',
    endUnits: 'B',
};
function castAndParseFilterValue(value) {
    var castedValue = value;
    try {
        return {
            start: castAndParseValue(castedValue.start, defaultValue.start),
            end: castAndParseValue(castedValue.end, defaultValue.end),
        };
    }
    catch (e) {
        return {
            start: defaultValue.start,
            end: defaultValue.end,
        };
    }
}
function parseFilterContext(context) {
    var castedContext = context;
    try {
        return {
            startUnits: castAndParseUnit(castedContext.startUnits, defaultValue.startUnits),
            endUnits: castAndParseUnit(castedContext.endUnits, defaultValue.endUnits),
        };
    }
    catch (e) {
        return {
            startUnits: defaultValue.startUnits,
            endUnits: defaultValue.endUnits,
        };
    }
}
export function castAndParseValue(value, defaultValue) {
    try {
        var castedValue = value;
        if (typeof castedValue === 'number' && !isNaN(castedValue)) {
            return castedValue;
        }
    }
    catch (e) {
        // If casting fails, fall through to default
    }
    return defaultValue;
}
export function castAndParseUnit(unit, defaultValue) {
    try {
        var castedUnit = unit;
        if (sizeUnits.includes(castedUnit)) {
            return castedUnit;
        }
    }
    catch (e) {
        // If casting fails, fall through to default
    }
    return defaultValue;
}
function parseFilter(props) {
    var filter = props.filter;
    var newValue = castAndParseFilterValue(filter.value);
    var newContext = parseFilterContext(filter.context);
    return new ResourceSizeRangeFilterClass(__assign(__assign({}, filter), { value: {
            start: newValue.start,
            end: newValue.end,
        }, context: {
            startUnits: newContext.startUnits,
            endUnits: newContext.endUnits,
        } }));
}
var ResourceSizeRangeFieldWrapper = function (_a) {
    var filter = _a.filter, setFilter = _a.setFilter;
    React.useEffect(function () {
        var timeoutId = window.setTimeout(function () {
            if (!isResourceSizeRangeFilterClass(filter)) {
                setFilter(parseFilter({ filter: filter, setFilter: setFilter }));
            }
        }, 250);
        return function () {
            window.clearTimeout(timeoutId);
        };
    }, [filter]);
    if (!isResourceSizeRangeFilterClass(filter)) {
        return _jsx(LinearProgress, {});
    }
    return _jsx(ResourceSizeRangeField, { filter: filter, setFilter: setFilter });
};
var ResourceSizeRangeField = function (_a) {
    var filter = _a.filter, setFilter = _a.setFilter;
    return (_jsxs("div", { className: "flex flex-col space-y-4", children: [_jsxs("div", { className: "flex flex-row items-start", children: [_jsx(NumberField, __assign({ value: filter.value.start.toString(), TextFieldProps: { label: 'From' }, type: "float", onChange: function (val) {
                            setFilter(new ResourceSizeRangeFilterClass(__assign(__assign({}, filter), { value: { start: val, end: filter.value.end } })));
                        } }, EnterKeySubmitProps)), _jsx(Autocomplete, { value: filter.context.startUnits, onChange: function (_, newValue) {
                            return setFilter(new ResourceSizeRangeFilterClass(__assign(__assign({}, filter), { context: {
                                    startUnits: newValue || 'B',
                                    endUnits: filter.context.endUnits,
                                } })));
                        }, className: "min-w-24 ml-2", options: sizeUnits, renderInput: function (params) { return _jsx(TextField, __assign({}, params, { size: "small" })); }, fullWidth: true })] }), _jsxs("div", { className: "flex flex-row items-start", children: [_jsx(NumberField, __assign({ value: filter.value.end.toString(), TextFieldProps: { label: 'To' }, type: "float", onChange: function (val) {
                            setFilter(new ResourceSizeRangeFilterClass(__assign(__assign({}, filter), { value: { start: filter.value.start, end: val } })));
                        } }, EnterKeySubmitProps)), _jsx(Autocomplete, { value: filter.context.endUnits, className: "min-w-24 ml-2", onChange: function (_, newValue) {
                            setFilter(new ResourceSizeRangeFilterClass(__assign(__assign({}, filter), { context: {
                                    startUnits: filter.context.startUnits,
                                    endUnits: newValue || 'B',
                                } })));
                        }, options: sizeUnits, renderInput: function (params) { return _jsx(TextField, __assign({}, params, { size: "small" })); }, fullWidth: true })] })] }));
};
export { ResourceSizeRangeFieldWrapper as ResourceSizeRangeField };
//# sourceMappingURL=data:application/json;base64,