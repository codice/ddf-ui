import { __assign } from "tslib";
import * as React from 'react';
import Grid from '@mui/material/Grid';
import TextField from '@mui/material/TextField';
import MenuItem from '@mui/material/MenuItem';
import { NumberField } from './number';
var defaultValue = {
    last: '1',
    unit: 'm',
};
var validateShape = function (_a) {
    var value = _a.value, onChange = _a.onChange;
    if (isInvalid({ value: value, onChange: onChange })) {
        onChange(defaultValue);
    }
};
var isInvalid = function (_a) {
    var value = _a.value;
    return value.last === undefined || value.unit === undefined;
};
export var DateRelativeField = function (_a) {
    var value = _a.value, onChange = _a.onChange;
    var validValue = __assign(__assign({}, defaultValue), value);
    React.useEffect(function () {
        validateShape({ value: value, onChange: onChange });
    }, []);
    if (isInvalid({ value: value, onChange: onChange })) {
        // for most cases it doesn't matter if we render with invalid, but the select will immediately cause onChange which has some weird side effects
        return null;
    }
    return (React.createElement(Grid, { container: true, direction: "row", className: "w-full" },
        React.createElement(Grid, { item: true, xs: 4 },
            React.createElement(NumberField, { type: "float", onChange: function (val) {
                    if (onChange)
                        onChange(__assign(__assign({}, validValue), { last: val.toString() }));
                }, validation: function (val) { return val > 0; }, validationText: "Must be greater than 0, using previous value of ", value: validValue.last })),
        React.createElement(Grid, { item: true, xs: 8, className: "pl-2" },
            React.createElement(TextField, { fullWidth: true, variant: "outlined", select: true, onChange: function (e) {
                    if (onChange)
                        onChange(__assign(__assign({}, validValue), { unit: e.target.value }));
                }, size: "small", value: validValue.unit },
                React.createElement(MenuItem, { value: "s" }, "Seconds"),
                React.createElement(MenuItem, { value: "m" }, "Minutes"),
                React.createElement(MenuItem, { value: "h" }, "Hours"),
                React.createElement(MenuItem, { value: "d" }, "Days"),
                React.createElement(MenuItem, { value: "w" }, "Weeks"),
                React.createElement(MenuItem, { value: "M" }, "Months"),
                React.createElement(MenuItem, { value: "y" }, "Years")))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yZWxhdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvZmllbGRzL2RhdGUtcmVsYXRpdmUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUM5QixPQUFPLElBQUksTUFBTSxvQkFBb0IsQ0FBQTtBQUNyQyxPQUFPLFNBQVMsTUFBTSx5QkFBeUIsQ0FBQTtBQUMvQyxPQUFPLFFBQVEsTUFBTSx3QkFBd0IsQ0FBQTtBQUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBUXRDLElBQU0sWUFBWSxHQUFHO0lBQ25CLElBQUksRUFBRSxHQUFHO0lBQ1QsSUFBSSxFQUFFLEdBQUc7Q0FDZ0IsQ0FBQTtBQUUzQixJQUFNLGFBQWEsR0FBRyxVQUFDLEVBQTBCO1FBQXhCLEtBQUssV0FBQSxFQUFFLFFBQVEsY0FBQTtJQUN0QyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUMsRUFBRTtRQUNsQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7S0FDdkI7QUFDSCxDQUFDLENBQUE7QUFFRCxJQUFNLFNBQVMsR0FBRyxVQUFDLEVBQWdCO1FBQWQsS0FBSyxXQUFBO0lBQ3hCLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUE7QUFDN0QsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBQUcsVUFBQyxFQUEwQjtRQUF4QixLQUFLLFdBQUEsRUFBRSxRQUFRLGNBQUE7SUFDakQsSUFBTSxVQUFVLHlCQUNYLFlBQVksR0FDWixLQUFLLENBQ1QsQ0FBQTtJQUNELEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDZCxhQUFhLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDLENBQUE7SUFDcEMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ04sSUFBSSxTQUFTLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDLEVBQUU7UUFDbEMsK0lBQStJO1FBQy9JLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFDRCxPQUFPLENBQ0wsb0JBQUMsSUFBSSxJQUFDLFNBQVMsUUFBQyxTQUFTLEVBQUMsS0FBSyxFQUFDLFNBQVMsRUFBQyxRQUFRO1FBQ2hELG9CQUFDLElBQUksSUFBQyxJQUFJLFFBQUMsRUFBRSxFQUFFLENBQUM7WUFDZCxvQkFBQyxXQUFXLElBQ1YsSUFBSSxFQUFDLE9BQU8sRUFDWixRQUFRLEVBQUUsVUFBQyxHQUFHO29CQUNaLElBQUksUUFBUTt3QkFDVixRQUFRLHVCQUNILFVBQVUsS0FDYixJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUNwQixDQUFBO2dCQUNOLENBQUMsRUFDRCxVQUFVLEVBQUUsVUFBQyxHQUFHLElBQUssT0FBQSxHQUFHLEdBQUcsQ0FBQyxFQUFQLENBQU8sRUFDNUIsY0FBYyxFQUFDLGtEQUFrRCxFQUNqRSxLQUFLLEVBQUUsVUFBVSxDQUFDLElBQUksR0FDdEIsQ0FDRztRQUNQLG9CQUFDLElBQUksSUFBQyxJQUFJLFFBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUMsTUFBTTtZQUNoQyxvQkFBQyxTQUFTLElBQ1IsU0FBUyxRQUNULE9BQU8sRUFBQyxVQUFVLEVBQ2xCLE1BQU0sUUFDTixRQUFRLEVBQUUsVUFBQyxDQUFDO29CQUNWLElBQUksUUFBUTt3QkFDVixRQUFRLHVCQUNILFVBQVUsS0FDYixJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUF1QyxJQUN0RCxDQUFBO2dCQUNOLENBQUMsRUFDRCxJQUFJLEVBQUMsT0FBTyxFQUNaLEtBQUssRUFBRSxVQUFVLENBQUMsSUFBSTtnQkFFdEIsb0JBQUMsUUFBUSxJQUFDLEtBQUssRUFBQyxHQUFHLGNBQW1CO2dCQUN0QyxvQkFBQyxRQUFRLElBQUMsS0FBSyxFQUFDLEdBQUcsY0FBbUI7Z0JBQ3RDLG9CQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUMsR0FBRyxZQUFpQjtnQkFDcEMsb0JBQUMsUUFBUSxJQUFDLEtBQUssRUFBQyxHQUFHLFdBQWdCO2dCQUNuQyxvQkFBQyxRQUFRLElBQUMsS0FBSyxFQUFDLEdBQUcsWUFBaUI7Z0JBQ3BDLG9CQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUMsR0FBRyxhQUFrQjtnQkFDckMsb0JBQUMsUUFBUSxJQUFDLEtBQUssRUFBQyxHQUFHLFlBQWlCLENBQzFCLENBQ1AsQ0FDRixDQUNSLENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBHcmlkIGZyb20gJ0BtdWkvbWF0ZXJpYWwvR3JpZCdcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnQG11aS9tYXRlcmlhbC9UZXh0RmllbGQnXG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnQG11aS9tYXRlcmlhbC9NZW51SXRlbSdcbmltcG9ydCB7IE51bWJlckZpZWxkIH0gZnJvbSAnLi9udW1iZXInXG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vZmlsdGVyLWJ1aWxkZXIvZmlsdGVyLnN0cnVjdHVyZSdcblxudHlwZSBQcm9wcyA9IHtcbiAgdmFsdWU6IFZhbHVlVHlwZXNbJ3JlbGF0aXZlJ11cbiAgb25DaGFuZ2U6ICh2YWw6IFZhbHVlVHlwZXNbJ3JlbGF0aXZlJ10pID0+IHZvaWRcbn1cblxuY29uc3QgZGVmYXVsdFZhbHVlID0ge1xuICBsYXN0OiAnMScsXG4gIHVuaXQ6ICdtJyxcbn0gYXMgVmFsdWVUeXBlc1sncmVsYXRpdmUnXVxuXG5jb25zdCB2YWxpZGF0ZVNoYXBlID0gKHsgdmFsdWUsIG9uQ2hhbmdlIH06IFByb3BzKSA9PiB7XG4gIGlmIChpc0ludmFsaWQoeyB2YWx1ZSwgb25DaGFuZ2UgfSkpIHtcbiAgICBvbkNoYW5nZShkZWZhdWx0VmFsdWUpXG4gIH1cbn1cblxuY29uc3QgaXNJbnZhbGlkID0gKHsgdmFsdWUgfTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIHZhbHVlLmxhc3QgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZS51bml0ID09PSB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGNvbnN0IERhdGVSZWxhdGl2ZUZpZWxkID0gKHsgdmFsdWUsIG9uQ2hhbmdlIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHZhbGlkVmFsdWUgPSB7XG4gICAgLi4uZGVmYXVsdFZhbHVlLFxuICAgIC4uLnZhbHVlLFxuICB9XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdmFsaWRhdGVTaGFwZSh7IHZhbHVlLCBvbkNoYW5nZSB9KVxuICB9LCBbXSlcbiAgaWYgKGlzSW52YWxpZCh7IHZhbHVlLCBvbkNoYW5nZSB9KSkge1xuICAgIC8vIGZvciBtb3N0IGNhc2VzIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHdlIHJlbmRlciB3aXRoIGludmFsaWQsIGJ1dCB0aGUgc2VsZWN0IHdpbGwgaW1tZWRpYXRlbHkgY2F1c2Ugb25DaGFuZ2Ugd2hpY2ggaGFzIHNvbWUgd2VpcmQgc2lkZSBlZmZlY3RzXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICByZXR1cm4gKFxuICAgIDxHcmlkIGNvbnRhaW5lciBkaXJlY3Rpb249XCJyb3dcIiBjbGFzc05hbWU9XCJ3LWZ1bGxcIj5cbiAgICAgIDxHcmlkIGl0ZW0geHM9ezR9PlxuICAgICAgICA8TnVtYmVyRmllbGRcbiAgICAgICAgICB0eXBlPVwiZmxvYXRcIlxuICAgICAgICAgIG9uQ2hhbmdlPXsodmFsKSA9PiB7XG4gICAgICAgICAgICBpZiAob25DaGFuZ2UpXG4gICAgICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAuLi52YWxpZFZhbHVlLFxuICAgICAgICAgICAgICAgIGxhc3Q6IHZhbC50b1N0cmluZygpLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgIH19XG4gICAgICAgICAgdmFsaWRhdGlvbj17KHZhbCkgPT4gdmFsID4gMH1cbiAgICAgICAgICB2YWxpZGF0aW9uVGV4dD1cIk11c3QgYmUgZ3JlYXRlciB0aGFuIDAsIHVzaW5nIHByZXZpb3VzIHZhbHVlIG9mIFwiXG4gICAgICAgICAgdmFsdWU9e3ZhbGlkVmFsdWUubGFzdH1cbiAgICAgICAgLz5cbiAgICAgIDwvR3JpZD5cbiAgICAgIDxHcmlkIGl0ZW0geHM9ezh9IGNsYXNzTmFtZT1cInBsLTJcIj5cbiAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgc2VsZWN0XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICBpZiAob25DaGFuZ2UpXG4gICAgICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAuLi52YWxpZFZhbHVlLFxuICAgICAgICAgICAgICAgIHVuaXQ6IGUudGFyZ2V0LnZhbHVlIGFzIFZhbHVlVHlwZXNbJ3JlbGF0aXZlJ11bJ3VuaXQnXSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICB9fVxuICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgdmFsdWU9e3ZhbGlkVmFsdWUudW5pdH1cbiAgICAgICAgPlxuICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT1cInNcIj5TZWNvbmRzPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJtXCI+TWludXRlczwvTWVudUl0ZW0+XG4gICAgICAgICAgPE1lbnVJdGVtIHZhbHVlPVwiaFwiPkhvdXJzPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJkXCI+RGF5czwvTWVudUl0ZW0+XG4gICAgICAgICAgPE1lbnVJdGVtIHZhbHVlPVwid1wiPldlZWtzPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJNXCI+TW9udGhzPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJ5XCI+WWVhcnM8L01lbnVJdGVtPlxuICAgICAgICA8L1RleHRGaWVsZD5cbiAgICAgIDwvR3JpZD5cbiAgICA8L0dyaWQ+XG4gIClcbn1cbiJdfQ==