import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import Grid from '@mui/material/Grid';
import TextField from '@mui/material/TextField';
import MenuItem from '@mui/material/MenuItem';
import { NumberField } from './number';
var defaultValue = {
    last: '1',
    unit: 'm',
};
var validateShape = function (_a) {
    var value = _a.value, onChange = _a.onChange;
    if (isInvalid({ value: value, onChange: onChange })) {
        onChange(defaultValue);
    }
};
var isInvalid = function (_a) {
    var value = _a.value;
    return value.last === undefined || value.unit === undefined;
};
export var DateRelativeField = function (_a) {
    var value = _a.value, onChange = _a.onChange;
    var validValue = __assign(__assign({}, defaultValue), value);
    React.useEffect(function () {
        validateShape({ value: value, onChange: onChange });
    }, []);
    if (isInvalid({ value: value, onChange: onChange })) {
        // for most cases it doesn't matter if we render with invalid, but the select will immediately cause onChange which has some weird side effects
        return null;
    }
    return (_jsxs(Grid, { container: true, direction: "row", className: "w-full", children: [_jsx(Grid, { item: true, xs: 4, children: _jsx(NumberField, { type: "float", onChange: function (val) {
                        if (onChange)
                            onChange(__assign(__assign({}, validValue), { last: val.toString() }));
                    }, validation: function (val) { return val > 0; }, validationText: "Must be greater than 0, using previous value of ", value: validValue.last }) }), _jsx(Grid, { item: true, xs: 8, className: "pl-2", children: _jsxs(TextField, { fullWidth: true, variant: "outlined", select: true, onChange: function (e) {
                        if (onChange)
                            onChange(__assign(__assign({}, validValue), { unit: e.target.value }));
                    }, size: "small", value: validValue.unit, children: [_jsx(MenuItem, { value: "s", children: "Seconds" }), _jsx(MenuItem, { value: "m", children: "Minutes" }), _jsx(MenuItem, { value: "h", children: "Hours" }), _jsx(MenuItem, { value: "d", children: "Days" }), _jsx(MenuItem, { value: "w", children: "Weeks" }), _jsx(MenuItem, { value: "M", children: "Months" }), _jsx(MenuItem, { value: "y", children: "Years" })] }) })] }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yZWxhdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvZmllbGRzL2RhdGUtcmVsYXRpdmUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxJQUFJLE1BQU0sb0JBQW9CLENBQUE7QUFDckMsT0FBTyxTQUFTLE1BQU0seUJBQXlCLENBQUE7QUFDL0MsT0FBTyxRQUFRLE1BQU0sd0JBQXdCLENBQUE7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQVF0QyxJQUFNLFlBQVksR0FBRztJQUNuQixJQUFJLEVBQUUsR0FBRztJQUNULElBQUksRUFBRSxHQUFHO0NBQ2dCLENBQUE7QUFFM0IsSUFBTSxhQUFhLEdBQUcsVUFBQyxFQUEwQjtRQUF4QixLQUFLLFdBQUEsRUFBRSxRQUFRLGNBQUE7SUFDdEMsSUFBSSxTQUFTLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNuQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDeEIsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUVELElBQU0sU0FBUyxHQUFHLFVBQUMsRUFBZ0I7UUFBZCxLQUFLLFdBQUE7SUFDeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQTtBQUM3RCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxVQUFDLEVBQTBCO1FBQXhCLEtBQUssV0FBQSxFQUFFLFFBQVEsY0FBQTtJQUNqRCxJQUFNLFVBQVUseUJBQ1gsWUFBWSxHQUNaLEtBQUssQ0FDVCxDQUFBO0lBQ0QsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNkLGFBQWEsQ0FBQyxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUMsQ0FBQTtJQUNwQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDTixJQUFJLFNBQVMsQ0FBQyxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ25DLCtJQUErSTtRQUMvSSxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFDRCxPQUFPLENBQ0wsTUFBQyxJQUFJLElBQUMsU0FBUyxRQUFDLFNBQVMsRUFBQyxLQUFLLEVBQUMsU0FBUyxFQUFDLFFBQVEsYUFDaEQsS0FBQyxJQUFJLElBQUMsSUFBSSxRQUFDLEVBQUUsRUFBRSxDQUFDLFlBQ2QsS0FBQyxXQUFXLElBQ1YsSUFBSSxFQUFDLE9BQU8sRUFDWixRQUFRLEVBQUUsVUFBQyxHQUFHO3dCQUNaLElBQUksUUFBUTs0QkFDVixRQUFRLHVCQUNILFVBQVUsS0FDYixJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUNwQixDQUFBO29CQUNOLENBQUMsRUFDRCxVQUFVLEVBQUUsVUFBQyxHQUFHLElBQUssT0FBQSxHQUFHLEdBQUcsQ0FBQyxFQUFQLENBQU8sRUFDNUIsY0FBYyxFQUFDLGtEQUFrRCxFQUNqRSxLQUFLLEVBQUUsVUFBVSxDQUFDLElBQUksR0FDdEIsR0FDRyxFQUNQLEtBQUMsSUFBSSxJQUFDLElBQUksUUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBQyxNQUFNLFlBQ2hDLE1BQUMsU0FBUyxJQUNSLFNBQVMsUUFDVCxPQUFPLEVBQUMsVUFBVSxFQUNsQixNQUFNLFFBQ04sUUFBUSxFQUFFLFVBQUMsQ0FBQzt3QkFDVixJQUFJLFFBQVE7NEJBQ1YsUUFBUSx1QkFDSCxVQUFVLEtBQ2IsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBdUMsSUFDdEQsQ0FBQTtvQkFDTixDQUFDLEVBQ0QsSUFBSSxFQUFDLE9BQU8sRUFDWixLQUFLLEVBQUUsVUFBVSxDQUFDLElBQUksYUFFdEIsS0FBQyxRQUFRLElBQUMsS0FBSyxFQUFDLEdBQUcsd0JBQW1CLEVBQ3RDLEtBQUMsUUFBUSxJQUFDLEtBQUssRUFBQyxHQUFHLHdCQUFtQixFQUN0QyxLQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUMsR0FBRyxzQkFBaUIsRUFDcEMsS0FBQyxRQUFRLElBQUMsS0FBSyxFQUFDLEdBQUcscUJBQWdCLEVBQ25DLEtBQUMsUUFBUSxJQUFDLEtBQUssRUFBQyxHQUFHLHNCQUFpQixFQUNwQyxLQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUMsR0FBRyx1QkFBa0IsRUFDckMsS0FBQyxRQUFRLElBQUMsS0FBSyxFQUFDLEdBQUcsc0JBQWlCLElBQzFCLEdBQ1AsSUFDRixDQUNSLENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBHcmlkIGZyb20gJ0BtdWkvbWF0ZXJpYWwvR3JpZCdcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnQG11aS9tYXRlcmlhbC9UZXh0RmllbGQnXG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnQG11aS9tYXRlcmlhbC9NZW51SXRlbSdcbmltcG9ydCB7IE51bWJlckZpZWxkIH0gZnJvbSAnLi9udW1iZXInXG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vZmlsdGVyLWJ1aWxkZXIvZmlsdGVyLnN0cnVjdHVyZSdcblxudHlwZSBQcm9wcyA9IHtcbiAgdmFsdWU6IFZhbHVlVHlwZXNbJ3JlbGF0aXZlJ11cbiAgb25DaGFuZ2U6ICh2YWw6IFZhbHVlVHlwZXNbJ3JlbGF0aXZlJ10pID0+IHZvaWRcbn1cblxuY29uc3QgZGVmYXVsdFZhbHVlID0ge1xuICBsYXN0OiAnMScsXG4gIHVuaXQ6ICdtJyxcbn0gYXMgVmFsdWVUeXBlc1sncmVsYXRpdmUnXVxuXG5jb25zdCB2YWxpZGF0ZVNoYXBlID0gKHsgdmFsdWUsIG9uQ2hhbmdlIH06IFByb3BzKSA9PiB7XG4gIGlmIChpc0ludmFsaWQoeyB2YWx1ZSwgb25DaGFuZ2UgfSkpIHtcbiAgICBvbkNoYW5nZShkZWZhdWx0VmFsdWUpXG4gIH1cbn1cblxuY29uc3QgaXNJbnZhbGlkID0gKHsgdmFsdWUgfTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIHZhbHVlLmxhc3QgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZS51bml0ID09PSB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGNvbnN0IERhdGVSZWxhdGl2ZUZpZWxkID0gKHsgdmFsdWUsIG9uQ2hhbmdlIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHZhbGlkVmFsdWUgPSB7XG4gICAgLi4uZGVmYXVsdFZhbHVlLFxuICAgIC4uLnZhbHVlLFxuICB9XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdmFsaWRhdGVTaGFwZSh7IHZhbHVlLCBvbkNoYW5nZSB9KVxuICB9LCBbXSlcbiAgaWYgKGlzSW52YWxpZCh7IHZhbHVlLCBvbkNoYW5nZSB9KSkge1xuICAgIC8vIGZvciBtb3N0IGNhc2VzIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHdlIHJlbmRlciB3aXRoIGludmFsaWQsIGJ1dCB0aGUgc2VsZWN0IHdpbGwgaW1tZWRpYXRlbHkgY2F1c2Ugb25DaGFuZ2Ugd2hpY2ggaGFzIHNvbWUgd2VpcmQgc2lkZSBlZmZlY3RzXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICByZXR1cm4gKFxuICAgIDxHcmlkIGNvbnRhaW5lciBkaXJlY3Rpb249XCJyb3dcIiBjbGFzc05hbWU9XCJ3LWZ1bGxcIj5cbiAgICAgIDxHcmlkIGl0ZW0geHM9ezR9PlxuICAgICAgICA8TnVtYmVyRmllbGRcbiAgICAgICAgICB0eXBlPVwiZmxvYXRcIlxuICAgICAgICAgIG9uQ2hhbmdlPXsodmFsKSA9PiB7XG4gICAgICAgICAgICBpZiAob25DaGFuZ2UpXG4gICAgICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAuLi52YWxpZFZhbHVlLFxuICAgICAgICAgICAgICAgIGxhc3Q6IHZhbC50b1N0cmluZygpLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgIH19XG4gICAgICAgICAgdmFsaWRhdGlvbj17KHZhbCkgPT4gdmFsID4gMH1cbiAgICAgICAgICB2YWxpZGF0aW9uVGV4dD1cIk11c3QgYmUgZ3JlYXRlciB0aGFuIDAsIHVzaW5nIHByZXZpb3VzIHZhbHVlIG9mIFwiXG4gICAgICAgICAgdmFsdWU9e3ZhbGlkVmFsdWUubGFzdH1cbiAgICAgICAgLz5cbiAgICAgIDwvR3JpZD5cbiAgICAgIDxHcmlkIGl0ZW0geHM9ezh9IGNsYXNzTmFtZT1cInBsLTJcIj5cbiAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgc2VsZWN0XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICBpZiAob25DaGFuZ2UpXG4gICAgICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAuLi52YWxpZFZhbHVlLFxuICAgICAgICAgICAgICAgIHVuaXQ6IGUudGFyZ2V0LnZhbHVlIGFzIFZhbHVlVHlwZXNbJ3JlbGF0aXZlJ11bJ3VuaXQnXSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICB9fVxuICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgdmFsdWU9e3ZhbGlkVmFsdWUudW5pdH1cbiAgICAgICAgPlxuICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT1cInNcIj5TZWNvbmRzPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJtXCI+TWludXRlczwvTWVudUl0ZW0+XG4gICAgICAgICAgPE1lbnVJdGVtIHZhbHVlPVwiaFwiPkhvdXJzPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJkXCI+RGF5czwvTWVudUl0ZW0+XG4gICAgICAgICAgPE1lbnVJdGVtIHZhbHVlPVwid1wiPldlZWtzPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJNXCI+TW9udGhzPC9NZW51SXRlbT5cbiAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9XCJ5XCI+WWVhcnM8L01lbnVJdGVtPlxuICAgICAgICA8L1RleHRGaWVsZD5cbiAgICAgIDwvR3JpZD5cbiAgICA8L0dyaWQ+XG4gIClcbn1cbiJdfQ==