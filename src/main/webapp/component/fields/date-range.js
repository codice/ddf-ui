import { __assign, __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import { DateRangeInput } from '@blueprintjs/datetime';
import { DateHelpers, DefaultMaxDate, DefaultMinDate } from './date-helpers';
import { MuiOutlinedInputBorderClasses } from '../theme/theme';
import useTimePrefs from './useTimePrefs';
import user from '../singletons/user-instance';
import { EnterKeySubmitProps } from '../custom-events/enter-key-submit';
import FormHelperText from '@mui/material/FormHelperText';
import LinearProgress from '@mui/material/LinearProgress';
export function defaultValue() {
    var end = DateHelpers.General.withPrecision(new Date());
    var start = DateHelpers.General.withPrecision(new Date(end.valueOf() - 86400000)); // start and end can't be equal or the backend will throw a fit
    return {
        start: start.toISOString(),
        end: end.toISOString(),
    };
}
/**
 *  Used in the below components to test values for validity and to provide a message to the user if they are invalid.
 */
function isValidValue(value) {
    if (value && value.start && value.end) {
        // end has to be after start too, so convert from iso and check
        var startDate = new Date(value.start);
        var endDate = new Date(value.end);
        return {
            valid: startDate < endDate,
            message: 'Start date must be before end date, using previous valid values:',
        };
    }
    else {
        return {
            valid: false,
            message: 'Start and end date must be set, using previous valid values:',
        };
    }
}
/**
 *  There are two things to check before passing values upwards to parent components through the onChange.
 *  1.  Start and end date need to be valid dates.
 *  2.  Start date must be before end date. (cannot be equal either)
 *
 *  Given those possibilities, we can construct a message to try and prod the user as to why a value is invalid.
 */
function useLocalValue(_a) {
    var value = _a.value, onChange = _a.onChange;
    var _b = __read(React.useState(value), 2), localValue = _b[0], setLocalValue = _b[1]; // since we don't get here with an invalid value, we can just set it to the value
    var _c = __read(React.useState(false), 2), hasValidationIssues = _c[0], setHasValidationIssues = _c[1];
    var _d = __read(React.useState(null), 2), constructedValidationText = _d[0], setConstructedValidationText = _d[1];
    React.useEffect(function () {
        var validity = isValidValue(localValue);
        if (onChange && validity.valid) {
            setHasValidationIssues(false);
            setConstructedValidationText('');
            if (value !== localValue)
                onChange(localValue);
        }
        else {
            setConstructedValidationText(_jsxs(_Fragment, { children: [_jsx("div", { children: validity.message }), _jsxs("div", { children: ["start: ", value.start] }), _jsxs("div", { children: ["end: ", value.end] })] }));
            setHasValidationIssues(true);
        }
    }, [localValue, value]);
    return {
        localValue: localValue,
        setLocalValue: setLocalValue,
        hasValidationIssues: hasValidationIssues,
        constructedValidationText: constructedValidationText,
    };
}
/**
 *  If the initial value is invalid, we immediately call the onChange to make sure we start with a valid value.
 */
function useInitialValueValidation(_a) {
    var value = _a.value, onChange = _a.onChange;
    React.useEffect(function () {
        if (!isValidValue(value).valid) {
            onChange(defaultValue());
        }
    }, []);
}
/**
 *  This component will always have a valid value (start and end date set and start < end), and onChange will never get an invalid value
 */
var DateRangeFieldWithoutInitialValidation = React.forwardRef(function (_a, ref) {
    var value = _a.value, onChange = _a.onChange, BPDateRangeProps = _a.BPDateRangeProps;
    var _b = useLocalValue({ value: value, onChange: onChange }), localValue = _b.localValue, setLocalValue = _b.setLocalValue, hasValidationIssues = _b.hasValidationIssues, constructedValidationText = _b.constructedValidationText;
    useTimePrefs(function () {
        var shiftedDates = DateHelpers.Blueprint.DateRangeProps.generateValue(value); // as said above, this will always be valid, so no need to fret on converting
        setLocalValue({
            start: DateHelpers.Blueprint.converters
                .UntimeshiftFromDatePicker(shiftedDates[0])
                .toISOString(),
            end: DateHelpers.Blueprint.converters
                .UntimeshiftFromDatePicker(shiftedDates[1])
                .toISOString(),
        });
    });
    return (_jsxs(_Fragment, { children: [_jsx(DateRangeInput, __assign({ ref: ref, timePickerProps: {
                    useAmPm: user.getAmPmDisplay(),
                }, allowSingleDayRange: true, minDate: DefaultMinDate, maxDate: DefaultMaxDate, endInputProps: __assign({ fill: true, className: MuiOutlinedInputBorderClasses }, EnterKeySubmitProps), startInputProps: __assign({ fill: true, className: MuiOutlinedInputBorderClasses }, EnterKeySubmitProps), className: "where", closeOnSelection: false, formatDate: DateHelpers.Blueprint.commonProps.formatDate, onChange: DateHelpers.Blueprint.DateRangeProps.generateOnChange(function (value) {
                    setLocalValue(value);
                }), popoverProps: {
                    boundary: 'viewport',
                    position: 'bottom',
                }, parseDate: DateHelpers.Blueprint.commonProps.parseDate, shortcuts: true, timePrecision: DateHelpers.General.getTimePrecision(), placeholder: DateHelpers.General.getDateFormat(), value: DateHelpers.Blueprint.DateRangeProps.generateValue(localValue) }, BPDateRangeProps)), hasValidationIssues ? (_jsx(_Fragment, { children: _jsx(FormHelperText, { className: "px-2 Mui-text-error", children: constructedValidationText }) })) : null] }));
});
/**
 *  By updating invalid starting values before we go into the above component, we can make sure we always have a valid value to fall back to.
 */
export var DateRangeField = React.forwardRef(function (_a, ref) {
    var value = _a.value, onChange = _a.onChange, BPDateRangeProps = _a.BPDateRangeProps;
    useInitialValueValidation({ value: value, onChange: onChange, BPDateRangeProps: BPDateRangeProps });
    var valueValidity = isValidValue(value);
    if (!valueValidity.valid) {
        return _jsx(LinearProgress, { className: "w-full h-2" });
    }
    return (_jsx(DateRangeFieldWithoutInitialValidation, { ref: ref, value: value, onChange: onChange, BPDateRangeProps: BPDateRangeProps }));
});
//# sourceMappingURL=data:application/json;base64,