import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import { DateInput } from '@blueprintjs/datetime';
import { DateHelpers, DefaultMaxDate, DefaultMinDate } from './date-helpers';
import { MuiOutlinedInputBorderClasses } from '../theme/theme';
import useTimePrefs from './useTimePrefs';
import Grid from '@mui/material/Grid/Grid';
import { NumberField } from './number';
import TextField from '@mui/material/TextField/TextField';
import MenuItem from '@mui/material/MenuItem/MenuItem';
import user from '../singletons/user-instance';
import { EnterKeySubmitProps } from '../custom-events/enter-key-submit';
var defaultValue = function () {
    return {
        date: new Date().toISOString(),
        buffer: {
            amount: '1',
            unit: 'd',
        },
        direction: 'both',
    };
};
var validateDate = function (_a) {
    var value = _a.value, onChange = _a.onChange;
    if (!value.date ||
        !value.buffer ||
        !value.direction ||
        DateHelpers.Blueprint.commonProps.parseDate(value.date) === null) {
        var newDate = DateHelpers.General.withPrecision(new Date());
        onChange(__assign(__assign({}, defaultValue()), { date: newDate.toISOString() }));
    }
};
export var DateAroundField = function (_a) {
    var value = _a.value, onChange = _a.onChange;
    var validValue = __assign(__assign({}, defaultValue()), value);
    var blueprintDateRef = React.useRef(null);
    useTimePrefs(function () {
        var shiftedDate = DateHelpers.Blueprint.DateProps.generateValue(value.date);
        var unshiftedDate = DateHelpers.Blueprint.converters.UntimeshiftFromDatePicker(shiftedDate);
        onChange(__assign(__assign({}, validValue), { date: unshiftedDate.toISOString() }));
    });
    React.useEffect(function () {
        validateDate({ onChange: onChange, value: value });
    }, []);
    return (_jsxs(Grid, { container: true, alignItems: "stretch", direction: "column", wrap: "nowrap", children: [_jsx(Grid, { item: true, className: "w-full pb-2", children: _jsx(DateInput, { ref: blueprintDateRef, timePickerProps: {
                        useAmPm: user.getAmPmDisplay(),
                    }, className: MuiOutlinedInputBorderClasses, minDate: DefaultMinDate, maxDate: DefaultMaxDate, closeOnSelection: false, fill: true, formatDate: DateHelpers.Blueprint.commonProps.formatDate, onChange: DateHelpers.Blueprint.DateProps.generateOnChange(function (date) {
                        onChange(__assign(__assign({}, validValue), { date: date }));
                    }), parseDate: DateHelpers.Blueprint.commonProps.parseDate, placeholder: DateHelpers.General.getDateFormat(), shortcuts: true, timePrecision: DateHelpers.General.getTimePrecision(), inputProps: __assign({}, EnterKeySubmitProps), popoverProps: {
                        boundary: 'viewport',
                        position: 'bottom',
                        onClose: function () {
                            setTimeout(function () {
                                var _a;
                                (_a = blueprintDateRef.current) === null || _a === void 0 ? void 0 : _a.setState({ isOpen: false });
                            }, 0);
                        },
                    }, value: DateHelpers.Blueprint.DateProps.generateValue(validValue.date) }) }), _jsx(Grid, { item: true, className: "w-full pb-2", children: "with buffer of" }), _jsxs(Grid, { container: true, direction: "row", className: "w-full", children: [_jsx(Grid, { item: true, xs: 4, className: "pb-2", children: _jsx(NumberField, { type: "float", onChange: function (val) {
                                if (onChange)
                                    onChange(__assign(__assign({}, validValue), { buffer: __assign(__assign({}, validValue.buffer), { amount: val.toString() }) }));
                            }, validation: function (val) { return val > 0; }, validationText: "Must be greater than 0, using previous value of ", value: validValue.buffer.amount }) }), _jsx(Grid, { item: true, xs: 8, className: "pl-2", children: _jsxs(TextField, { fullWidth: true, variant: "outlined", select: true, onChange: function (e) {
                                if (onChange)
                                    onChange(__assign(__assign({}, validValue), { buffer: __assign(__assign({}, validValue.buffer), { unit: e.target
                                                .value }) }));
                            }, size: "small", value: validValue.buffer.unit, children: [_jsx(MenuItem, { value: "s", children: "Seconds" }), _jsx(MenuItem, { value: "m", children: "Minutes" }), _jsx(MenuItem, { value: "h", children: "Hours" }), _jsx(MenuItem, { value: "d", children: "Days" }), _jsx(MenuItem, { value: "w", children: "Weeks" }), _jsx(MenuItem, { value: "M", children: "Months" }), _jsx(MenuItem, { value: "y", children: "Years" })] }) })] }), _jsxs(TextField, { variant: "outlined", select: true, value: validValue.direction, onChange: function (e) {
                    if (onChange)
                        onChange(__assign(__assign({}, validValue), { direction: e.target.value }));
                }, size: "small", children: [_jsx(MenuItem, { value: "both", children: "Before and After" }), _jsx(MenuItem, { value: "before", children: "Before" }), _jsx(MenuItem, { value: "after", children: "After" })] })] }));
};
//# sourceMappingURL=data:application/json;base64,