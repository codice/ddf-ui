import { __assign } from "tslib";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import { useRef } from 'react';
import { DateInput } from '@blueprintjs/datetime';
import { DateHelpers, DefaultMaxDate, DefaultMinDate, ISO_8601_FORMAT_ZONED, } from './date-helpers';
import { MuiOutlinedInputBorderClasses } from '../theme/theme';
import useTimePrefs from './useTimePrefs';
import user from '../singletons/user-instance';
import { EnterKeySubmitProps } from '../custom-events/enter-key-submit';
import moment from 'moment-timezone';
var validateDate = function (_a) {
    var value = _a.value, onChange = _a.onChange, isNullable = _a.isNullable;
    if (value === null && isNullable)
        return;
    var date = moment(value, ISO_8601_FORMAT_ZONED);
    if (!date.isValid()) {
        var newDate = DateHelpers.General.withPrecision(new Date());
        onChange(newDate.toISOString());
    }
};
export var DateField = function (_a) {
    var value = _a.value, onChange = _a.onChange, BPDateProps = _a.BPDateProps, isNullable = _a.isNullable;
    var blueprintDateRef = useRef(null);
    useTimePrefs(function () {
        var shiftedDate = DateHelpers.Blueprint.DateProps.generateValue(value);
        var unshiftedDate = DateHelpers.Blueprint.converters.UntimeshiftFromDatePicker(shiftedDate);
        onChange(unshiftedDate.toISOString());
    });
    React.useEffect(function () {
        validateDate({ onChange: onChange, value: value, isNullable: isNullable });
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(DateInput, __assign({ ref: blueprintDateRef, className: MuiOutlinedInputBorderClasses, minDate: DefaultMinDate, maxDate: DefaultMaxDate, closeOnSelection: false, fill: true, formatDate: DateHelpers.Blueprint.commonProps.formatDate, onChange: DateHelpers.Blueprint.DateProps.generateOnChange(function (value) {
                onChange(value);
            }), parseDate: DateHelpers.Blueprint.commonProps.parseDate, placeholder: DateHelpers.General.getDateFormat(), shortcuts: true, timePrecision: DateHelpers.General.getTimePrecision(), outOfRangeMessage: "Out of range", timePickerProps: {
                useAmPm: user.getAmPmDisplay(),
            }, inputProps: __assign({}, EnterKeySubmitProps), popoverProps: {
                boundary: 'viewport',
                position: 'bottom',
                onClose: function () {
                    setTimeout(function () {
                        var _a;
                        (_a = blueprintDateRef.current) === null || _a === void 0 ? void 0 : _a.setState({ isOpen: false });
                    }, 0);
                },
            } }, (value
            ? {
                value: DateHelpers.Blueprint.DateProps.generateValue(value),
            }
            : {}), BPDateProps))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvZmllbGRzL2RhdGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQTtBQUM5QixPQUFPLEVBQUUsU0FBUyxFQUFtQixNQUFNLHVCQUF1QixDQUFBO0FBRWxFLE9BQU8sRUFDTCxXQUFXLEVBQ1gsY0FBYyxFQUNkLGNBQWMsRUFDZCxxQkFBcUIsR0FDdEIsTUFBTSxnQkFBZ0IsQ0FBQTtBQUN2QixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUM5RCxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQTtBQUV6QyxPQUFPLElBQUksTUFBTSw2QkFBNkIsQ0FBQTtBQUM5QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQTtBQUV2RSxPQUFPLE1BQU0sTUFBTSxpQkFBaUIsQ0FBQTtBQVlwQyxJQUFNLFlBQVksR0FBRyxVQUFDLEVBQStDO1FBQTdDLEtBQUssV0FBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLFVBQVUsZ0JBQUE7SUFDakQsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLFVBQVU7UUFBRSxPQUFNO0lBRXhDLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUscUJBQXFCLENBQUMsQ0FBQTtJQUNqRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ25CLElBQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUM3RCxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7S0FDaEM7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBQyxFQUtUO1FBSmYsS0FBSyxXQUFBLEVBQ0wsUUFBUSxjQUFBLEVBQ1IsV0FBVyxpQkFBQSxFQUNYLFVBQVUsZ0JBQUE7SUFFVixJQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBWSxJQUFJLENBQUMsQ0FBQTtJQUVoRCxZQUFZLENBQUM7UUFDWCxJQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDeEUsSUFBTSxhQUFhLEdBQ2pCLFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3pFLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtJQUN2QyxDQUFDLENBQUMsQ0FBQTtJQUNGLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDZCxZQUFZLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxVQUFVLFlBQUEsRUFBRSxDQUFDLENBQUE7SUFDL0MsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBRU4sT0FBTyxDQUNMO1FBQ0Usb0JBQUMsU0FBUyxhQUNSLEdBQUcsRUFBRSxnQkFBZ0IsRUFDckIsU0FBUyxFQUFFLDZCQUE2QixFQUN4QyxPQUFPLEVBQUUsY0FBYyxFQUN2QixPQUFPLEVBQUUsY0FBYyxFQUN2QixnQkFBZ0IsRUFBRSxLQUFLLEVBQ3ZCLElBQUksUUFDSixVQUFVLEVBQUUsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUN4RCxRQUFRLEVBQUUsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsVUFBQyxLQUFLO2dCQUMvRCxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDakIsQ0FBQyxDQUFDLEVBQ0YsU0FBUyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFDdEQsV0FBVyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQ2hELFNBQVMsUUFDVCxhQUFhLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxFQUNyRCxpQkFBaUIsRUFBQyxjQUFjLEVBQ2hDLGVBQWUsRUFBRTtnQkFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRTthQUMvQixFQUNELFVBQVUsZUFDTCxtQkFBbUIsR0FFeEIsWUFBWSxFQUFFO2dCQUNaLFFBQVEsRUFBRSxVQUFVO2dCQUNwQixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsT0FBTyxFQUFFO29CQUNQLFVBQVUsQ0FBQzs7d0JBQ1QsTUFBQSxnQkFBZ0IsQ0FBQyxPQUFPLDBDQUFFLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO29CQUN2RCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7Z0JBQ1AsQ0FBQzthQUNGLElBQ0csQ0FBQyxLQUFLO1lBQ1IsQ0FBQyxDQUFDO2dCQUNFLEtBQUssRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO2FBQzVEO1lBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNILFdBQVcsRUFDZixDQUNELENBQ0osQ0FBQTtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBDb2RpY2UgRm91bmRhdGlvblxuICpcbiAqIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXJcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlXG4gKiBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0XG4gKiBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuIEEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBpcyBkaXN0cmlidXRlZCBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbSBhbmQgY2FuIGJlIGZvdW5kIGF0XG4gKiA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2xncGwuaHRtbD4uXG4gKlxuICoqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IERhdGVJbnB1dCwgSURhdGVJbnB1dFByb3BzIH0gZnJvbSAnQGJsdWVwcmludGpzL2RhdGV0aW1lJ1xuXG5pbXBvcnQge1xuICBEYXRlSGVscGVycyxcbiAgRGVmYXVsdE1heERhdGUsXG4gIERlZmF1bHRNaW5EYXRlLFxuICBJU09fODYwMV9GT1JNQVRfWk9ORUQsXG59IGZyb20gJy4vZGF0ZS1oZWxwZXJzJ1xuaW1wb3J0IHsgTXVpT3V0bGluZWRJbnB1dEJvcmRlckNsYXNzZXMgfSBmcm9tICcuLi90aGVtZS90aGVtZSdcbmltcG9ydCB1c2VUaW1lUHJlZnMgZnJvbSAnLi91c2VUaW1lUHJlZnMnXG5cbmltcG9ydCB1c2VyIGZyb20gJy4uL3NpbmdsZXRvbnMvdXNlci1pbnN0YW5jZSdcbmltcG9ydCB7IEVudGVyS2V5U3VibWl0UHJvcHMgfSBmcm9tICcuLi9jdXN0b20tZXZlbnRzL2VudGVyLWtleS1zdWJtaXQnXG5cbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50LXRpbWV6b25lJ1xuXG50eXBlIERhdGVGaWVsZFByb3BzID0ge1xuICB2YWx1ZTogc3RyaW5nXG4gIG9uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZFxuICAvKipcbiAgICogT3ZlcnJpZGUgaWYgeW91IGFic29sdXRlbHkgbXVzdFxuICAgKi9cbiAgQlBEYXRlUHJvcHM/OiBQYXJ0aWFsPElEYXRlSW5wdXRQcm9wcz5cbiAgaXNOdWxsYWJsZT86IGJvb2xlYW5cbn1cblxuY29uc3QgdmFsaWRhdGVEYXRlID0gKHsgdmFsdWUsIG9uQ2hhbmdlLCBpc051bGxhYmxlIH06IERhdGVGaWVsZFByb3BzKSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCAmJiBpc051bGxhYmxlKSByZXR1cm5cblxuICBjb25zdCBkYXRlID0gbW9tZW50KHZhbHVlLCBJU09fODYwMV9GT1JNQVRfWk9ORUQpXG4gIGlmICghZGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICBjb25zdCBuZXdEYXRlID0gRGF0ZUhlbHBlcnMuR2VuZXJhbC53aXRoUHJlY2lzaW9uKG5ldyBEYXRlKCkpXG4gICAgb25DaGFuZ2UobmV3RGF0ZS50b0lTT1N0cmluZygpKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBEYXRlRmllbGQgPSAoe1xuICB2YWx1ZSxcbiAgb25DaGFuZ2UsXG4gIEJQRGF0ZVByb3BzLFxuICBpc051bGxhYmxlLFxufTogRGF0ZUZpZWxkUHJvcHMpID0+IHtcbiAgY29uc3QgYmx1ZXByaW50RGF0ZVJlZiA9IHVzZVJlZjxEYXRlSW5wdXQ+KG51bGwpXG5cbiAgdXNlVGltZVByZWZzKCgpID0+IHtcbiAgICBjb25zdCBzaGlmdGVkRGF0ZSA9IERhdGVIZWxwZXJzLkJsdWVwcmludC5EYXRlUHJvcHMuZ2VuZXJhdGVWYWx1ZSh2YWx1ZSlcbiAgICBjb25zdCB1bnNoaWZ0ZWREYXRlID1cbiAgICAgIERhdGVIZWxwZXJzLkJsdWVwcmludC5jb252ZXJ0ZXJzLlVudGltZXNoaWZ0RnJvbURhdGVQaWNrZXIoc2hpZnRlZERhdGUpXG4gICAgb25DaGFuZ2UodW5zaGlmdGVkRGF0ZS50b0lTT1N0cmluZygpKVxuICB9KVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHZhbGlkYXRlRGF0ZSh7IG9uQ2hhbmdlLCB2YWx1ZSwgaXNOdWxsYWJsZSB9KVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8RGF0ZUlucHV0XG4gICAgICAgIHJlZj17Ymx1ZXByaW50RGF0ZVJlZn1cbiAgICAgICAgY2xhc3NOYW1lPXtNdWlPdXRsaW5lZElucHV0Qm9yZGVyQ2xhc3Nlc31cbiAgICAgICAgbWluRGF0ZT17RGVmYXVsdE1pbkRhdGV9XG4gICAgICAgIG1heERhdGU9e0RlZmF1bHRNYXhEYXRlfVxuICAgICAgICBjbG9zZU9uU2VsZWN0aW9uPXtmYWxzZX1cbiAgICAgICAgZmlsbFxuICAgICAgICBmb3JtYXREYXRlPXtEYXRlSGVscGVycy5CbHVlcHJpbnQuY29tbW9uUHJvcHMuZm9ybWF0RGF0ZX1cbiAgICAgICAgb25DaGFuZ2U9e0RhdGVIZWxwZXJzLkJsdWVwcmludC5EYXRlUHJvcHMuZ2VuZXJhdGVPbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICBvbkNoYW5nZSh2YWx1ZSlcbiAgICAgICAgfSl9XG4gICAgICAgIHBhcnNlRGF0ZT17RGF0ZUhlbHBlcnMuQmx1ZXByaW50LmNvbW1vblByb3BzLnBhcnNlRGF0ZX1cbiAgICAgICAgcGxhY2Vob2xkZXI9e0RhdGVIZWxwZXJzLkdlbmVyYWwuZ2V0RGF0ZUZvcm1hdCgpfVxuICAgICAgICBzaG9ydGN1dHNcbiAgICAgICAgdGltZVByZWNpc2lvbj17RGF0ZUhlbHBlcnMuR2VuZXJhbC5nZXRUaW1lUHJlY2lzaW9uKCl9XG4gICAgICAgIG91dE9mUmFuZ2VNZXNzYWdlPVwiT3V0IG9mIHJhbmdlXCJcbiAgICAgICAgdGltZVBpY2tlclByb3BzPXt7XG4gICAgICAgICAgdXNlQW1QbTogdXNlci5nZXRBbVBtRGlzcGxheSgpLFxuICAgICAgICB9fVxuICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgLi4uRW50ZXJLZXlTdWJtaXRQcm9wcyxcbiAgICAgICAgfX1cbiAgICAgICAgcG9wb3ZlclByb3BzPXt7XG4gICAgICAgICAgYm91bmRhcnk6ICd2aWV3cG9ydCcsXG4gICAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgICAgIG9uQ2xvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBibHVlcHJpbnREYXRlUmVmLmN1cnJlbnQ/LnNldFN0YXRlKHsgaXNPcGVuOiBmYWxzZSB9KVxuICAgICAgICAgICAgfSwgMClcbiAgICAgICAgICB9LFxuICAgICAgICB9fVxuICAgICAgICB7Li4uKHZhbHVlXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIHZhbHVlOiBEYXRlSGVscGVycy5CbHVlcHJpbnQuRGF0ZVByb3BzLmdlbmVyYXRlVmFsdWUodmFsdWUpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDoge30pfVxuICAgICAgICB7Li4uQlBEYXRlUHJvcHN9XG4gICAgICAvPlxuICAgIDwvPlxuICApXG59XG4iXX0=