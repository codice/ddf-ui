/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import { expect } from 'chai';
import { DateHelpers, ISO_8601_FORMAT_ZONED } from './date-helpers';
import user from '../singletons/user-instance';
import Common from '../../js/Common';
user.get('user').get('preferences').set('timeZone', 'America/St_Johns');
var date = new Date();
describe('verify that transforming to and from timezone is accurate (no loss)', function () {
    it("shifts and unshifts without losing information ".concat(date.toISOString()), function () {
        var timeShiftedDate = DateHelpers.Blueprint.converters.TimeshiftForDatePicker(date.toISOString(), ISO_8601_FORMAT_ZONED);
        var unshiftedDate = DateHelpers.Blueprint.converters.UntimeshiftFromDatePicker(timeShiftedDate);
        expect(date.toISOString(), 'Unexpected difference').to.equal(unshiftedDate.toISOString());
    });
});
describe('untimeshifting respects the time precision', function () {
    it('milliseconds are 0 when time precision is seconds', function () {
        user
            .get('user')
            .get('preferences')
            .set('dateTimeFormat', Common.getDateTimeFormats()['ISO']['second']);
        var unshiftedDate = DateHelpers.Blueprint.converters.UntimeshiftFromDatePicker(new Date('2023-04-23T22:39:46.117Z'));
        expect(unshiftedDate.getUTCMilliseconds()).to.equal(0);
    });
    it('seconds and milliseconds are 0 when time precision is minutes', function () {
        user
            .get('user')
            .get('preferences')
            .set('dateTimeFormat', Common.getDateTimeFormats()['ISO']['minute']);
        var unshiftedDate = DateHelpers.Blueprint.converters.UntimeshiftFromDatePicker(new Date('2023-04-23T22:39:46.117Z'));
        expect(unshiftedDate.getUTCMilliseconds()).to.equal(0);
        expect(unshiftedDate.getUTCSeconds()).to.equal(0);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1oZWxwZXJzLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50L2ZpZWxkcy9kYXRlLWhlbHBlcnMuc3BlYy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7SUFhSTtBQUNKLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFDN0IsT0FBTyxFQUFFLFdBQVcsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ25FLE9BQU8sSUFBSSxNQUFNLDZCQUE2QixDQUFBO0FBQzlDLE9BQU8sTUFBTSxNQUFNLGlCQUFpQixDQUFBO0FBRXBDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtBQUN2RSxJQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFBO0FBQ3ZCLFFBQVEsQ0FBQyxxRUFBcUUsRUFBRTtJQUM5RSxFQUFFLENBQUMseURBQWtELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBRSxFQUFFO1FBQ3pFLElBQU0sZUFBZSxHQUNuQixXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FDckQsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUNsQixxQkFBcUIsQ0FDdEIsQ0FBQTtRQUNILElBQU0sYUFBYSxHQUNqQixXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FDeEQsZUFBZSxDQUNoQixDQUFBO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQzFELGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FDNUIsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUE7QUFDRixRQUFRLENBQUMsNENBQTRDLEVBQUU7SUFDckQsRUFBRSxDQUFDLG1EQUFtRCxFQUFFO1FBQ3RELElBQUk7YUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDO2FBQ1gsR0FBRyxDQUFDLGFBQWEsQ0FBQzthQUNsQixHQUFHLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUN0RSxJQUFNLGFBQWEsR0FDakIsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMseUJBQXlCLENBQ3hELElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQ3JDLENBQUE7UUFDSCxNQUFNLENBQUMsYUFBYSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3hELENBQUMsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLCtEQUErRCxFQUFFO1FBQ2xFLElBQUk7YUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDO2FBQ1gsR0FBRyxDQUFDLGFBQWEsQ0FBQzthQUNsQixHQUFHLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUN0RSxJQUFNLGFBQWEsR0FDakIsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMseUJBQXlCLENBQ3hELElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQ3JDLENBQUE7UUFDSCxNQUFNLENBQUMsYUFBYSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3RELE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ25ELENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknXG5pbXBvcnQgeyBEYXRlSGVscGVycywgSVNPXzg2MDFfRk9STUFUX1pPTkVEIH0gZnJvbSAnLi9kYXRlLWhlbHBlcnMnXG5pbXBvcnQgdXNlciBmcm9tICcuLi9zaW5nbGV0b25zL3VzZXItaW5zdGFuY2UnXG5pbXBvcnQgQ29tbW9uIGZyb20gJy4uLy4uL2pzL0NvbW1vbidcblxudXNlci5nZXQoJ3VzZXInKS5nZXQoJ3ByZWZlcmVuY2VzJykuc2V0KCd0aW1lWm9uZScsICdBbWVyaWNhL1N0X0pvaG5zJylcbmNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXG5kZXNjcmliZSgndmVyaWZ5IHRoYXQgdHJhbnNmb3JtaW5nIHRvIGFuZCBmcm9tIHRpbWV6b25lIGlzIGFjY3VyYXRlIChubyBsb3NzKScsICgpID0+IHtcbiAgaXQoYHNoaWZ0cyBhbmQgdW5zaGlmdHMgd2l0aG91dCBsb3NpbmcgaW5mb3JtYXRpb24gJHtkYXRlLnRvSVNPU3RyaW5nKCl9YCwgKCkgPT4ge1xuICAgIGNvbnN0IHRpbWVTaGlmdGVkRGF0ZSA9XG4gICAgICBEYXRlSGVscGVycy5CbHVlcHJpbnQuY29udmVydGVycy5UaW1lc2hpZnRGb3JEYXRlUGlja2VyKFxuICAgICAgICBkYXRlLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIElTT184NjAxX0ZPUk1BVF9aT05FRFxuICAgICAgKVxuICAgIGNvbnN0IHVuc2hpZnRlZERhdGUgPVxuICAgICAgRGF0ZUhlbHBlcnMuQmx1ZXByaW50LmNvbnZlcnRlcnMuVW50aW1lc2hpZnRGcm9tRGF0ZVBpY2tlcihcbiAgICAgICAgdGltZVNoaWZ0ZWREYXRlXG4gICAgICApXG4gICAgZXhwZWN0KGRhdGUudG9JU09TdHJpbmcoKSwgJ1VuZXhwZWN0ZWQgZGlmZmVyZW5jZScpLnRvLmVxdWFsKFxuICAgICAgdW5zaGlmdGVkRGF0ZS50b0lTT1N0cmluZygpXG4gICAgKVxuICB9KVxufSlcbmRlc2NyaWJlKCd1bnRpbWVzaGlmdGluZyByZXNwZWN0cyB0aGUgdGltZSBwcmVjaXNpb24nLCAoKSA9PiB7XG4gIGl0KCdtaWxsaXNlY29uZHMgYXJlIDAgd2hlbiB0aW1lIHByZWNpc2lvbiBpcyBzZWNvbmRzJywgKCkgPT4ge1xuICAgIHVzZXJcbiAgICAgIC5nZXQoJ3VzZXInKVxuICAgICAgLmdldCgncHJlZmVyZW5jZXMnKVxuICAgICAgLnNldCgnZGF0ZVRpbWVGb3JtYXQnLCBDb21tb24uZ2V0RGF0ZVRpbWVGb3JtYXRzKClbJ0lTTyddWydzZWNvbmQnXSlcbiAgICBjb25zdCB1bnNoaWZ0ZWREYXRlID1cbiAgICAgIERhdGVIZWxwZXJzLkJsdWVwcmludC5jb252ZXJ0ZXJzLlVudGltZXNoaWZ0RnJvbURhdGVQaWNrZXIoXG4gICAgICAgIG5ldyBEYXRlKCcyMDIzLTA0LTIzVDIyOjM5OjQ2LjExN1onKVxuICAgICAgKVxuICAgIGV4cGVjdCh1bnNoaWZ0ZWREYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKS50by5lcXVhbCgwKVxuICB9KVxuICBpdCgnc2Vjb25kcyBhbmQgbWlsbGlzZWNvbmRzIGFyZSAwIHdoZW4gdGltZSBwcmVjaXNpb24gaXMgbWludXRlcycsICgpID0+IHtcbiAgICB1c2VyXG4gICAgICAuZ2V0KCd1c2VyJylcbiAgICAgIC5nZXQoJ3ByZWZlcmVuY2VzJylcbiAgICAgIC5zZXQoJ2RhdGVUaW1lRm9ybWF0JywgQ29tbW9uLmdldERhdGVUaW1lRm9ybWF0cygpWydJU08nXVsnbWludXRlJ10pXG4gICAgY29uc3QgdW5zaGlmdGVkRGF0ZSA9XG4gICAgICBEYXRlSGVscGVycy5CbHVlcHJpbnQuY29udmVydGVycy5VbnRpbWVzaGlmdEZyb21EYXRlUGlja2VyKFxuICAgICAgICBuZXcgRGF0ZSgnMjAyMy0wNC0yM1QyMjozOTo0Ni4xMTdaJylcbiAgICAgIClcbiAgICBleHBlY3QodW5zaGlmdGVkRGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSkudG8uZXF1YWwoMClcbiAgICBleHBlY3QodW5zaGlmdGVkRGF0ZS5nZXRVVENTZWNvbmRzKCkpLnRvLmVxdWFsKDApXG4gIH0pXG59KVxuIl19