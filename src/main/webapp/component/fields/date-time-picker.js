import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import TextField from '@mui/material/TextField';
import { DateField } from './date';
import CalendarIcon from '@mui/icons-material/Event';
import ClearIcon from '@mui/icons-material/Clear';
import InputAdornment from '@mui/material/InputAdornment';
/**
 * DateTimePicker that combines Mui TextField with BlueprintJs DatePicker
 *
 * For now it's meant to work with an outlined text field, but we can add support for other styles if we want.
 *
 * By changing the inputComponent, we avoid weird focusing issues, while still allowing use of all the other niceties (helperText) of TextField
 */
var DateTimePicker = function (_a) {
    var value = _a.value, onChange = _a.onChange, isNullable = _a.isNullable, TextFieldProps = _a.TextFieldProps, BPDateProps = _a.BPDateProps;
    var inputRef = React.useRef(null);
    /**
     * We want to avoid causing the TextField below to percieve a change to inputComponent when possible, because that mucks with focus.
     *
     * We stringify the BPDateProps to make life easier for devs, since they will likely pass a plain object.  If they do and their component rerenders,
     * this memo would trigger even though they think they didn't change BPDateProps (the object is different though!).  So we stringify to make sure we
     * only pick up real changes.
     */
    var inputComponent = React.useMemo(function () {
        var classes = 'px-[14px] py-[8.5px]';
        return React.forwardRef(function (props, ref) {
            return (_jsx(DateField, __assign({}, props, { isNullable: true, BPDateProps: __assign(__assign({}, BPDateProps), { className: classes, inputProps: {
                        inputRef: ref,
                    } }) })));
        });
    }, [JSON.stringify(BPDateProps)]);
    return (_jsx(TextField, __assign({ fullWidth: true, variant: TextFieldProps === null || TextFieldProps === void 0 ? void 0 : TextFieldProps.variant, label: "Date", InputLabelProps: { shrink: true }, value: value, onChange: onChange, ref: inputRef, InputProps: {
            inputComponent: inputComponent,
            endAdornment: (_jsxs(InputAdornment, { component: "button", type: "button", className: "cursor-pointer", position: "end", onClick: function () {
                    var _a;
                    if (inputRef.current) {
                        (_a = inputRef.current.querySelector('input')) === null || _a === void 0 ? void 0 : _a.focus();
                    }
                }, children: [isNullable && (_jsx(ClearIcon, { className: "".concat(value ? '' : 'hidden'), onClick: function (e) {
                            onChange(null);
                            e.stopPropagation();
                        } })), _jsx(CalendarIcon, {})] })),
        } }, TextFieldProps)));
};
export default DateTimePicker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXBpY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvZmllbGRzL2RhdGUtdGltZS1waWNrZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFFOUIsT0FBTyxTQUE2QixNQUFNLHlCQUF5QixDQUFBO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDbEMsT0FBTyxZQUFZLE1BQU0sMkJBQTJCLENBQUE7QUFDcEQsT0FBTyxTQUFTLE1BQU0sMkJBQTJCLENBQUE7QUFFakQsT0FBTyxjQUFjLE1BQU0sOEJBQThCLENBQUE7QUFrQnpEOzs7Ozs7R0FNRztBQUNILElBQU0sY0FBYyxHQUFHLFVBQUMsRUFNUDtRQUxmLEtBQUssV0FBQSxFQUNMLFFBQVEsY0FBQSxFQUNSLFVBQVUsZ0JBQUEsRUFDVixjQUFjLG9CQUFBLEVBQ2QsV0FBVyxpQkFBQTtJQUVYLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQWlCLElBQUksQ0FBQyxDQUFBO0lBQ25EOzs7Ozs7T0FNRztJQUNILElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDbkMsSUFBSSxPQUFPLEdBQUcsc0JBQXNCLENBQUE7UUFFcEMsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQUMsS0FBVSxFQUFFLEdBQVE7WUFDM0MsT0FBTyxDQUNMLEtBQUMsU0FBUyxlQUNKLEtBQUssSUFDVCxVQUFVLFFBQ1YsV0FBVyx3QkFDTixXQUFXLEtBQ2QsU0FBUyxFQUFFLE9BQU8sRUFDbEIsVUFBVSxFQUFFO3dCQUNWLFFBQVEsRUFBRSxHQUFHO3FCQUNkLE9BRUgsQ0FDSCxDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVqQyxPQUFPLENBQ0wsS0FBQyxTQUFTLGFBQ1IsU0FBUyxRQUNULE9BQU8sRUFBRSxjQUFjLGFBQWQsY0FBYyx1QkFBZCxjQUFjLENBQUUsT0FBTyxFQUNoQyxLQUFLLEVBQUMsTUFBTSxFQUNaLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFDakMsS0FBSyxFQUFFLEtBQUssRUFDWixRQUFRLEVBQUUsUUFBZSxFQUN6QixHQUFHLEVBQUUsUUFBUSxFQUNiLFVBQVUsRUFBRTtZQUNWLGNBQWMsRUFBRSxjQUFxQjtZQUNyQyxZQUFZLEVBQUUsQ0FDWixNQUFDLGNBQWMsSUFDYixTQUFTLEVBQUMsUUFBUSxFQUNsQixJQUFJLEVBQUMsUUFBUSxFQUNiLFNBQVMsRUFBQyxnQkFBZ0IsRUFDMUIsUUFBUSxFQUFDLEtBQUssRUFDZCxPQUFPLEVBQUU7O29CQUNQLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO3dCQUNyQixNQUFBLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQywwQ0FBRSxLQUFLLEVBQUUsQ0FBQTtvQkFDbEQsQ0FBQztnQkFDSCxDQUFDLGFBRUEsVUFBVSxJQUFJLENBQ2IsS0FBQyxTQUFTLElBQ1IsU0FBUyxFQUFFLFVBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBRSxFQUNyQyxPQUFPLEVBQUUsVUFBQyxDQUFDOzRCQUNULFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTs0QkFDZCxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7d0JBQ3JCLENBQUMsR0FDRCxDQUNILEVBQ0QsS0FBQyxZQUFZLEtBQUcsSUFDRCxDQUNsQjtTQUNGLElBQ0csY0FBYyxFQUNsQixDQUNILENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxlQUFlLGNBQWMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRGF0ZUlucHV0UHJvcHMgfSBmcm9tICdAYmx1ZXByaW50anMvZGF0ZXRpbWUnXG5pbXBvcnQgVGV4dEZpZWxkLCB7IFRleHRGaWVsZFByb3BzIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9UZXh0RmllbGQnXG5pbXBvcnQgeyBEYXRlRmllbGQgfSBmcm9tICcuL2RhdGUnXG5pbXBvcnQgQ2FsZW5kYXJJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXZlbnQnXG5pbXBvcnQgQ2xlYXJJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvQ2xlYXInXG5cbmltcG9ydCBJbnB1dEFkb3JubWVudCBmcm9tICdAbXVpL21hdGVyaWFsL0lucHV0QWRvcm5tZW50J1xuXG50eXBlIERhdGVGaWVsZFByb3BzID0ge1xuICB2YWx1ZTogc3RyaW5nIHwgbnVsbFxuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkXG4gIGlzTnVsbGFibGU/OiBib29sZWFuXG4gIFRleHRGaWVsZFByb3BzPzogUGFydGlhbDxUZXh0RmllbGRQcm9wcz5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIGlmIHlvdSBhYnNvbHV0ZWx5IG11c3QuXG4gICAqIFRha2UgZXh0cmEgY2F1dGlvbiB3aGVuIG92ZXJyaWRpbmcgbWluRGF0ZSBhbmQgbWF4RGF0ZS5cbiAgICogT3ZlcnJpZGluZyBtaW5EYXRlIGFuZCBtYXhEYXRlIHdpbGwgd29yayBhcyBhIHZpc3VhbCBvdmVybGF5IHdoaWNoIGNhbiBvbmx5IGJlIHVzZWRcbiAgICogdG8gcmVzdHJpY3Qgd2hpY2ggZGF0ZXMgYSB1c2VyIGNhbiBpbnB1dC0gYnV0IGNhbid0IGJlIHVzZWQgdG8gZ2l2ZSB0aGUgdXNlcnMgYSBsb3dlci9oaWdoZXJcbiAgICogbWluIG9yIG1heC4gVGhlIHRydWUgbWluL21heCBpcyBzZXQgaW4gZGF0ZUhlbHBlcnMuIFdlIHNob3VsZCBwcm9iYWJseSB1cGRhdGUgdGhpcyBhdCBzb21lXG4gICAqIHBvaW50IHRvIGJlIHBhc3NlZCBkb3duIGJ5IHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgQlBEYXRlUHJvcHM/OiBQYXJ0aWFsPERhdGVJbnB1dFByb3BzPlxufVxuXG4vKipcbiAqIERhdGVUaW1lUGlja2VyIHRoYXQgY29tYmluZXMgTXVpIFRleHRGaWVsZCB3aXRoIEJsdWVwcmludEpzIERhdGVQaWNrZXJcbiAqXG4gKiBGb3Igbm93IGl0J3MgbWVhbnQgdG8gd29yayB3aXRoIGFuIG91dGxpbmVkIHRleHQgZmllbGQsIGJ1dCB3ZSBjYW4gYWRkIHN1cHBvcnQgZm9yIG90aGVyIHN0eWxlcyBpZiB3ZSB3YW50LlxuICpcbiAqIEJ5IGNoYW5naW5nIHRoZSBpbnB1dENvbXBvbmVudCwgd2UgYXZvaWQgd2VpcmQgZm9jdXNpbmcgaXNzdWVzLCB3aGlsZSBzdGlsbCBhbGxvd2luZyB1c2Ugb2YgYWxsIHRoZSBvdGhlciBuaWNldGllcyAoaGVscGVyVGV4dCkgb2YgVGV4dEZpZWxkXG4gKi9cbmNvbnN0IERhdGVUaW1lUGlja2VyID0gKHtcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBpc051bGxhYmxlLFxuICBUZXh0RmllbGRQcm9wcyxcbiAgQlBEYXRlUHJvcHMsXG59OiBEYXRlRmllbGRQcm9wcykgPT4ge1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbClcbiAgLyoqXG4gICAqIFdlIHdhbnQgdG8gYXZvaWQgY2F1c2luZyB0aGUgVGV4dEZpZWxkIGJlbG93IHRvIHBlcmNpZXZlIGEgY2hhbmdlIHRvIGlucHV0Q29tcG9uZW50IHdoZW4gcG9zc2libGUsIGJlY2F1c2UgdGhhdCBtdWNrcyB3aXRoIGZvY3VzLlxuICAgKlxuICAgKiBXZSBzdHJpbmdpZnkgdGhlIEJQRGF0ZVByb3BzIHRvIG1ha2UgbGlmZSBlYXNpZXIgZm9yIGRldnMsIHNpbmNlIHRoZXkgd2lsbCBsaWtlbHkgcGFzcyBhIHBsYWluIG9iamVjdC4gIElmIHRoZXkgZG8gYW5kIHRoZWlyIGNvbXBvbmVudCByZXJlbmRlcnMsXG4gICAqIHRoaXMgbWVtbyB3b3VsZCB0cmlnZ2VyIGV2ZW4gdGhvdWdoIHRoZXkgdGhpbmsgdGhleSBkaWRuJ3QgY2hhbmdlIEJQRGF0ZVByb3BzICh0aGUgb2JqZWN0IGlzIGRpZmZlcmVudCB0aG91Z2ghKS4gIFNvIHdlIHN0cmluZ2lmeSB0byBtYWtlIHN1cmUgd2VcbiAgICogb25seSBwaWNrIHVwIHJlYWwgY2hhbmdlcy5cbiAgICovXG4gIGNvbnN0IGlucHV0Q29tcG9uZW50ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IGNsYXNzZXMgPSAncHgtWzE0cHhdIHB5LVs4LjVweF0nXG5cbiAgICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZigocHJvcHM6IGFueSwgcmVmOiBhbnkpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxEYXRlRmllbGRcbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgaXNOdWxsYWJsZVxuICAgICAgICAgIEJQRGF0ZVByb3BzPXt7XG4gICAgICAgICAgICAuLi5CUERhdGVQcm9wcyxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgICAgIGlucHV0UHJvcHM6IHtcbiAgICAgICAgICAgICAgaW5wdXRSZWY6IHJlZixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIClcbiAgICB9KVxuICB9LCBbSlNPTi5zdHJpbmdpZnkoQlBEYXRlUHJvcHMpXSlcblxuICByZXR1cm4gKFxuICAgIDxUZXh0RmllbGRcbiAgICAgIGZ1bGxXaWR0aFxuICAgICAgdmFyaWFudD17VGV4dEZpZWxkUHJvcHM/LnZhcmlhbnR9XG4gICAgICBsYWJlbD1cIkRhdGVcIlxuICAgICAgSW5wdXRMYWJlbFByb3BzPXt7IHNocmluazogdHJ1ZSB9fVxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlIGFzIGFueX1cbiAgICAgIHJlZj17aW5wdXRSZWZ9XG4gICAgICBJbnB1dFByb3BzPXt7XG4gICAgICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCBhcyBhbnksXG4gICAgICAgIGVuZEFkb3JubWVudDogKFxuICAgICAgICAgIDxJbnB1dEFkb3JubWVudFxuICAgICAgICAgICAgY29tcG9uZW50PVwiYnV0dG9uXCJcbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY3Vyc29yLXBvaW50ZXJcIlxuICAgICAgICAgICAgcG9zaXRpb249XCJlbmRcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGlucHV0UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKT8uZm9jdXMoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpc051bGxhYmxlICYmIChcbiAgICAgICAgICAgICAgPENsZWFySWNvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7dmFsdWUgPyAnJyA6ICdoaWRkZW4nfWB9XG4gICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKG51bGwpXG4gICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q2FsZW5kYXJJY29uIC8+XG4gICAgICAgICAgPC9JbnB1dEFkb3JubWVudD5cbiAgICAgICAgKSxcbiAgICAgIH19XG4gICAgICB7Li4uVGV4dEZpZWxkUHJvcHN9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRlVGltZVBpY2tlclxuIl19