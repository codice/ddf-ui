import { __read } from "tslib";
import React from 'react';
import Enzyme, { mount } from 'enzyme';
import Adapter from '@wojtekmaj/enzyme-adapter-react-17';
Enzyme.configure({ adapter: new Adapter() });
import { expect } from 'chai';
import { DateRangeField, defaultValue } from './date-range';
import moment from 'moment';
import user from '../singletons/user-instance';
import { DateHelpers, ISO_8601_FORMAT_ZONED } from './date-helpers';
import Common from '../../js/Common';
var UncontrolledDateRangeField = function (_a) {
    var startingValue = _a.startingValue;
    var _b = __read(React.useState(startingValue), 2), value = _b[0], setValue = _b[1];
    return (React.createElement(DateRangeField, { value: value, onChange: function (update) {
            setValue(update);
        } }));
};
// rely on static data when possible, but in these we can use the DateHelpers (a must for shifted date timezone testing)
var data = {
    date1: {
        timezone: 'America/St_Johns',
        originalISO: '2021-01-15T06:53:54.316Z',
        originalDate: new Date('2021-01-15T06:53:54.316Z'),
        utcISOMinutes: '2021-01-15T06:53:00.000Z',
        userFormatISO: {
            millisecond: '2021-01-15T03:23:54.316-03:30',
            second: '2021-01-15T03:23:54-03:30',
            minute: '2021-01-15T03:23-03:30',
        },
        userFormat24: {
            millisecond: '15 Jan 2021 03:23:54.316 -03:30',
            second: '15 Jan 2021 03:23:54 -03:30',
            minute: '15 Jan 2021 03:23 -03:30',
        },
        userFormat12: {
            millisecond: '15 Jan 2021 03:23:54.316 am -03:30',
            second: '15 Jan 2021 03:23:54 am -03:30',
            minute: '15 Jan 2021 03:23 am -03:30',
        },
    },
    date2: {
        timezone: 'America/St_Johns',
        userSuppliedInput: '15 Jan 2021 03:24:54.316 -02:30',
        parsedOutput: '15 Jan 2021 02:24:54.316 -03:30',
    },
    date3: {
        timezone: 'Etc/UTC',
        maxFuture: moment().add(10, 'years').toISOString(),
        disallowedFuture: moment().add(11, 'years').toISOString(),
    },
    date4: {
        timezone: 'America/St_Johns',
        originalISO: '2021-01-14T06:53:54.316Z',
        originalDate: new Date('2021-01-14T06:53:54.316Z'),
        utcISOMinutes: '2021-01-14T06:53:00.000Z',
        userFormatISO: {
            millisecond: '2021-01-14T03:23:54.316-03:30',
            second: '2021-01-14T03:23:54-03:30',
            minute: '2021-01-14T03:23-03:30',
        },
        userFormat24: {
            millisecond: '14 Jan 2021 03:23:54.316 -03:30',
            second: '14 Jan 2021 03:23:54 -03:30',
            minute: '14 Jan 2021 03:23 -03:30',
        },
        userFormat12: {
            millisecond: '14 Jan 2021 03:23:54.316 am -03:30',
            second: '14 Jan 2021 03:23:54 am -03:30',
            minute: '14 Jan 2021 03:23 am -03:30',
        },
    },
    // this is useful for testing daylist savings (date 1 is pre, this is post)
    date5: {
        timezone: 'America/St_Johns',
        originalISO: '2021-04-15T05:53:54.316Z', // use the converter to find the appropriate shifted date
    },
};
var wrapper;
describe('verify date range field works', function () {
    before(function () {
        user.get('user').get('preferences').set('timeZone', data.date1.timezone);
    });
    after(function () {
        user.get('user').get('preferences').set('timeZone', 'Etc/UTC');
    });
    beforeEach(function () {
        user
            .get('user')
            .get('preferences')
            .set('dateTimeFormat', Common.getDateTimeFormats()['ISO']['millisecond']);
    });
    afterEach(function () {
        // Must unmount to stop listening to the user prefs model (the useTimePrefs() hook)
        // Has to be unmounted before we set any preferences so we don't trigger any onChange
        // callbacks again.
        wrapper.unmount();
        user
            .get('user')
            .get('preferences')
            .set('dateTimeFormat', Common.getDateTimeFormats()['ISO']['millisecond']);
    });
    it("should not allow overlapping dates", function () {
        user
            .get('user')
            .get('preferences')
            .set('dateTimeFormat', Common.getDateTimeFormats()['ISO']['millisecond']);
        wrapper = mount(React.createElement(DateRangeField, { value: {
                start: data.date1.originalISO,
                end: data.date4.originalISO,
            }, onChange: function (validValue) {
                // verify these are one day apart, as should happen when fed overlapping dates or invalid values
                var start = new Date(validValue.start);
                var end = new Date(validValue.end);
                expect(start.getDate()).to.equal(end.getDate() - 1);
            } }));
    });
    var verifyDateRender = function (format, precision, expectedStart, expectedEnd) {
        return function () {
            user
                .get('user')
                .get('preferences')
                .set('dateTimeFormat', Common.getDateTimeFormats()[format][precision]);
            wrapper = mount(React.createElement(DateRangeField, { value: {
                    start: data.date4.originalISO,
                    end: data.date1.originalISO,
                }, onChange: function () { } }));
            expect(wrapper.render().find('input').first().val()).to.equal(expectedStart);
            expect(wrapper.render().find('input').last().val()).to.equal(expectedEnd);
        };
    };
    it('should render with ISO format and millisecond precision', verifyDateRender('ISO', 'millisecond', data.date4.userFormatISO.millisecond, data.date1.userFormatISO.millisecond));
    it('should render with ISO format and second precision', verifyDateRender('ISO', 'second', data.date4.userFormatISO.second, data.date1.userFormatISO.second));
    it('should render with ISO format and minute precision', verifyDateRender('ISO', 'minute', data.date4.userFormatISO.minute, data.date1.userFormatISO.minute));
    it('should render with 24hr format and millisecond precision', verifyDateRender('24', 'millisecond', data.date4.userFormat24.millisecond, data.date1.userFormat24.millisecond));
    it('should render with 24hr format and second precision', verifyDateRender('24', 'second', data.date4.userFormat24.second, data.date1.userFormat24.second));
    it('should render with 24hr format and minute precision', verifyDateRender('24', 'minute', data.date4.userFormat24.minute, data.date1.userFormat24.minute));
    it('should render with 12hr format and millisecond precision', verifyDateRender('12', 'millisecond', data.date4.userFormat12.millisecond, data.date1.userFormat12.millisecond));
    it('should render with 12hr format and second precision', verifyDateRender('12', 'second', data.date4.userFormat12.second, data.date1.userFormat12.second));
    it('should render with 12hr format and minute precision', verifyDateRender('12', 'minute', data.date4.userFormat12.minute, data.date1.userFormat12.minute));
    it("should parse with user's pref timezone", function () {
        // gist is user enters a time in a diff time from their pref, on blur we adjust it to their preference
        user
            .get('user')
            .get('preferences')
            .set('dateTimeFormat', Common.getDateTimeFormats()['24']['millisecond']);
        wrapper = mount(React.createElement(UncontrolledDateRangeField, { startingValue: {
                start: data.date2.userSuppliedInput,
                end: data.date2.userSuppliedInput,
            } }));
        var input = wrapper.find('input');
        input.first().simulate('change', {
            target: { value: data.date2.userSuppliedInput },
        });
        input.last().simulate('change', {
            target: { value: data.date2.userSuppliedInput },
        });
        expect(input.first().render().val()).to.equal(data.date2.parsedOutput);
        expect(input.last().render().val()).to.equal(data.date2.parsedOutput);
    });
    it("should generate appropriately shifted ISO strings on change (DST)", function () {
        wrapper = mount(React.createElement(DateRangeField, { value: defaultValue(), onChange: function (updatedValue) {
                expect(updatedValue.start).to.equal(data.date5.originalISO);
                expect(updatedValue.end).to.equal(data.date5.originalISO);
            } }));
        var dateFieldInstance = wrapper.children().children().get(0);
        dateFieldInstance.props.onChange([
            DateHelpers.Blueprint.converters.TimeshiftForDatePicker(data.date5.originalISO, ISO_8601_FORMAT_ZONED),
            DateHelpers.Blueprint.converters.TimeshiftForDatePicker(data.date5.originalISO, ISO_8601_FORMAT_ZONED),
        ], true);
    });
    it("should generate appropriately shifted ISO strings on change", function () {
        wrapper = mount(React.createElement(DateRangeField, { value: defaultValue(), onChange: function (updatedValue) {
                expect(updatedValue.start).to.equal(data.date4.originalISO);
                expect(updatedValue.end).to.equal(data.date5.originalISO);
            } }));
        var dateFieldInstance = wrapper.children().children().get(0);
        dateFieldInstance.props.onChange([
            DateHelpers.Blueprint.converters.TimeshiftForDatePicker(data.date4.originalISO, ISO_8601_FORMAT_ZONED),
            DateHelpers.Blueprint.converters.TimeshiftForDatePicker(data.date5.originalISO, ISO_8601_FORMAT_ZONED),
        ], true);
    });
    it("should not allow dates beyond max future", function () {
        wrapper = mount(React.createElement(DateRangeField, { value: defaultValue(), onChange: function (updatedValue) {
                expect(updatedValue.start).to.not.equal(data.date3.maxFuture);
            } }));
        var input = wrapper.find('input').first();
        input.simulate('change', {
            target: { value: data.date3.disallowedFuture },
        });
    });
    it("should allow dates up to max future", function () {
        wrapper = mount(React.createElement(DateRangeField, { value: defaultValue(), onChange: function (updatedValue) {
                expect(updatedValue.start).to.equal(data.date3.maxFuture);
            } }));
        var input = wrapper.find('input').first();
        input.simulate('change', {
            target: { value: data.date3.maxFuture },
        });
    });
    it('calls onChange with updated value when precision changes', function () {
        wrapper = mount(React.createElement(DateRangeField, { value: {
                start: data.date4.originalISO,
                end: data.date1.originalISO,
            }, onChange: function (updatedValue) {
                expect(updatedValue.start).to.equal(data.date4.utcISOMinutes);
                expect(updatedValue.end).to.equal(data.date1.utcISOMinutes);
            } }));
        user
            .get('user')
            .get('preferences')
            .set('dateTimeFormat', Common.getDateTimeFormats()['ISO']['minute']);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudC9maWVsZHMvZGF0ZS1yYW5nZS5zcGVjLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQ3pCLE9BQU8sTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQ3RDLE9BQU8sT0FBTyxNQUFNLG9DQUFvQyxDQUFBO0FBQ3hELE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDNUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUU3QixPQUFPLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUMzRCxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUE7QUFFM0IsT0FBTyxJQUFJLE1BQU0sNkJBQTZCLENBQUE7QUFFOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ25FLE9BQU8sTUFBTSxNQUFNLGlCQUFpQixDQUFBO0FBR3BDLElBQU0sMEJBQTBCLEdBQUcsVUFBQyxFQUluQztRQUhDLGFBQWEsbUJBQUE7SUFJUCxJQUFBLEtBQUEsT0FBb0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBQSxFQUFoRCxLQUFLLFFBQUEsRUFBRSxRQUFRLFFBQWlDLENBQUE7SUFDdkQsT0FBTyxDQUNMLG9CQUFDLGNBQWMsSUFDYixLQUFLLEVBQUUsS0FBSyxFQUNaLFFBQVEsRUFBRSxVQUFDLE1BQU07WUFDZixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbEIsQ0FBQyxHQUNELENBQ0gsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELHdIQUF3SDtBQUN4SCxJ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UUFBUSxFQUFFLFVBQUMsWUFBWTtnQkFDckIsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUE7Z0JBQzdELE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1lBQzdELENBQUMsR0FDRCxDQUNILENBQUE7UUFDRCxJQUFJO2FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQzthQUNYLEdBQUcsQ0FBQyxhQUFhLENBQUM7YUFDbEIsR0FBRyxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDeEUsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBFbnp5bWUsIHsgbW91bnQgfSBmcm9tICdlbnp5bWUnXG5pbXBvcnQgQWRhcHRlciBmcm9tICdAd29qdGVrbWFqL2VuenltZS1hZGFwdGVyLXJlYWN0LTE3J1xuRW56eW1lLmNvbmZpZ3VyZSh7IGFkYXB0ZXI6IG5ldyBBZGFwdGVyKCkgfSlcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknXG5cbmltcG9ydCB7IERhdGVSYW5nZUZpZWxkLCBkZWZhdWx0VmFsdWUgfSBmcm9tICcuL2RhdGUtcmFuZ2UnXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCdcblxuaW1wb3J0IHVzZXIgZnJvbSAnLi4vc2luZ2xldG9ucy91c2VyLWluc3RhbmNlJ1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uL2ZpbHRlci1idWlsZGVyL2ZpbHRlci5zdHJ1Y3R1cmUnXG5pbXBvcnQgeyBEYXRlSGVscGVycywgSVNPXzg2MDFfRk9STUFUX1pPTkVEIH0gZnJvbSAnLi9kYXRlLWhlbHBlcnMnXG5pbXBvcnQgQ29tbW9uIGZyb20gJy4uLy4uL2pzL0NvbW1vbidcbmltcG9ydCB7IFRpbWVQcmVjaXNpb24gfSBmcm9tICdAYmx1ZXByaW50anMvZGF0ZXRpbWUnXG5cbmNvbnN0IFVuY29udHJvbGxlZERhdGVSYW5nZUZpZWxkID0gKHtcbiAgc3RhcnRpbmdWYWx1ZSxcbn06IHtcbiAgc3RhcnRpbmdWYWx1ZTogVmFsdWVUeXBlc1snZHVyaW5nJ11cbn0pID0+IHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShzdGFydGluZ1ZhbHVlKVxuICByZXR1cm4gKFxuICAgIDxEYXRlUmFuZ2VGaWVsZFxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgb25DaGFuZ2U9eyh1cGRhdGUpID0+IHtcbiAgICAgICAgc2V0VmFsdWUodXBkYXRlKVxuICAgICAgfX1cbiAgICAvPlxuICApXG59XG5cbi8vIHJlbHkgb24gc3RhdGljIGRhdGEgd2hlbiBwb3NzaWJsZSwgYnV0IGluIHRoZXNlIHdlIGNhbiB1c2UgdGhlIERhdGVIZWxwZXJzIChhIG11c3QgZm9yIHNoaWZ0ZWQgZGF0ZSB0aW1lem9uZSB0ZXN0aW5nKVxuY29uc3QgZGF0YSA9IHtcbiAgZGF0ZTE6IHtcbiAgICB0aW1lem9uZTogJ0FtZXJpY2EvU3RfSm9obnMnLFxuICAgIG9yaWdpbmFsSVNPOiAnMjAyMS0wMS0xNVQwNjo1Mzo1NC4zMTZaJyxcbiAgICBvcmlnaW5hbERhdGU6IG5ldyBEYXRlKCcyMDIxLTAxLTE1VDA2OjUzOjU0LjMxNlonKSxcbiAgICB1dGNJU09NaW51dGVzOiAnMjAyMS0wMS0xNVQwNjo1MzowMC4wMDBaJyxcbiAgICB1c2VyRm9ybWF0SVNPOiB7XG4gICAgICBtaWxsaXNlY29uZDogJzIwMjEtMDEtMTVUMDM6MjM6NTQuMzE2LTAzOjMwJyxcbiAgICAgIHNlY29uZDogJzIwMjEtMDEtMTVUMDM6MjM6NTQtMDM6MzAnLFxuICAgICAgbWludXRlOiAnMjAyMS0wMS0xNVQwMzoyMy0wMzozMCcsXG4gICAgfSxcbiAgICB1c2VyRm9ybWF0MjQ6IHtcbiAgICAgIG1pbGxpc2Vjb25kOiAnMTUgSmFuIDIwMjEgMDM6MjM6NTQuMzE2IC0wMzozMCcsXG4gICAgICBzZWNvbmQ6ICcxNSBKYW4gMjAyMSAwMzoyMzo1NCAtMDM6MzAnLFxuICAgICAgbWludXRlOiAnMTUgSmFuIDIwMjEgMDM6MjMgLTAzOjMwJyxcbiAgICB9LFxuICAgIHVzZXJGb3JtYXQxMjoge1xuICAgICAgbWlsbGlzZWNvbmQ6ICcxNSBKYW4gMjAyMSAwMzoyMzo1NC4zMTYgYW0gLTAzOjMwJyxcbiAgICAgIHNlY29uZDogJzE1IEphbiAyMDIxIDAzOjIzOjU0IGFtIC0wMzozMCcsXG4gICAgICBtaW51dGU6ICcxNSBKYW4gMjAyMSAwMzoyMyBhbSAtMDM6MzAnLFxuICAgIH0sXG4gIH0sXG4gIGRhdGUyOiB7XG4gICAgdGltZXpvbmU6ICdBbWVyaWNhL1N0X0pvaG5zJyxcbiAgICB1c2VyU3VwcGxpZWRJbnB1dDogJzE1IEphbiAyMDIxIDAzOjI0OjU0LjMxNiAtMDI6MzAnLFxuICAgIHBhcnNlZE91dHB1dDogJzE1IEphbiAyMDIxIDAyOjI0OjU0LjMxNiAtMDM6MzAnLFxuICB9LFxuICBkYXRlMzoge1xuICAgIHRpbWV6b25lOiAnRXRjL1VUQycsXG4gICAgbWF4RnV0dXJlOiBtb21lbnQoKS5hZGQoMTAsICd5ZWFycycpLnRvSVNPU3RyaW5nKCksXG4gICAgZGlzYWxsb3dlZEZ1dHVyZTogbW9tZW50KCkuYWRkKDExLCAneWVhcnMnKS50b0lTT1N0cmluZygpLFxuICB9LFxuICBkYXRlNDoge1xuICAgIHRpbWV6b25lOiAnQW1lcmljYS9TdF9Kb2hucycsXG4gICAgb3JpZ2luYWxJU086ICcyMDIxLTAxLTE0VDA2OjUzOjU0LjMxNlonLFxuICAgIG9yaWdpbmFsRGF0ZTogbmV3IERhdGUoJzIwMjEtMDEtMTRUMDY6NTM6NTQuMzE2WicpLFxuICAgIHV0Y0lTT01pbnV0ZXM6ICcyMDIxLTAxLTE0VDA2OjUzOjAwLjAwMFonLFxuICAgIHVzZXJGb3JtYXRJU086IHtcbiAgICAgIG1pbGxpc2Vjb25kOiAnMjAyMS0wMS0xNFQwMzoyMzo1NC4zMTYtMDM6MzAnLFxuICAgICAgc2Vjb25kOiAnMjAyMS0wMS0xNFQwMzoyMzo1NC0wMzozMCcsXG4gICAgICBtaW51dGU6ICcyMDIxLTAxLTE0VDAzOjIzLTAzOjMwJyxcbiAgICB9LFxuICAgIHVzZXJGb3JtYXQyNDoge1xuICAgICAgbWlsbGlzZWNvbmQ6ICcxNCBKYW4gMjAyMSAwMzoyMzo1NC4zMTYgLTAzOjMwJyxcbiAgICAgIHNlY29uZDogJzE0IEphbiAyMDIxIDAzOjIzOjU0IC0wMzozMCcsXG4gICAgICBtaW51dGU6ICcxNCBKYW4gMjAyMSAwMzoyMyAtMDM6MzAnLFxuICAgIH0sXG4gICAgdXNlckZvcm1hdDEyOiB7XG4gICAgICBtaWxsaXNlY29uZDogJzE0IEphbiAyMDIxIDAzOjIzOjU0LjMxNiBhbSAtMDM6MzAnLFxuICAgICAgc2Vjb25kOiAnMTQgSmFuIDIwMjEgMDM6MjM6NTQgYW0gLTAzOjMwJyxcbiAgICAgIG1pbnV0ZTogJzE0IEphbiAyMDIxIDAzOjIzIGFtIC0wMzozMCcsXG4gICAgfSxcbiAgfSxcbiAgLy8gdGhpcyBpcyB1c2VmdWwgZm9yIHRlc3RpbmcgZGF5bGlzdCBzYXZpbmdzIChkYXRlIDEgaXMgcHJlLCB0aGlzIGlzIHBvc3QpXG4gIGRhdGU1OiB7XG4gICAgdGltZXpvbmU6ICdBbWVyaWNhL1N0X0pvaG5zJyxcbiAgICBvcmlnaW5hbElTTzogJzIwMjEtMDQtMTVUMDU6NTM6NTQuMzE2WicsIC8vIHVzZSB0aGUgY29udmVydGVyIHRvIGZpbmQgdGhlIGFwcHJvcHJpYXRlIHNoaWZ0ZWQgZGF0ZVxuICB9LFxufVxubGV0IHdyYXBwZXI6IEVuenltZS5SZWFjdFdyYXBwZXJcbmRlc2NyaWJlKCd2ZXJpZnkgZGF0ZSByYW5nZSBmaWVsZCB3b3JrcycsICgpID0+IHtcbiAgYmVmb3JlKCgpID0+IHtcbiAgICB1c2VyLmdldCgndXNlcicpLmdldCgncHJlZmVyZW5jZXMnKS5zZXQoJ3RpbWVab25lJywgZGF0YS5kYXRlMS50aW1lem9uZSlcbiAgfSlcbiAgYWZ0ZXIoKCkgPT4ge1xuICAgIHVzZXIuZ2V0KCd1c2VyJykuZ2V0KCdwcmVmZXJlbmNlcycpLnNldCgndGltZVpvbmUnLCAnRXRjL1VUQycpXG4gIH0pXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHVzZXJcbiAgICAgIC5nZXQoJ3VzZXInKVxuICAgICAgLmdldCgncHJlZmVyZW5jZXMnKVxuICAgICAgLnNldCgnZGF0ZVRpbWVGb3JtYXQnLCBDb21tb24uZ2V0RGF0ZVRpbWVGb3JtYXRzKClbJ0lTTyddWydtaWxsaXNlY29uZCddKVxuICB9KVxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIC8vIE11c3QgdW5tb3VudCB0byBzdG9wIGxpc3RlbmluZyB0byB0aGUgdXNlciBwcmVmcyBtb2RlbCAodGhlIHVzZVRpbWVQcmVmcygpIGhvb2spXG4gICAgLy8gSGFzIHRvIGJlIHVubW91bnRlZCBiZWZvcmUgd2Ugc2V0IGFueSBwcmVmZXJlbmNlcyBzbyB3ZSBkb24ndCB0cmlnZ2VyIGFueSBvbkNoYW5nZVxuICAgIC8vIGNhbGxiYWNrcyBhZ2Fpbi5cbiAgICB3cmFwcGVyLnVubW91bnQoKVxuICAgIHVzZXJcbiAgICAgIC5nZXQoJ3VzZXInKVxuICAgICAgLmdldCgncHJlZmVyZW5jZXMnKVxuICAgICAgLnNldCgnZGF0ZVRpbWVGb3JtYXQnLCBDb21tb24uZ2V0RGF0ZVRpbWVGb3JtYXRzKClbJ0lTTyddWydtaWxsaXNlY29uZCddKVxuICB9KVxuICBpdChgc2hvdWxkIG5vdCBhbGxvdyBvdmVybGFwcGluZyBkYXRlc2AsICgpID0+IHtcbiAgICB1c2VyXG4gICAgICAuZ2V0KCd1c2VyJylcbiAgICAgIC5nZXQoJ3ByZWZlcmVuY2VzJylcbiAgICAgIC5zZXQoJ2RhdGVUaW1lRm9ybWF0JywgQ29tbW9uLmdldERhdGVUaW1lRm9ybWF0cygpWydJU08nXVsnbWlsbGlzZWNvbmQnXSlcbiAgICB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8RGF0ZVJhbmdlRmllbGRcbiAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICBzdGFydDogZGF0YS5kYXRlMS5vcmlnaW5hbElTTyxcbiAgICAgICAgICBlbmQ6IGRhdGEuZGF0ZTQub3JpZ2luYWxJU08sXG4gICAgICAgIH19XG4gICAgICAgIG9uQ2hhbmdlPXsodmFsaWRWYWx1ZSkgPT4ge1xuICAgICAgICAgIC8vIHZlcmlmeSB0aGVzZSBhcmUgb25lIGRheSBhcGFydCwgYXMgc2hvdWxkIGhhcHBlbiB3aGVuIGZlZCBvdmVybGFwcGluZyBkYXRlcyBvciBpbnZhbGlkIHZhbHVlc1xuICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUodmFsaWRWYWx1ZS5zdGFydClcbiAgICAgICAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZSh2YWxpZFZhbHVlLmVuZClcbiAgICAgICAgICBleHBlY3Qoc3RhcnQuZ2V0RGF0ZSgpKS50by5lcXVhbChlbmQuZ2V0RGF0ZSgpIC0gMSlcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKVxuICB9KVxuICBjb25zdCB2ZXJpZnlEYXRlUmVuZGVyID0gKFxuICAgIGZvcm1hdDogc3RyaW5nLFxuICAgIHByZWNpc2lvbjogVGltZVByZWNpc2lvbixcbiAgICBleHBlY3RlZFN0YXJ0OiBzdHJpbmcsXG4gICAgZXhwZWN0ZWRFbmQ6IHN0cmluZ1xuICApID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdXNlclxuICAgICAgICAuZ2V0KCd1c2VyJylcbiAgICAgICAgLmdldCgncHJlZmVyZW5jZXMnKVxuICAgICAgICAuc2V0KCdkYXRlVGltZUZvcm1hdCcsIENvbW1vbi5nZXREYXRlVGltZUZvcm1hdHMoKVtmb3JtYXRdW3ByZWNpc2lvbl0pXG4gICAgICB3cmFwcGVyID0gbW91bnQoXG4gICAgICAgIDxEYXRlUmFuZ2VGaWVsZFxuICAgICAgICAgIHZhbHVlPXt7XG4gICAgICAgICAgICBzdGFydDogZGF0YS5kYXRlNC5vcmlnaW5hbElTTyxcbiAgICAgICAgICAgIGVuZDogZGF0YS5kYXRlMS5vcmlnaW5hbElTTyxcbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiB7fX1cbiAgICAgICAgLz5cbiAgICAgIClcbiAgICAgIGV4cGVjdCh3cmFwcGVyLnJlbmRlcigpLmZpbmQoJ2lucHV0JykuZmlyc3QoKS52YWwoKSkudG8uZXF1YWwoXG4gICAgICAgIGV4cGVjdGVkU3RhcnRcbiAgICAgIClcbiAgICAgIGV4cGVjdCh3cmFwcGVyLnJlbmRlcigpLmZpbmQoJ2lucHV0JykubGFzdCgpLnZhbCgpKS50by5lcXVhbChleHBlY3RlZEVuZClcbiAgICB9XG4gIH1cbiAgaXQoXG4gICAgJ3Nob3VsZCByZW5kZXIgd2l0aCBJU08gZm9ybWF0IGFuZCBtaWxsaXNlY29uZCBwcmVjaXNpb24nLFxuICAgIHZlcmlmeURhdGVSZW5kZXIoXG4gICAgICAnSVNPJyxcbiAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgICBkYXRhLmRhdGU0LnVzZXJGb3JtYXRJU08ubWlsbGlzZWNvbmQsXG4gICAgICBkYXRhLmRhdGUxLnVzZXJGb3JtYXRJU08ubWlsbGlzZWNvbmRcbiAgICApXG4gIClcbiAgaXQoXG4gICAgJ3Nob3VsZCByZW5kZXIgd2l0aCBJU08gZm9ybWF0IGFuZCBzZWNvbmQgcHJlY2lzaW9uJyxcbiAgICB2ZXJpZnlEYXRlUmVuZGVyKFxuICAgICAgJ0lTTycsXG4gICAgICAnc2Vjb25kJyxcbiAgICAgIGRhdGEuZGF0ZTQudXNlckZvcm1hdElTTy5zZWNvbmQsXG4gICAgICBkYXRhLmRhdGUxLnVzZXJGb3JtYXRJU08uc2Vjb25kXG4gICAgKVxuICApXG4gIGl0KFxuICAgICdzaG91bGQgcmVuZGVyIHdpdGggSVNPIGZvcm1hdCBhbmQgbWludXRlIHByZWNpc2lvbicsXG4gICAgdmVyaWZ5RGF0ZVJlbmRlcihcbiAgICAgICdJU08nLFxuICAgICAgJ21pbnV0ZScsXG4gICAgICBkYXRhLmRhdGU0LnVzZXJGb3JtYXRJU08ubWludXRlLFxuICAgICAgZGF0YS5kYXRlMS51c2VyRm9ybWF0SVNPLm1pbnV0ZVxuICAgIClcbiAgKVxuICBpdChcbiAgICAnc2hvdWxkIHJlbmRlciB3aXRoIDI0aHIgZm9ybWF0IGFuZCBtaWxsaXNlY29uZCBwcmVjaXNpb24nLFxuICAgIHZlcmlmeURhdGVSZW5kZXIoXG4gICAgICAnMjQnLFxuICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICAgIGRhdGEuZGF0ZTQudXNlckZvcm1hdDI0Lm1pbGxpc2Vjb25kLFxuICAgICAgZGF0YS5kYXRlMS51c2VyRm9ybWF0MjQubWlsbGlzZWNvbmRcbiAgICApXG4gIClcbiAgaXQoXG4gICAgJ3Nob3VsZCByZW5kZXIgd2l0aCAyNGhyIGZvcm1hdCBhbmQgc2Vjb25kIHByZWNpc2lvbicsXG4gICAgdmVyaWZ5RGF0ZVJlbmRlcihcbiAgICAgICcyNCcsXG4gICAgICAnc2Vjb25kJyxcbiAgICAgIGRhdGEuZGF0ZTQudXNlckZvcm1hdDI0LnNlY29uZCxcbiAgICAgIGRhdGEuZGF0ZTEudXNlckZvcm1hdDI0LnNlY29uZFxuICAgIClcbiAgKVxuICBpdChcbiAgICAnc2hvdWxkIHJlbmRlciB3aXRoIDI0aHIgZm9ybWF0IGFuZCBtaW51dGUgcHJlY2lzaW9uJyxcbiAgICB2ZXJpZnlEYXRlUmVuZGVyKFxuICAgICAgJzI0JyxcbiAgICAgICdtaW51dGUnLFxuICAgICAgZGF0YS5kYXRlNC51c2VyRm9ybWF0MjQubWludXRlLFxuICAgICAgZGF0YS5kYXRlMS51c2VyRm9ybWF0MjQubWludXRlXG4gICAgKVxuICApXG4gIGl0KFxuICAgICdzaG91bGQgcmVuZGVyIHdpdGggMTJociBmb3JtYXQgYW5kIG1pbGxpc2Vjb25kIHByZWNpc2lvbicsXG4gICAgdmVyaWZ5RGF0ZVJlbmRlcihcbiAgICAgICcxMicsXG4gICAgICAnbWlsbGlzZWNvbmQnLFxuICAgICAgZGF0YS5kYXRlNC51c2VyRm9ybWF0MTIubWlsbGlzZWNvbmQsXG4gICAgICBkYXRhLmRhdGUxLnVzZXJGb3JtYXQxMi5taWxsaXNlY29uZFxuICAgIClcbiAgKVxuICBpdChcbiAgICAnc2hvdWxkIHJlbmRlciB3aXRoIDEyaHIgZm9ybWF0IGFuZCBzZWNvbmQgcHJlY2lzaW9uJyxcbiAgICB2ZXJpZnlEYXRlUmVuZGVyKFxuICAgICAgJzEyJyxcbiAgICAgICdzZWNvbmQnLFxuICAgICAgZGF0YS5kYXRlNC51c2VyRm9ybWF0MTIuc2Vjb25kLFxuICAgICAgZGF0YS5kYXRlMS51c2VyRm9ybWF0MTIuc2Vjb25kXG4gICAgKVxuICApXG4gIGl0KFxuICAgICdzaG91bGQgcmVuZGVyIHdpdGggMTJociBmb3JtYXQgYW5kIG1pbnV0ZSBwcmVjaXNpb24nLFxuICAgIHZlcmlmeURhdGVSZW5kZXIoXG4gICAgICAnMTInLFxuICAgICAgJ21pbnV0ZScsXG4gICAgICBkYXRhLmRhdGU0LnVzZXJGb3JtYXQxMi5taW51dGUsXG4gICAgICBkYXRhLmRhdGUxLnVzZXJGb3JtYXQxMi5taW51dGVcbiAgICApXG4gIClcbiAgaXQoYHNob3VsZCBwYXJzZSB3aXRoIHVzZXIncyBwcmVmIHRpbWV6b25lYCwgKCkgPT4ge1xuICAgIC8vIGdpc3QgaXMgdXNlciBlbnRlcnMgYSB0aW1lIGluIGEgZGlmZiB0aW1lIGZyb20gdGhlaXIgcHJlZiwgb24gYmx1ciB3ZSBhZGp1c3QgaXQgdG8gdGhlaXIgcHJlZmVyZW5jZVxuICAgIHVzZXJcbiAgICAgIC5nZXQoJ3VzZXInKVxuICAgICAgLmdldCgncHJlZmVyZW5jZXMnKVxuICAgICAgLnNldCgnZGF0ZVRpbWVGb3JtYXQnLCBDb21tb24uZ2V0RGF0ZVRpbWVGb3JtYXRzKClbJzI0J11bJ21pbGxpc2Vjb25kJ10pXG5cbiAgICB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8VW5jb250cm9sbGVkRGF0ZVJhbmdlRmllbGRcbiAgICAgICAgc3RhcnRpbmdWYWx1ZT17e1xuICAgICAgICAgIHN0YXJ0OiBkYXRhLmRhdGUyLnVzZXJTdXBwbGllZElucHV0LFxuICAgICAgICAgIGVuZDogZGF0YS5kYXRlMi51c2VyU3VwcGxpZWRJbnB1dCxcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKVxuICAgIGNvbnN0IGlucHV0ID0gd3JhcHBlci5maW5kKCdpbnB1dCcpXG4gICAgaW5wdXQuZmlyc3QoKS5zaW11bGF0ZSgnY2hhbmdlJywge1xuICAgICAgdGFyZ2V0OiB7IHZhbHVlOiBkYXRhLmRhdGUyLnVzZXJTdXBwbGllZElucHV0IH0sXG4gICAgfSlcbiAgICBpbnB1dC5sYXN0KCkuc2ltdWxhdGUoJ2NoYW5nZScsIHtcbiAgICAgIHRhcmdldDogeyB2YWx1ZTogZGF0YS5kYXRlMi51c2VyU3VwcGxpZWRJbnB1dCB9LFxuICAgIH0pXG4gICAgZXhwZWN0KGlucHV0LmZpcnN0KCkucmVuZGVyKCkudmFsKCkpLnRvLmVxdWFsKGRhdGEuZGF0ZTIucGFyc2VkT3V0cHV0KVxuICAgIGV4cGVjdChpbnB1dC5sYXN0KCkucmVuZGVyKCkudmFsKCkpLnRvLmVxdWFsKGRhdGEuZGF0ZTIucGFyc2VkT3V0cHV0KVxuICB9KVxuICBpdChgc2hvdWxkIGdlbmVyYXRlIGFwcHJvcHJpYXRlbHkgc2hpZnRlZCBJU08gc3RyaW5ncyBvbiBjaGFuZ2UgKERTVClgLCAoKSA9PiB7XG4gICAgd3JhcHBlciA9IG1vdW50KFxuICAgICAgPERhdGVSYW5nZUZpZWxkXG4gICAgICAgIHZhbHVlPXtkZWZhdWx0VmFsdWUoKX1cbiAgICAgICAgb25DaGFuZ2U9eyh1cGRhdGVkVmFsdWUpID0+IHtcbiAgICAgICAgICBleHBlY3QodXBkYXRlZFZhbHVlLnN0YXJ0KS50by5lcXVhbChkYXRhLmRhdGU1Lm9yaWdpbmFsSVNPKVxuICAgICAgICAgIGV4cGVjdCh1cGRhdGVkVmFsdWUuZW5kKS50by5lcXVhbChkYXRhLmRhdGU1Lm9yaWdpbmFsSVNPKVxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApXG4gICAgY29uc3QgZGF0ZUZpZWxkSW5zdGFuY2UgPSB3cmFwcGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5nZXQoMClcbiAgICBkYXRlRmllbGRJbnN0YW5jZS5wcm9wcy5vbkNoYW5nZShcbiAgICAgIFtcbiAgICAgICAgRGF0ZUhlbHBlcnMuQmx1ZXByaW50LmNvbnZlcnRlcnMuVGltZXNoaWZ0Rm9yRGF0ZVBpY2tlcihcbiAgICAgICAgICBkYXRhLmRhdGU1Lm9yaWdpbmFsSVNPLFxuICAgICAgICAgIElTT184NjAxX0ZPUk1BVF9aT05FRFxuICAgICAgICApLFxuICAgICAgICBEYXRlSGVscGVycy5CbHVlcHJpbnQuY29udmVydGVycy5UaW1lc2hpZnRGb3JEYXRlUGlja2VyKFxuICAgICAgICAgIGRhdGEuZGF0ZTUub3JpZ2luYWxJU08sXG4gICAgICAgICAgSVNPXzg2MDFfRk9STUFUX1pPTkVEXG4gICAgICAgICksXG4gICAgICBdLFxuICAgICAgdHJ1ZVxuICAgIClcbiAgfSlcbiAgaXQoYHNob3VsZCBnZW5lcmF0ZSBhcHByb3ByaWF0ZWx5IHNoaWZ0ZWQgSVNPIHN0cmluZ3Mgb24gY2hhbmdlYCwgKCkgPT4ge1xuICAgIHdyYXBwZXIgPSBtb3VudChcbiAgICAgIDxEYXRlUmFuZ2VGaWVsZFxuICAgICAgICB2YWx1ZT17ZGVmYXVsdFZhbHVlKCl9XG4gICAgICAgIG9uQ2hhbmdlPXsodXBkYXRlZFZhbHVlKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KHVwZGF0ZWRWYWx1ZS5zdGFydCkudG8uZXF1YWwoZGF0YS5kYXRlNC5vcmlnaW5hbElTTylcbiAgICAgICAgICBleHBlY3QodXBkYXRlZFZhbHVlLmVuZCkudG8uZXF1YWwoZGF0YS5kYXRlNS5vcmlnaW5hbElTTylcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKVxuICAgIGNvbnN0IGRhdGVGaWVsZEluc3RhbmNlID0gd3JhcHBlci5jaGlsZHJlbigpLmNoaWxkcmVuKCkuZ2V0KDApXG4gICAgZGF0ZUZpZWxkSW5zdGFuY2UucHJvcHMub25DaGFuZ2UoXG4gICAgICBbXG4gICAgICAgIERhdGVIZWxwZXJzLkJsdWVwcmludC5jb252ZXJ0ZXJzLlRpbWVzaGlmdEZvckRhdGVQaWNrZXIoXG4gICAgICAgICAgZGF0YS5kYXRlNC5vcmlnaW5hbElTTyxcbiAgICAgICAgICBJU09fODYwMV9GT1JNQVRfWk9ORURcbiAgICAgICAgKSxcbiAgICAgICAgRGF0ZUhlbHBlcnMuQmx1ZXByaW50LmNvbnZlcnRlcnMuVGltZXNoaWZ0Rm9yRGF0ZVBpY2tlcihcbiAgICAgICAgICBkYXRhLmRhdGU1Lm9yaWdpbmFsSVNPLFxuICAgICAgICAgIElTT184NjAxX0ZPUk1BVF9aT05FRFxuICAgICAgICApLFxuICAgICAgXSxcbiAgICAgIHRydWVcbiAgICApXG4gIH0pXG4gIGl0KGBzaG91bGQgbm90IGFsbG93IGRhdGVzIGJleW9uZCBtYXggZnV0dXJlYCwgKCkgPT4ge1xuICAgIHdyYXBwZXIgPSBtb3VudChcbiAgICAgIDxEYXRlUmFuZ2VGaWVsZFxuICAgICAgICB2YWx1ZT17ZGVmYXVsdFZhbHVlKCl9XG4gICAgICAgIG9uQ2hhbmdlPXsodXBkYXRlZFZhbHVlKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KHVwZGF0ZWRWYWx1ZS5zdGFydCkudG8ubm90LmVxdWFsKGRhdGEuZGF0ZTMubWF4RnV0dXJlKVxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApXG4gICAgY29uc3QgaW5wdXQgPSB3cmFwcGVyLmZpbmQoJ2lucHV0JykuZmlyc3QoKVxuICAgIGlucHV0LnNpbXVsYXRlKCdjaGFuZ2UnLCB7XG4gICAgICB0YXJnZXQ6IHsgdmFsdWU6IGRhdGEuZGF0ZTMuZGlzYWxsb3dlZEZ1dHVyZSB9LFxuICAgIH0pXG4gIH0pXG4gIGl0KGBzaG91bGQgYWxsb3cgZGF0ZXMgdXAgdG8gbWF4IGZ1dHVyZWAsICgpID0+IHtcbiAgICB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8RGF0ZVJhbmdlRmllbGRcbiAgICAgICAgdmFsdWU9e2RlZmF1bHRWYWx1ZSgpfVxuICAgICAgICBvbkNoYW5nZT17KHVwZGF0ZWRWYWx1ZSkgPT4ge1xuICAgICAgICAgIGV4cGVjdCh1cGRhdGVkVmFsdWUuc3RhcnQpLnRvLmVxdWFsKGRhdGEuZGF0ZTMubWF4RnV0dXJlKVxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApXG4gICAgY29uc3QgaW5wdXQgPSB3cmFwcGVyLmZpbmQoJ2lucHV0JykuZmlyc3QoKVxuICAgIGlucHV0LnNpbXVsYXRlKCdjaGFuZ2UnLCB7XG4gICAgICB0YXJnZXQ6IHsgdmFsdWU6IGRhdGEuZGF0ZTMubWF4RnV0dXJlIH0sXG4gICAgfSlcbiAgfSlcbiAgaXQoJ2NhbGxzIG9uQ2hhbmdlIHdpdGggdXBkYXRlZCB2YWx1ZSB3aGVuIHByZWNpc2lvbiBjaGFuZ2VzJywgKCkgPT4ge1xuICAgIHdyYXBwZXIgPSBtb3VudChcbiAgICAgIDxEYXRlUmFuZ2VGaWVsZFxuICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgIHN0YXJ0OiBkYXRhLmRhdGU0Lm9yaWdpbmFsSVNPLFxuICAgICAgICAgIGVuZDogZGF0YS5kYXRlMS5vcmlnaW5hbElTTyxcbiAgICAgICAgfX1cbiAgICAgICAgb25DaGFuZ2U9eyh1cGRhdGVkVmFsdWUpID0+IHtcbiAgICAgICAgICBleHBlY3QodXBkYXRlZFZhbHVlLnN0YXJ0KS50by5lcXVhbChkYXRhLmRhdGU0LnV0Y0lTT01pbnV0ZXMpXG4gICAgICAgICAgZXhwZWN0KHVwZGF0ZWRWYWx1ZS5lbmQpLnRvLmVxdWFsKGRhdGEuZGF0ZTEudXRjSVNPTWludXRlcylcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKVxuICAgIHVzZXJcbiAgICAgIC5nZXQoJ3VzZXInKVxuICAgICAgLmdldCgncHJlZmVyZW5jZXMnKVxuICAgICAgLnNldCgnZGF0ZVRpbWVGb3JtYXQnLCBDb21tb24uZ2V0RGF0ZVRpbWVGb3JtYXRzKClbJ0lTTyddWydtaW51dGUnXSlcbiAgfSlcbn0pXG4iXX0=