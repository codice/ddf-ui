/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import { __assign } from "tslib";
import * as React from 'react';
import { isResourceSizeFilterClass, ResourceSizeFilterClass, sizeUnits, } from '../filter-builder/filter.structure';
import { EnterKeySubmitProps } from '../custom-events/enter-key-submit';
import { NumberField } from './number';
import Autocomplete from '@mui/material/Autocomplete';
import LinearProgress from '@mui/material/LinearProgress';
import TextField from '@mui/material/TextField';
import { castAndParseUnit, castAndParseValue } from './resource-size-range';
var defaultValue = 0;
var defaultUnit = 'B';
var parseFilter = function (props) {
    var _a;
    var filter = props.filter;
    var newValue = castAndParseValue(filter.value, defaultValue);
    var newUnit = castAndParseUnit((_a = filter.context) === null || _a === void 0 ? void 0 : _a.units, defaultUnit);
    return new ResourceSizeFilterClass(__assign(__assign({}, filter), { value: newValue, context: __assign(__assign({}, filter.context), { units: newUnit }) }));
};
export var UnitSelector = function (_a) {
    var value = _a.value, onChange = _a.onChange;
    return (React.createElement(Autocomplete, { value: value, onChange: function (_event, newValue) {
            onChange(newValue || defaultUnit);
        }, options: sizeUnits, className: "min-w-24 ml-2", renderInput: function (params) { return React.createElement(TextField, __assign({}, params, { size: "small" })); }, disableClearable: true }));
};
var ValidatedResourceSizeField = function (props) {
    React.useEffect(function () {
        var timeoutId = window.setTimeout(function () {
            if (!isResourceSizeFilterClass(props.filter)) {
                props.setFilter(parseFilter(props));
            }
        }, 250);
        return function () {
            window.clearTimeout(timeoutId);
        };
    }, [props]);
    if (!isResourceSizeFilterClass(props.filter)) {
        return React.createElement(LinearProgress, null);
    }
    return React.createElement(ResourceSizeField, { filter: props.filter, setFilter: props.setFilter });
};
var ResourceSizeField = function (_a) {
    var filter = _a.filter, setFilter = _a.setFilter;
    var handleValueChange = function (newValue) {
        setFilter(new ResourceSizeFilterClass(__assign(__assign({}, filter), { value: newValue })));
    };
    var handleUnitChange = function (newUnit) {
        setFilter(new ResourceSizeFilterClass(__assign(__assign({}, filter), { context: { units: newUnit } })));
    };
    return (React.createElement("div", { className: "flex flex-row items-start" },
        React.createElement(NumberField, __assign({ type: "float", value: filter.value.toString(), onChange: handleValueChange }, EnterKeySubmitProps)),
        React.createElement(UnitSelector, { value: filter.context.units, onChange: handleUnitChange })));
};
export { ValidatedResourceSizeField as ResourceSizeField };
//# sourceMappingURL=data:application/json;base64,