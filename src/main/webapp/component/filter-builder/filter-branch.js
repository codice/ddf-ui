import { __assign, __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from 'react';
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
import FilterLeaf from './filter-leaf';
import { useTheme } from '@mui/material/styles';
import { HoverButton } from '../button/hover';
import { FilterBuilderClass, FilterClass, isFilterBuilderClass, } from './filter.structure';
import TextField from '@mui/material/TextField';
import MenuItem from '@mui/material/MenuItem';
import AddIcon from '@mui/icons-material/Add';
import { Memo } from '../memo/memo';
var OperatorData = [
    {
        label: 'AND',
        value: 'AND',
    },
    {
        label: 'OR',
        value: 'OR',
    },
];
var ChildFilter = function (_a) {
    var parentFilter = _a.parentFilter, filter = _a.filter, setFilter = _a.setFilter, index = _a.index, isFirst = _a.isFirst, errorListener = _a.errorListener;
    return (_jsxs(_Fragment, { children: [!isFirst ? (_jsxs(Grid, { "data-id": "filter-settings-container", container: true, direction: "row", alignItems: "center", justifyContent: "center", wrap: "nowrap", className: "relative", children: [_jsx(Grid, { item: true, className: "p-2", children: _jsx(TextField, { "data-id": "filter-operator-select", value: parentFilter.type, onChange: function (e) {
                                var newOperator = e.target.value;
                                setFilter(new FilterBuilderClass(__assign(__assign({}, parentFilter), { type: newOperator })));
                            }, select: true, variant: "outlined", size: "small", children: OperatorData.map(function (operatorInfo) {
                                return (_jsx(MenuItem, { value: operatorInfo.value, children: operatorInfo.label }, operatorInfo.value));
                            }) }) }), _jsx(Grid, { item: true, className: "ml-auto position absolute right-0", children: _jsx(Button, { "data-id": "remove-child-filter-button", color: "primary", onClick: function () {
                                var newFilters = parentFilter.filters.slice(0);
                                newFilters.splice(index, 1);
                                setFilter(new FilterBuilderClass(__assign(__assign({}, parentFilter), { filters: newFilters })));
                            }, children: "Remove" }) })] })) : null, isFilterBuilderClass(filter) ? (_jsx(FilterBranch, { filter: filter, setFilter: function (newChildFilter) {
                    var newFilters = parentFilter.filters.slice(0);
                    newFilters.splice(index, 1, newChildFilter);
                    setFilter(new FilterBuilderClass(__assign(__assign({}, parentFilter), { filters: newFilters })));
                }, errorListener: errorListener })) : (_jsx(FilterLeaf, { filter: filter, setFilter: function (newChildFilter) {
                    var newFilters = parentFilter.filters.slice(0);
                    newFilters.splice(index, 1, newChildFilter);
                    setFilter(new FilterBuilderClass(__assign(__assign({}, parentFilter), { filters: newFilters })));
                }, errorListener: errorListener }))] }));
};
var FilterBranch = function (_a) {
    var filter = _a.filter, setFilter = _a.setFilter, _b = _a.root, root = _b === void 0 ? false : _b, errorListener = _a.errorListener;
    var _c = __read(React.useState(false), 2), hover = _c[0], setHover = _c[1];
    var theme = useTheme();
    /**
     * Any non root branches lacking filters are pruned.
     */
    React.useEffect(function () {
        filter.filters.forEach(function (childFilter, index) {
            if (isFilterBuilderClass(childFilter) &&
                childFilter.filters.length === 0) {
                var newFilters = filter.filters.slice(0);
                newFilters.splice(index, 1);
                setFilter(new FilterBuilderClass(__assign(__assign({}, filter), { filters: newFilters })));
            }
        });
    }, [filter]);
    return (_jsx("div", { onMouseOver: function () {
            setHover(true);
        }, onMouseOut: function () {
            setHover(false);
        }, children: _jsx("div", { className: root
                ? ' shadow-none'
                : 'px-3 py-2 MuiPaper-box-shadow border-black border-2 border-opacity-30', children: _jsx("div", { className: " relative", children: _jsxs("div", { "data-id": root ? 'root-filter-group-container' : 'filter-group-container', className: "".concat(filter.negated ? 'border px-3 py-4 mt-2' : '', " transition-all duration-200"), style: {
                        borderColor: theme.palette.primary.main,
                    }, children: [_jsx(Grid, { item: true, className: "w-full filter-actions", children: _jsxs(Grid, { container: true, direction: "row", alignItems: "center", className: "w-full", children: [_jsx(Grid, { item: true, children: _jsxs(Button, { "data-id": "add-field-button", color: "primary", onClick: function () {
                                                setFilter(new FilterBuilderClass(__assign(__assign({}, filter), { filters: filter.filters.concat([new FilterClass()]) })));
                                            }, children: [_jsx(AddIcon, { className: "Mui-text-text-primary" }), "Field"] }) }), _jsx(Grid, { item: true, children: _jsxs(Button, { "data-id": "add-group-button", color: "primary", onClick: function () {
                                                setFilter(new FilterBuilderClass(__assign(__assign({}, filter), { filters: filter.filters.concat([
                                                        new FilterBuilderClass(),
                                                    ]) })));
                                            }, children: [_jsx(AddIcon, { className: "Mui-text-text-primary" }), "Group"] }) }), filter.filters.length !== 0 ? (_jsx(Grid, { item: true, className: "ml-auto", children: _jsx(Button, { "data-id": "remove-first-filter-button", color: "primary", onClick: function () {
                                                var newFilters = filter.filters.slice(0);
                                                newFilters.splice(0, 1);
                                                setFilter(new FilterBuilderClass(__assign(__assign({}, filter), { filters: newFilters })));
                                            }, children: "Remove" }) })) : null] }) }), filter.negated ? (_jsx(_Fragment, { children: _jsx(HoverButton, { className: "absolute top-0 left-1/2 transform -translate-y-1/2 -translate-x-1/2 py-0 px-1 text-xs z-10", color: "primary", variant: "contained", onClick: function () {
                                    setFilter(new FilterBuilderClass(__assign(__assign({}, filter), { negated: !filter.negated })));
                                }, children: function (_a) {
                                    var hover = _a.hover;
                                    if (hover) {
                                        return _jsx(_Fragment, { children: "Remove Not" });
                                    }
                                    else {
                                        return _jsx(_Fragment, { children: "NOT" });
                                    }
                                } }) })) : (_jsx(_Fragment, { children: _jsx(Button, { "data-id": "not-group-button", className: "".concat(hover ? 'opacity-25' : 'opacity-0', " hover:opacity-100 focus:opacity-100 transition-opacity duration-200 absolute top-0 left-1/2 transform -translate-y-1/2 -translate-x-1/2 py-0 px-1 text-xs z-10"), color: "primary", variant: "contained", onClick: function () {
                                    setFilter(new FilterBuilderClass(__assign(__assign({}, filter), { negated: !filter.negated })));
                                }, children: "+ Not Group" }) })), _jsx(Memo, { dependencies: [filter], children: _jsx(_Fragment, { children: filter.filters.map(function (childFilter, index) {
                                    return (_jsx(ChildFilter, { parentFilter: filter, filter: childFilter, setFilter: setFilter, index: index, isFirst: index === 0, isLast: index === filter.filters.length - 1, errorListener: errorListener }, childFilter.id));
                                }) }) })] }) }) }) }));
};
export default FilterBranch;
//# sourceMappingURL=data:application/json;base64,