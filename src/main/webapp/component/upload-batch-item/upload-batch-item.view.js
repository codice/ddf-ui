import { __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import user from '../singletons/user-instance';
import { UploadSummaryViewReact } from '../upload-summary/upload-summary.view';
import { Link } from 'react-router-dom';
import * as React from 'react';
import { useListenTo } from '../selection-checkbox/useBackbone.hook';
import Button from '@mui/material/Button';
import Paper from '@mui/material/Paper';
import CloseIcon from '@mui/icons-material/Close';
import Common from '../../js/Common';
import { TypedUserInstance } from '../singletons/TypedUser';
export var UploadBatchItemViewReact = function (_a) {
    var model = _a.model;
    var _b = __read(React.useState(model.toJSON()), 2), modelJson = _b[0], setModelJson = _b[1];
    useListenTo(model, 'change:finished', function () {
        setModelJson(model.toJSON());
    });
    var id = modelJson.id, finished = modelJson.finished, sentAt = modelJson.sentAt, interrupted = modelJson.interrupted;
    var when = Common.getRelativeDate(sentAt);
    var specificWhen = TypedUserInstance.getMomentDate(sentAt);
    return (_jsxs(Paper, { className: "".concat(finished ? 'is-finished' : '', "  flex flex-row items-stretch flex-nowrap w-full justify-between p-2"), children: [_jsx(Link, { to: "/uploads/".concat(id), style: { display: 'block', padding: '0px' }, className: "w-full shrink no-underline", title: specificWhen, children: _jsxs("div", { className: "upload-details", children: [_jsxs("div", { className: "details-date is-medium-font", children: [_jsx("span", { className: "fa fa-upload p-2" }), _jsx("span", { children: when })] }), _jsx("div", { className: "details-summary mt-2", children: _jsx(UploadSummaryViewReact, { model: model }) })] }) }), _jsx("div", { className: "upload-actions shrink-0 ", children: finished || interrupted ? (_jsx(_Fragment, { children: _jsx(Button, { className: " h-full w-12", onClick: function () {
                            model.collection.remove(model);
                            user.get('user').get('preferences').savePreferences();
                        }, children: _jsx(CloseIcon, {}) }) })) : (_jsx(_Fragment, { children: _jsx(Button, { className: " h-full w-12", onClick: function () {
                            model.cancel();
                        }, children: _jsx("span", { className: "fa fa-stop" }) }) })) })] }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWJhdGNoLWl0ZW0udmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvdXBsb2FkLWJhdGNoLWl0ZW0vdXBsb2FkLWJhdGNoLWl0ZW0udmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBRUosT0FBTyxJQUFJLE1BQU0sNkJBQTZCLENBQUE7QUFDOUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUE7QUFDOUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ3ZDLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQzlCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQTtBQUNwRSxPQUFPLE1BQU0sTUFBTSxzQkFBc0IsQ0FBQTtBQUN6QyxPQUFPLEtBQUssTUFBTSxxQkFBcUIsQ0FBQTtBQUN2QyxPQUFPLFNBQVMsTUFBTSwyQkFBMkIsQ0FBQTtBQUNqRCxPQUFPLE1BQU0sTUFBTSxpQkFBaUIsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUUzRCxNQUFNLENBQUMsSUFBTSx3QkFBd0IsR0FBRyxVQUFDLEVBQXlCO1FBQXZCLEtBQUssV0FBQTtJQUN4QyxJQUFBLEtBQUEsT0FBNEIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBQSxFQUF6RCxTQUFTLFFBQUEsRUFBRSxZQUFZLFFBQWtDLENBQUE7SUFDaEUsV0FBVyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtRQUNwQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7SUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFDTSxJQUFBLEVBQUUsR0FBb0MsU0FBUyxHQUE3QyxFQUFFLFFBQVEsR0FBMEIsU0FBUyxTQUFuQyxFQUFFLE1BQU0sR0FBa0IsU0FBUyxPQUEzQixFQUFFLFdBQVcsR0FBSyxTQUFTLFlBQWQsQ0FBYztJQUN2RCxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzNDLElBQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUU1RCxPQUFPLENBQ0wsTUFBQyxLQUFLLElBQ0osU0FBUyxFQUFFLFVBQ1QsUUFBUSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUseUVBQ3VDLGFBRXRFLEtBQUMsSUFBSSxJQUNILEVBQUUsRUFBRSxtQkFBWSxFQUFFLENBQUUsRUFDcEIsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQzNDLFNBQVMsRUFBQyw0QkFBNEIsRUFDdEMsS0FBSyxFQUFFLFlBQVksWUFFbkIsZUFBSyxTQUFTLEVBQUMsZ0JBQWdCLGFBQzdCLGVBQUssU0FBUyxFQUFDLDZCQUE2QixhQUMxQyxlQUFNLFNBQVMsRUFBQyxrQkFBa0IsR0FBRyxFQUNyQyx5QkFBTyxJQUFJLEdBQVEsSUFDZixFQUNOLGNBQUssU0FBUyxFQUFDLHNCQUFzQixZQUNuQyxLQUFDLHNCQUFzQixJQUFDLEtBQUssRUFBRSxLQUFLLEdBQUksR0FDcEMsSUFDRixHQUNELEVBQ1AsY0FBSyxTQUFTLEVBQUMsMEJBQTBCLFlBQ3RDLFFBQVEsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ3pCLDRCQUNFLEtBQUMsTUFBTSxJQUNMLFNBQVMsRUFBQyxjQUFjLEVBQ3hCLE9BQU8sRUFBRTs0QkFDUCxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTs0QkFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7d0JBQ3ZELENBQUMsWUFFRCxLQUFDLFNBQVMsS0FBRyxHQUNOLEdBQ1IsQ0FDSixDQUFDLENBQUMsQ0FBQyxDQUNGLDRCQUNFLEtBQUMsTUFBTSxJQUNMLFNBQVMsRUFBQyxjQUFjLEVBQ3hCLE9BQU8sRUFBRTs0QkFDUCxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUE7d0JBQ2hCLENBQUMsWUFFRCxlQUFNLFNBQVMsRUFBQyxZQUFZLEdBQUcsR0FDeEIsR0FDUixDQUNKLEdBQ0csSUFDQSxDQUNULENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cblxuaW1wb3J0IHVzZXIgZnJvbSAnLi4vc2luZ2xldG9ucy91c2VyLWluc3RhbmNlJ1xuaW1wb3J0IHsgVXBsb2FkU3VtbWFyeVZpZXdSZWFjdCB9IGZyb20gJy4uL3VwbG9hZC1zdW1tYXJ5L3VwbG9hZC1zdW1tYXJ5LnZpZXcnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlTGlzdGVuVG8gfSBmcm9tICcuLi9zZWxlY3Rpb24tY2hlY2tib3gvdXNlQmFja2JvbmUuaG9vaydcbmltcG9ydCBCdXR0b24gZnJvbSAnQG11aS9tYXRlcmlhbC9CdXR0b24nXG5pbXBvcnQgUGFwZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9QYXBlcidcbmltcG9ydCBDbG9zZUljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9DbG9zZSdcbmltcG9ydCBDb21tb24gZnJvbSAnLi4vLi4vanMvQ29tbW9uJ1xuaW1wb3J0IHsgVHlwZWRVc2VySW5zdGFuY2UgfSBmcm9tICcuLi9zaW5nbGV0b25zL1R5cGVkVXNlcidcblxuZXhwb3J0IGNvbnN0IFVwbG9hZEJhdGNoSXRlbVZpZXdSZWFjdCA9ICh7IG1vZGVsIH06IHsgbW9kZWw6IGFueSB9KSA9PiB7XG4gIGNvbnN0IFttb2RlbEpzb24sIHNldE1vZGVsSnNvbl0gPSBSZWFjdC51c2VTdGF0ZShtb2RlbC50b0pTT04oKSlcbiAgdXNlTGlzdGVuVG8obW9kZWwsICdjaGFuZ2U6ZmluaXNoZWQnLCAoKSA9PiB7XG4gICAgc2V0TW9kZWxKc29uKG1vZGVsLnRvSlNPTigpKVxuICB9KVxuICBjb25zdCB7IGlkLCBmaW5pc2hlZCwgc2VudEF0LCBpbnRlcnJ1cHRlZCB9ID0gbW9kZWxKc29uXG4gIGNvbnN0IHdoZW4gPSBDb21tb24uZ2V0UmVsYXRpdmVEYXRlKHNlbnRBdClcbiAgY29uc3Qgc3BlY2lmaWNXaGVuID0gVHlwZWRVc2VySW5zdGFuY2UuZ2V0TW9tZW50RGF0ZShzZW50QXQpXG5cbiAgcmV0dXJuIChcbiAgICA8UGFwZXJcbiAgICAgIGNsYXNzTmFtZT17YCR7XG4gICAgICAgIGZpbmlzaGVkID8gJ2lzLWZpbmlzaGVkJyA6ICcnXG4gICAgICB9ICBmbGV4IGZsZXgtcm93IGl0ZW1zLXN0cmV0Y2ggZmxleC1ub3dyYXAgdy1mdWxsIGp1c3RpZnktYmV0d2VlbiBwLTJgfVxuICAgID5cbiAgICAgIDxMaW5rXG4gICAgICAgIHRvPXtgL3VwbG9hZHMvJHtpZH1gfVxuICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnYmxvY2snLCBwYWRkaW5nOiAnMHB4JyB9fVxuICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgc2hyaW5rIG5vLXVuZGVybGluZVwiXG4gICAgICAgIHRpdGxlPXtzcGVjaWZpY1doZW59XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBsb2FkLWRldGFpbHNcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRldGFpbHMtZGF0ZSBpcy1tZWRpdW0tZm9udFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmEgZmEtdXBsb2FkIHAtMlwiIC8+XG4gICAgICAgICAgICA8c3Bhbj57d2hlbn08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXRhaWxzLXN1bW1hcnkgbXQtMlwiPlxuICAgICAgICAgICAgPFVwbG9hZFN1bW1hcnlWaWV3UmVhY3QgbW9kZWw9e21vZGVsfSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvTGluaz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBsb2FkLWFjdGlvbnMgc2hyaW5rLTAgXCI+XG4gICAgICAgIHtmaW5pc2hlZCB8fCBpbnRlcnJ1cHRlZCA/IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCIgaC1mdWxsIHctMTJcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9kZWwuY29sbGVjdGlvbi5yZW1vdmUobW9kZWwpXG4gICAgICAgICAgICAgICAgdXNlci5nZXQoJ3VzZXInKS5nZXQoJ3ByZWZlcmVuY2VzJykuc2F2ZVByZWZlcmVuY2VzKClcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiIGgtZnVsbCB3LTEyXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIG1vZGVsLmNhbmNlbCgpXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZhIGZhLXN0b3BcIiAvPlxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L1BhcGVyPlxuICApXG59XG4iXX0=