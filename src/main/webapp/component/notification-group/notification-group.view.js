import { __assign } from "tslib";
import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import React from 'react';
import { UploadBatchItemViewReact } from '../upload-batch-item/upload-batch-item.view';
import userNotifications from '../singletons/user-notifications';
import user from '../singletons/user-instance';
import Button from '@mui/material/Button';
import CloseIcon from '@mui/icons-material/Close';
import { useDialogState } from '../hooks/useDialogState';
export var NotificationGroupViewReact = function (_a) {
    var date = _a.date, filter = _a.filter;
    var dialog = useDialogState();
    var relevantNotifications = userNotifications.filter(filter);
    if (relevantNotifications.length === 0) {
        return null;
    }
    return (_jsxs(React.Fragment, { children: [_jsxs(dialog.MuiDialogComponents.Dialog, __assign({}, dialog.MuiDialogProps, { children: [_jsxs(dialog.MuiDialogComponents.DialogTitle, { children: ["Remove all notifications for ", date, "?"] }), _jsxs(dialog.MuiDialogComponents.DialogActions, { children: [_jsx(Button, { onClick: function () {
                                    dialog.handleClose();
                                }, children: "Cancel" }), _jsx(Button, { color: "primary", onClick: function () {
                                    dialog.handleClose();
                                    userNotifications.filter(filter).forEach(function (model) {
                                        model.collection.remove(model);
                                    });
                                    user.get('user').get('preferences').savePreferences();
                                }, children: "Confirm" })] })] })), _jsxs("div", { className: "flex flex-row items-center w-full", children: [_jsx("div", { className: "header-when w-full", children: date }), _jsx(Button, __assign({ size: "large" }, dialog.MuiButtonProps, { children: _jsx(CloseIcon, {}) }))] }), _jsx("div", { className: "w-full flex flex-col space-y-4", children: userNotifications.filter(filter).map(function (notification) {
                    return (_jsx(UploadBatchItemViewReact, { model: notification }, notification.id));
                }) })] }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLWdyb3VwLnZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50L25vdGlmaWNhdGlvbi1ncm91cC9ub3RpZmljYXRpb24tZ3JvdXAudmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQ3pCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFBO0FBQ3RGLE9BQU8saUJBQWlCLE1BQU0sa0NBQWtDLENBQUE7QUFDaEUsT0FBTyxJQUFJLE1BQU0sNkJBQTZCLENBQUE7QUFDOUMsT0FBTyxNQUFNLE1BQU0sc0JBQXNCLENBQUE7QUFDekMsT0FBTyxTQUFTLE1BQU0sMkJBQTJCLENBQUE7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBT3hELE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFHLFVBQUMsRUFHVjtRQUYvQixJQUFJLFVBQUEsRUFDSixNQUFNLFlBQUE7SUFFTixJQUFNLE1BQU0sR0FBRyxjQUFjLEVBQUUsQ0FBQTtJQUMvQixJQUFNLHFCQUFxQixHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUU5RCxJQUFJLHFCQUFxQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFDRCxPQUFPLENBQ0wsTUFBQyxLQUFLLENBQUMsUUFBUSxlQUNiLE1BQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sZUFBSyxNQUFNLENBQUMsY0FBYyxlQUMxRCxNQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLGdEQUNQLElBQUksU0FDSyxFQUN6QyxNQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLGVBQ3ZDLEtBQUMsTUFBTSxJQUNMLE9BQU8sRUFBRTtvQ0FDUCxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUE7Z0NBQ3RCLENBQUMsdUJBR00sRUFDVCxLQUFDLE1BQU0sSUFDTCxLQUFLLEVBQUMsU0FBUyxFQUNmLE9BQU8sRUFBRTtvQ0FDUCxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUE7b0NBQ3BCLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFVO3dDQUNsRCxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQ0FDaEMsQ0FBQyxDQUFDLENBQUE7b0NBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7Z0NBQ3ZELENBQUMsd0JBR00sSUFDZ0MsS0FDVCxFQUNwQyxlQUFLLFNBQVMsRUFBQyxtQ0FBbUMsYUFDaEQsY0FBSyxTQUFTLEVBQUMsb0JBQW9CLFlBQUUsSUFBSSxHQUFPLEVBQ2hELEtBQUMsTUFBTSxhQUFDLElBQUksRUFBQyxPQUFPLElBQUssTUFBTSxDQUFDLGNBQWMsY0FDNUMsS0FBQyxTQUFTLEtBQWEsSUFDaEIsSUFDTCxFQUNOLGNBQUssU0FBUyxFQUFDLGdDQUFnQyxZQUM1QyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsWUFBaUI7b0JBQ3RELE9BQU8sQ0FDTCxLQUFDLHdCQUF3QixJQUV2QixLQUFLLEVBQUUsWUFBWSxJQURkLFlBQVksQ0FBQyxFQUFFLENBRXBCLENBQ0gsQ0FBQTtnQkFDSCxDQUFDLENBQUMsR0FDRSxJQUNTLENBQ2xCLENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFVwbG9hZEJhdGNoSXRlbVZpZXdSZWFjdCB9IGZyb20gJy4uL3VwbG9hZC1iYXRjaC1pdGVtL3VwbG9hZC1iYXRjaC1pdGVtLnZpZXcnXG5pbXBvcnQgdXNlck5vdGlmaWNhdGlvbnMgZnJvbSAnLi4vc2luZ2xldG9ucy91c2VyLW5vdGlmaWNhdGlvbnMnXG5pbXBvcnQgdXNlciBmcm9tICcuLi9zaW5nbGV0b25zL3VzZXItaW5zdGFuY2UnXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJ1xuaW1wb3J0IENsb3NlSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0Nsb3NlJ1xuaW1wb3J0IHsgdXNlRGlhbG9nU3RhdGUgfSBmcm9tICcuLi9ob29rcy91c2VEaWFsb2dTdGF0ZSdcblxudHlwZSBOb3RpZmljYXRpb25Hcm91cFZpZXdSZWFjdFR5cGUgPSB7XG4gIGRhdGU6IGFueVxuICBmaWx0ZXI6IGFueVxufVxuXG5leHBvcnQgY29uc3QgTm90aWZpY2F0aW9uR3JvdXBWaWV3UmVhY3QgPSAoe1xuICBkYXRlLFxuICBmaWx0ZXIsXG59OiBOb3RpZmljYXRpb25Hcm91cFZpZXdSZWFjdFR5cGUpID0+IHtcbiAgY29uc3QgZGlhbG9nID0gdXNlRGlhbG9nU3RhdGUoKVxuICBjb25zdCByZWxldmFudE5vdGlmaWNhdGlvbnMgPSB1c2VyTm90aWZpY2F0aW9ucy5maWx0ZXIoZmlsdGVyKVxuXG4gIGlmIChyZWxldmFudE5vdGlmaWNhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxkaWFsb2cuTXVpRGlhbG9nQ29tcG9uZW50cy5EaWFsb2cgey4uLmRpYWxvZy5NdWlEaWFsb2dQcm9wc30+XG4gICAgICAgIDxkaWFsb2cuTXVpRGlhbG9nQ29tcG9uZW50cy5EaWFsb2dUaXRsZT5cbiAgICAgICAgICBSZW1vdmUgYWxsIG5vdGlmaWNhdGlvbnMgZm9yIHtkYXRlfT9cbiAgICAgICAgPC9kaWFsb2cuTXVpRGlhbG9nQ29tcG9uZW50cy5EaWFsb2dUaXRsZT5cbiAgICAgICAgPGRpYWxvZy5NdWlEaWFsb2dDb21wb25lbnRzLkRpYWxvZ0FjdGlvbnM+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBkaWFsb2cuaGFuZGxlQ2xvc2UoKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBkaWFsb2cuaGFuZGxlQ2xvc2UoKVxuICAgICAgICAgICAgICB1c2VyTm90aWZpY2F0aW9ucy5maWx0ZXIoZmlsdGVyKS5mb3JFYWNoKChtb2RlbDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgbW9kZWwuY29sbGVjdGlvbi5yZW1vdmUobW9kZWwpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHVzZXIuZ2V0KCd1c2VyJykuZ2V0KCdwcmVmZXJlbmNlcycpLnNhdmVQcmVmZXJlbmNlcygpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIENvbmZpcm1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9kaWFsb2cuTXVpRGlhbG9nQ29tcG9uZW50cy5EaWFsb2dBY3Rpb25zPlxuICAgICAgPC9kaWFsb2cuTXVpRGlhbG9nQ29tcG9uZW50cy5EaWFsb2c+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIHctZnVsbFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlci13aGVuIHctZnVsbFwiPntkYXRlfTwvZGl2PlxuICAgICAgICA8QnV0dG9uIHNpemU9XCJsYXJnZVwiIHsuLi5kaWFsb2cuTXVpQnV0dG9uUHJvcHN9PlxuICAgICAgICAgIDxDbG9zZUljb24+PC9DbG9zZUljb24+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBmbGV4IGZsZXgtY29sIHNwYWNlLXktNFwiPlxuICAgICAgICB7dXNlck5vdGlmaWNhdGlvbnMuZmlsdGVyKGZpbHRlcikubWFwKChub3RpZmljYXRpb246IGFueSkgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8VXBsb2FkQmF0Y2hJdGVtVmlld1JlYWN0XG4gICAgICAgICAgICAgIGtleT17bm90aWZpY2F0aW9uLmlkfVxuICAgICAgICAgICAgICBtb2RlbD17bm90aWZpY2F0aW9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApXG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuIl19