import { __assign, __extends, __read, __spreadArray } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import { UNSAFE_LocationContext, UNSAFE_NavigationContext, } from 'react-router-dom';
import React from 'react';
import { Subscribable } from '../../js/model/Base/base-classes';
import { useSubscribable } from '../../js/model/Base/base-classes.hooks';
import { GoldenLayoutWindowCommunicationEvents } from '../golden-layout/cross-window-communication';
/**
 * This module provides a solution for sharing React Router v6 context across multiple React roots, as well as golden-layout subwindows (popouts).
 * See https://github.com/remix-run/react-router/issues/10089 for more details.
 *
 * Problem:
 * - React Router v6 uses internal history/location objects that aren't shared between different Router instances
 * - Our application uses multiple React roots due to golden-layout integration
 * - Golden-layout doesn't have native React support, so we need to patch the contexts somehow
 * - We need the ability to also handle popouts, which have their own Router instances.
 */
var SubscribableNavigationContextClass = /** @class */ (function (_super) {
    __extends(SubscribableNavigationContextClass, _super);
    function SubscribableNavigationContextClass() {
        var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
        _this.navigationContext = null;
        return _this;
    }
    SubscribableNavigationContextClass.prototype.updateNavigationContext = function (navigationContext) {
        this.navigationContext = navigationContext;
        this._notifySubscribers({ thing: 'update' });
    };
    return SubscribableNavigationContextClass;
}(Subscribable));
var SubscribableLocationContextClass = /** @class */ (function (_super) {
    __extends(SubscribableLocationContextClass, _super);
    function SubscribableLocationContextClass() {
        var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
        _this.locationContext = null;
        return _this;
    }
    SubscribableLocationContextClass.prototype.updateLocationContext = function (locationContext) {
        this.locationContext = locationContext;
        this._notifySubscribers({ thing: 'update' });
    };
    return SubscribableLocationContextClass;
}(Subscribable));
var SubscribableNavigationContext = new SubscribableNavigationContextClass();
var SubscribableLocationContext = new SubscribableLocationContextClass();
/**
 * Component that syncs the current React Router context to our shared variables.  While we could alternatively use prop drilling by
 * accessing context and passing it to the new root, this is much simpler.
 *
 * This should be rendered within the Router component of the primary React root
 */
export var SyncReactRouterContextToVariables = function () {
    var navigationContext = React.useContext(UNSAFE_NavigationContext);
    var locationContext = React.useContext(UNSAFE_LocationContext);
    React.useEffect(function () {
        SubscribableNavigationContext.updateNavigationContext(navigationContext);
    }, [navigationContext]);
    React.useEffect(function () {
        SubscribableLocationContext.updateLocationContext(locationContext);
    }, [locationContext]);
    return null;
};
function useSharedNavigationContext() {
    var _a = __read(React.useState(SubscribableNavigationContext.navigationContext), 2), navigationContext = _a[0], setNavigationContext = _a[1];
    useSubscribable(SubscribableNavigationContext, 'update', function () {
        setNavigationContext(SubscribableNavigationContext.navigationContext);
    });
    return navigationContext;
}
function useSharedLocationContext() {
    var _a = __read(React.useState(SubscribableLocationContext.locationContext), 2), locationContext = _a[0], setLocationContext = _a[1];
    useSubscribable(SubscribableLocationContext, 'update', function () {
        setLocationContext(SubscribableLocationContext.locationContext);
    });
    return locationContext;
}
/**
 * Provider component that provides the shared Router context to its children
 * This should be used in secondary React roots to receive the shared context
 */
export var PatchReactRouterContext = function (_a) {
    var children = _a.children;
    var navigationContext = useSharedNavigationContext();
    var locationContext = useSharedLocationContext();
    if (!navigationContext || !locationContext) {
        throw new Error('Navigation or location context not found');
    }
    return (_jsx(UNSAFE_NavigationContext.Provider, { value: navigationContext, children: _jsx(UNSAFE_LocationContext.Provider, { value: locationContext, children: children }) }));
};
/**
 *  In subwindows (popouts) we want to redirect navigation events back to the main window through the event bus.
 */
function patchNavigationContextForGoldenLayoutSubwindows(_a) {
    var navigationContext = _a.navigationContext, goldenLayout = _a.goldenLayout;
    if (!navigationContext) {
        throw new Error('Navigation context not found');
    }
    var replaceWrapper = function (to, options) {
        goldenLayout.eventHub.emit(GoldenLayoutWindowCommunicationEvents.consumeNavigationChange, {
            replace: [to, __assign(__assign({}, options), { replace: true })],
        });
    };
    var pushWrapper = function (to, options) {
        goldenLayout.eventHub.emit(GoldenLayoutWindowCommunicationEvents.consumeNavigationChange, {
            push: [to, options],
        });
    };
    Object.defineProperty(navigationContext.navigator, 'replace', {
        value: replaceWrapper,
        writable: true,
    });
    Object.defineProperty(navigationContext.navigator, 'push', {
        value: pushWrapper,
        writable: true,
    });
    return navigationContext;
}
/**
 * Hook that provides the shared Router context for golden layout subwindows (popouts)
 */
function useSharedNavigationContextForGoldenLayoutSubwindows(_a) {
    var goldenLayout = _a.goldenLayout;
    var _b = __read(React.useState(patchNavigationContextForGoldenLayoutSubwindows({
        navigationContext: SubscribableNavigationContext.navigationContext,
        goldenLayout: goldenLayout,
    })), 2), navigationContext = _b[0], setNavigationContext = _b[1];
    useSubscribable(SubscribableNavigationContext, 'update', function () {
        setNavigationContext(patchNavigationContextForGoldenLayoutSubwindows({
            navigationContext: SubscribableNavigationContext.navigationContext,
            goldenLayout: goldenLayout,
        }));
    });
    return navigationContext;
}
/**
 * Provider component that patches the React Router context for golden layout subwindows (popouts), and also handles normal React roots when applicable.
 */
export var PatchReactRouterContextForGoldenLayoutSubwindows = function (_a) {
    var children = _a.children, goldenLayout = _a.goldenLayout;
    if (!goldenLayout || !goldenLayout.isSubWindow) {
        return _jsx(PatchReactRouterContext, { children: children });
    }
    var navigationContext = useSharedNavigationContextForGoldenLayoutSubwindows({
        goldenLayout: goldenLayout,
    });
    var locationContext = useSharedLocationContext();
    if (!navigationContext || !locationContext) {
        throw new Error('Navigation or location context not found');
    }
    return (_jsx(UNSAFE_NavigationContext.Provider, { value: navigationContext, children: _jsx(UNSAFE_LocationContext.Provider, { value: locationContext, children: children }) }));
};
//# sourceMappingURL=data:application/json;base64,