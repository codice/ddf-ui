import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
//
import React from 'react';
import useSnack from '../hooks/useSnack';
import $ from 'jquery';
import { StartupDataStore } from '../../js/model/Startup/startup';
var getShortErrorMessage = function (error) {
    var extraMessage = error instanceof Error ? error.name : String(error);
    if (extraMessage.length === 0) {
        return extraMessage;
    }
    // limit to 20 characters so we do not worry about overflow
    if (extraMessage.length > 20) {
        extraMessage = extraMessage.substr(0, 20) + '...';
    }
    return ' - ' + extraMessage;
};
var getErrorResponse = function (_event, jqxhr, settings, throwError) {
    if (jqxhr.getResponseHeader('content-type') === 'application/json' &&
        jqxhr.responseText.startsWith('<') &&
        jqxhr.responseText.indexOf('ACSURL') > -1 &&
        jqxhr.responseText.indexOf('SAMLRequest') > -1) {
        return { title: 'Logged out', message: 'Please refresh page to log in' };
    }
    else if (settings.url.indexOf('./internal/catalog/sources') > -1 &&
        settings.type === 'GET') {
        return {
            title: StartupDataStore.Configuration.getI18n()['sources.polling.error.title'],
            message: StartupDataStore.Configuration.getI18n()['sources.polling.error.message'],
        };
    }
    else if (jqxhr.responseJSON !== undefined) {
        return { title: 'Error', message: jqxhr.responseJSON.message };
    }
    else {
        switch (jqxhr.status) {
            case 403:
                return { title: 'Forbidden', message: 'Not Authorized' };
            case 405:
                return {
                    title: 'Error',
                    message: 'Method not allowed. Please try refreshing your browser',
                };
            default:
                return {
                    title: 'Error',
                    message: 'Unknown Error' + getShortErrorMessage(throwError),
                };
        }
    }
};
export var AjaxErrorHandling = function () {
    var addSnack = useSnack();
    React.useEffect(function () {
        $(window.document).ajaxError(function (event, jqxhr, settings, throwError) {
            if (settings.customErrorHandling) {
                // Do nothing if caller is handling their own error
                return;
            }
            console.error(event, jqxhr, settings, throwError);
            var response = getErrorResponse(event, jqxhr, settings, throwError);
            if (StartupDataStore.Configuration.getDisableUnknownErrorBox() &&
                response.message.substring(0, 13) === 'Unknown Error') {
                return;
            }
            addSnack(response.title + response.message, {
                alertProps: {
                    severity: 'error',
                },
            });
        });
    });
    return _jsx(_Fragment, {});
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWpheC1lcnJvci1oYW5kbGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnQvYXBwL2FqYXgtZXJyb3ItaGFuZGxpbmcudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxFQUFFO0FBQ0YsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQ3pCLE9BQU8sUUFBUSxNQUFNLG1CQUFtQixDQUFBO0FBQ3hDLE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQTtBQUN0QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUNqRSxJQUFJLG9CQUFvQixHQUFHLFVBQVUsS0FBVTtJQUM3QyxJQUFJLFlBQVksR0FBRyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdEUsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzlCLE9BQU8sWUFBWSxDQUFBO0lBQ3JCLENBQUM7SUFDRCwyREFBMkQ7SUFDM0QsSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQzdCLFlBQVksR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUE7SUFDbkQsQ0FBQztJQUNELE9BQU8sS0FBSyxHQUFHLFlBQVksQ0FBQTtBQUM3QixDQUFDLENBQUE7QUFDRCxJQUFJLGdCQUFnQixHQUFHLFVBQ3JCLE1BQVcsRUFDWCxLQUFVLEVBQ1YsUUFBYSxFQUNiLFVBQWU7SUFFZixJQUNFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsS0FBSyxrQkFBa0I7UUFDOUQsS0FBSyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQ2xDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDOUMsQ0FBQztRQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxDQUFBO0lBQzFFLENBQUM7U0FBTSxJQUNMLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELFFBQVEsQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUN2QixDQUFDO1FBQ0QsT0FBTztZQUNMLEtBQUssRUFDSCxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsNkJBQTZCLENBQUM7WUFDekUsT0FBTyxFQUNMLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FDdEMsK0JBQStCLENBQ2hDO1NBQ0osQ0FBQTtJQUNILENBQUM7U0FBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDNUMsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDaEUsQ0FBQztTQUFNLENBQUM7UUFDTixRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNyQixLQUFLLEdBQUc7Z0JBQ04sT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLENBQUE7WUFDMUQsS0FBSyxHQUFHO2dCQUNOLE9BQU87b0JBQ0wsS0FBSyxFQUFFLE9BQU87b0JBQ2QsT0FBTyxFQUFFLHdEQUF3RDtpQkFDbEUsQ0FBQTtZQUNIO2dCQUNFLE9BQU87b0JBQ0wsS0FBSyxFQUFFLE9BQU87b0JBQ2QsT0FBTyxFQUFFLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQyxVQUFVLENBQUM7aUJBQzVELENBQUE7UUFDTCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUNELE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHO0lBQy9CLElBQU0sUUFBUSxHQUFHLFFBQVEsRUFBRSxDQUFBO0lBQzNCLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDZCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FDMUIsVUFBQyxLQUFVLEVBQUUsS0FBVSxFQUFFLFFBQWEsRUFBRSxVQUFlO1lBQ3JELElBQUksUUFBUSxDQUFDLG1CQUFtQixFQUFFLENBQUM7Z0JBQ2pDLG1EQUFtRDtnQkFDbkQsT0FBTTtZQUNSLENBQUM7WUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1lBQ2pELElBQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1lBQ3JFLElBQ0UsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLHlCQUF5QixFQUFFO2dCQUMxRCxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssZUFBZSxFQUNyRCxDQUFDO2dCQUNELE9BQU07WUFDUixDQUFDO1lBQ0QsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRTtnQkFDMUMsVUFBVSxFQUFFO29CQUNWLFFBQVEsRUFBRSxPQUFPO2lCQUNsQjthQUNGLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FDRixDQUFBO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDRixPQUFPLG1CQUFLLENBQUE7QUFDZCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHVzZVNuYWNrIGZyb20gJy4uL2hvb2tzL3VzZVNuYWNrJ1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IHsgU3RhcnR1cERhdGFTdG9yZSB9IGZyb20gJy4uLy4uL2pzL21vZGVsL1N0YXJ0dXAvc3RhcnR1cCdcbmxldCBnZXRTaG9ydEVycm9yTWVzc2FnZSA9IGZ1bmN0aW9uIChlcnJvcjogYW55KSB7XG4gIGxldCBleHRyYU1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubmFtZSA6IFN0cmluZyhlcnJvcilcbiAgaWYgKGV4dHJhTWVzc2FnZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZXh0cmFNZXNzYWdlXG4gIH1cbiAgLy8gbGltaXQgdG8gMjAgY2hhcmFjdGVycyBzbyB3ZSBkbyBub3Qgd29ycnkgYWJvdXQgb3ZlcmZsb3dcbiAgaWYgKGV4dHJhTWVzc2FnZS5sZW5ndGggPiAyMCkge1xuICAgIGV4dHJhTWVzc2FnZSA9IGV4dHJhTWVzc2FnZS5zdWJzdHIoMCwgMjApICsgJy4uLidcbiAgfVxuICByZXR1cm4gJyAtICcgKyBleHRyYU1lc3NhZ2Vcbn1cbmxldCBnZXRFcnJvclJlc3BvbnNlID0gZnVuY3Rpb24gKFxuICBfZXZlbnQ6IGFueSxcbiAganF4aHI6IGFueSxcbiAgc2V0dGluZ3M6IGFueSxcbiAgdGhyb3dFcnJvcjogYW55XG4pIHtcbiAgaWYgKFxuICAgIGpxeGhyLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nICYmXG4gICAganF4aHIucmVzcG9uc2VUZXh0LnN0YXJ0c1dpdGgoJzwnKSAmJlxuICAgIGpxeGhyLnJlc3BvbnNlVGV4dC5pbmRleE9mKCdBQ1NVUkwnKSA+IC0xICYmXG4gICAganF4aHIucmVzcG9uc2VUZXh0LmluZGV4T2YoJ1NBTUxSZXF1ZXN0JykgPiAtMVxuICApIHtcbiAgICByZXR1cm4geyB0aXRsZTogJ0xvZ2dlZCBvdXQnLCBtZXNzYWdlOiAnUGxlYXNlIHJlZnJlc2ggcGFnZSB0byBsb2cgaW4nIH1cbiAgfSBlbHNlIGlmIChcbiAgICBzZXR0aW5ncy51cmwuaW5kZXhPZignLi9pbnRlcm5hbC9jYXRhbG9nL3NvdXJjZXMnKSA+IC0xICYmXG4gICAgc2V0dGluZ3MudHlwZSA9PT0gJ0dFVCdcbiAgKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlOlxuICAgICAgICBTdGFydHVwRGF0YVN0b3JlLkNvbmZpZ3VyYXRpb24uZ2V0STE4bigpWydzb3VyY2VzLnBvbGxpbmcuZXJyb3IudGl0bGUnXSxcbiAgICAgIG1lc3NhZ2U6XG4gICAgICAgIFN0YXJ0dXBEYXRhU3RvcmUuQ29uZmlndXJhdGlvbi5nZXRJMThuKClbXG4gICAgICAgICAgJ3NvdXJjZXMucG9sbGluZy5lcnJvci5tZXNzYWdlJ1xuICAgICAgICBdLFxuICAgIH1cbiAgfSBlbHNlIGlmIChqcXhoci5yZXNwb25zZUpTT04gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7IHRpdGxlOiAnRXJyb3InLCBtZXNzYWdlOiBqcXhoci5yZXNwb25zZUpTT04ubWVzc2FnZSB9XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChqcXhoci5zdGF0dXMpIHtcbiAgICAgIGNhc2UgNDAzOlxuICAgICAgICByZXR1cm4geyB0aXRsZTogJ0ZvcmJpZGRlbicsIG1lc3NhZ2U6ICdOb3QgQXV0aG9yaXplZCcgfVxuICAgICAgY2FzZSA0MDU6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGl0bGU6ICdFcnJvcicsXG4gICAgICAgICAgbWVzc2FnZTogJ01ldGhvZCBub3QgYWxsb3dlZC4gUGxlYXNlIHRyeSByZWZyZXNoaW5nIHlvdXIgYnJvd3NlcicsXG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGl0bGU6ICdFcnJvcicsXG4gICAgICAgICAgbWVzc2FnZTogJ1Vua25vd24gRXJyb3InICsgZ2V0U2hvcnRFcnJvck1lc3NhZ2UodGhyb3dFcnJvciksXG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBjb25zdCBBamF4RXJyb3JIYW5kbGluZyA9ICgpID0+IHtcbiAgY29uc3QgYWRkU25hY2sgPSB1c2VTbmFjaygpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgJCh3aW5kb3cuZG9jdW1lbnQpLmFqYXhFcnJvcihcbiAgICAgIChldmVudDogYW55LCBqcXhocjogYW55LCBzZXR0aW5nczogYW55LCB0aHJvd0Vycm9yOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKHNldHRpbmdzLmN1c3RvbUVycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGNhbGxlciBpcyBoYW5kbGluZyB0aGVpciBvd24gZXJyb3JcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGV2ZW50LCBqcXhociwgc2V0dGluZ3MsIHRocm93RXJyb3IpXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gZ2V0RXJyb3JSZXNwb25zZShldmVudCwganF4aHIsIHNldHRpbmdzLCB0aHJvd0Vycm9yKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgU3RhcnR1cERhdGFTdG9yZS5Db25maWd1cmF0aW9uLmdldERpc2FibGVVbmtub3duRXJyb3JCb3goKSAmJlxuICAgICAgICAgIHJlc3BvbnNlLm1lc3NhZ2Uuc3Vic3RyaW5nKDAsIDEzKSA9PT0gJ1Vua25vd24gRXJyb3InXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGFkZFNuYWNrKHJlc3BvbnNlLnRpdGxlICsgcmVzcG9uc2UubWVzc2FnZSwge1xuICAgICAgICAgIGFsZXJ0UHJvcHM6IHtcbiAgICAgICAgICAgIHNldmVyaXR5OiAnZXJyb3InLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgKVxuICB9KVxuICByZXR1cm4gPD48Lz5cbn1cbiJdfQ==