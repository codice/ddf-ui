import { __assign, __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import TextField from '../../../react-component/text-field/index';
import MaskedTextField from '../inputs/masked-text-field';
import { latitudeDMSMask, longitudeDMSMask } from './masks';
import { buildDmsString, parseDmsCoordinate } from '../utils/dms-utils';
var Coordinate = function (props) {
    var placeholder = props.placeholder, value = props.value, onChange = props.onChange, children = props.children, otherProps = __rest(props, ["placeholder", "value", "onChange", "children"]);
    return (_jsxs("div", { className: "flex flex-row items-center w-full flex-nowrap", children: [_jsx(TextField, __assign({ placeholder: placeholder, value: value, onChange: onChange }, otherProps)), children] }));
};
var MaskedCoordinate = function (props) {
    var placeholder = props.placeholder, mask = props.mask, value = props.value, onChange = props.onChange, children = props.children, otherProps = __rest(props, ["placeholder", "mask", "value", "onChange", "children"]);
    return (_jsxs("div", { className: "flex flex-row items-center w-full flex-nowrap", children: [_jsx(MaskedTextField, __assign({ placeholder: placeholder, mask: mask, value: value, onChange: onChange }, otherProps)), children] }));
};
var DmsLatitude = function (props) {
    return (_jsx(MaskedCoordinate, __assign({ placeholder: "dd\u00B0mm'ss.sss\"", mask: latitudeDMSMask, placeholderChar: "_" }, props, { onBlur: function (event) {
            props.onChange(buildDmsString(parseDmsCoordinate(props.value)), event.type);
        } })));
};
var DmsLongitude = function (props) {
    return (_jsx(MaskedCoordinate, __assign({ placeholder: "ddd\u00B0mm'ss.sss\"", mask: longitudeDMSMask, placeholderChar: "_" }, props, { onBlur: function (event) {
            props.onChange(buildDmsString(parseDmsCoordinate(props.value)), event.type);
        } })));
};
var DdLatitude = function (props) {
    return (_jsx(Coordinate, __assign({ placeholder: "latitude", type: "number", step: "any", min: -90, max: 90, addon: "\u00B0" }, props)));
};
var DdLongitude = function (props) {
    return (_jsx(Coordinate, __assign({ placeholder: "longitude", type: "number", step: "any", min: -180, max: 180, addon: "\u00B0" }, props)));
};
var UsngCoordinate = function (props) {
    return (_jsx("div", { className: "coordinate", children: _jsx(TextField, __assign({ label: "Grid" }, props)) }));
};
export { DmsLatitude, DmsLongitude, DdLatitude, DdLongitude, UsngCoordinate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29vcmRpbmF0ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50L2xvY2F0aW9uLW5ldy9nZW8tY29tcG9uZW50cy9jb29yZGluYXRlcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBRUosT0FBTyxTQUFTLE1BQU0sMkNBQTJDLENBQUE7QUFDakUsT0FBTyxlQUFlLE1BQU0sNkJBQTZCLENBQUE7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFdkUsSUFBTSxVQUFVLEdBQUcsVUFBQyxLQUFVO0lBQ3BCLElBQUEsV0FBVyxHQUErQyxLQUFLLFlBQXBELEVBQUUsS0FBSyxHQUF3QyxLQUFLLE1BQTdDLEVBQUUsUUFBUSxHQUE4QixLQUFLLFNBQW5DLEVBQUUsUUFBUSxHQUFvQixLQUFLLFNBQXpCLEVBQUssVUFBVSxVQUFLLEtBQUssRUFBakUsZ0RBQXlELENBQUYsQ0FBVTtJQUN2RSxPQUFPLENBQ0wsZUFBSyxTQUFTLEVBQUMsK0NBQStDLGFBQzVELEtBQUMsU0FBUyxhQUNSLFdBQVcsRUFBRSxXQUFXLEVBQ3hCLEtBQUssRUFBRSxLQUFLLEVBQ1osUUFBUSxFQUFFLFFBQVEsSUFDZCxVQUFVLEVBQ2QsRUFDRCxRQUFRLElBQ0wsQ0FDUCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsSUFBTSxnQkFBZ0IsR0FBRyxVQUFDLEtBQVU7SUFDMUIsSUFBQSxXQUFXLEdBQXFELEtBQUssWUFBMUQsRUFBRSxJQUFJLEdBQStDLEtBQUssS0FBcEQsRUFBRSxLQUFLLEdBQXdDLEtBQUssTUFBN0MsRUFBRSxRQUFRLEdBQThCLEtBQUssU0FBbkMsRUFBRSxRQUFRLEdBQW9CLEtBQUssU0FBekIsRUFBSyxVQUFVLFVBQUssS0FBSyxFQUF2RSx3REFBK0QsQ0FBRixDQUFVO0lBQzdFLE9BQU8sQ0FDTCxlQUFLLFNBQVMsRUFBQywrQ0FBK0MsYUFDNUQsS0FBQyxlQUFlLGFBQ2QsV0FBVyxFQUFFLFdBQVcsRUFDeEIsSUFBSSxFQUFFLElBQUksRUFDVixLQUFLLEVBQUUsS0FBSyxFQUNaLFFBQVEsRUFBRSxRQUFRLElBQ2QsVUFBVSxFQUNkLEVBQ0QsUUFBUSxJQUNMLENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELElBQU0sV0FBVyxHQUFHLFVBQUMsS0FBVTtJQUM3QixPQUFPLENBQ0wsS0FBQyxnQkFBZ0IsYUFDZixXQUFXLEVBQUMscUJBQW9CLEVBQ2hDLElBQUksRUFBRSxlQUFlLEVBQ3JCLGVBQWUsRUFBQyxHQUFHLElBQ2YsS0FBSyxJQUNULE1BQU0sRUFBRSxVQUFDLEtBQVU7WUFDakIsS0FBSyxDQUFDLFFBQVEsQ0FDWixjQUFjLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQy9DLEtBQUssQ0FBQyxJQUFJLENBQ1gsQ0FBQTtRQUNILENBQUMsSUFDRCxDQUNILENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxJQUFNLFlBQVksR0FBRyxVQUFDLEtBQVU7SUFDOUIsT0FBTyxDQUNMLEtBQUMsZ0JBQWdCLGFBQ2YsV0FBVyxFQUFDLHNCQUFxQixFQUNqQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQ3RCLGVBQWUsRUFBQyxHQUFHLElBQ2YsS0FBSyxJQUNULE1BQU0sRUFBRSxVQUFDLEtBQVU7WUFDakIsS0FBSyxDQUFDLFFBQVEsQ0FDWixjQUFjLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQy9DLEtBQUssQ0FBQyxJQUFJLENBQ1gsQ0FBQTtRQUNILENBQUMsSUFDRCxDQUNILENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxJQUFNLFVBQVUsR0FBRyxVQUFDLEtBQVU7SUFDNUIsT0FBTyxDQUNMLEtBQUMsVUFBVSxhQUNULFdBQVcsRUFBQyxVQUFVLEVBQ3RCLElBQUksRUFBQyxRQUFRLEVBQ2IsSUFBSSxFQUFDLEtBQUssRUFDVixHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQ1IsR0FBRyxFQUFFLEVBQUUsRUFDUCxLQUFLLEVBQUMsUUFBRyxJQUNMLEtBQUssRUFDVCxDQUNILENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxJQUFNLFdBQVcsR0FBRyxVQUFDLEtBQVU7SUFDN0IsT0FBTyxDQUNMLEtBQUMsVUFBVSxhQUNULFdBQVcsRUFBQyxXQUFXLEVBQ3ZCLElBQUksRUFBQyxRQUFRLEVBQ2IsSUFBSSxFQUFDLEtBQUssRUFDVixHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQ1QsR0FBRyxFQUFFLEdBQUcsRUFDUixLQUFLLEVBQUMsUUFBRyxJQUNMLEtBQUssRUFDVCxDQUNILENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxJQUFNLGNBQWMsR0FBRyxVQUFDLEtBQVU7SUFDaEMsT0FBTyxDQUNMLGNBQUssU0FBUyxFQUFDLFlBQVksWUFDekIsS0FBQyxTQUFTLGFBQUMsS0FBSyxFQUFDLE1BQU0sSUFBSyxLQUFLLEVBQUksR0FDakMsQ0FDUCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBDb2RpY2UgRm91bmRhdGlvblxuICpcbiAqIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXJcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlXG4gKiBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0XG4gKiBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuIEEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBpcyBkaXN0cmlidXRlZCBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbSBhbmQgY2FuIGJlIGZvdW5kIGF0XG4gKiA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2xncGwuaHRtbD4uXG4gKlxuICoqL1xuXG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJy4uLy4uLy4uL3JlYWN0LWNvbXBvbmVudC90ZXh0LWZpZWxkL2luZGV4J1xuaW1wb3J0IE1hc2tlZFRleHRGaWVsZCBmcm9tICcuLi9pbnB1dHMvbWFza2VkLXRleHQtZmllbGQnXG5pbXBvcnQgeyBsYXRpdHVkZURNU01hc2ssIGxvbmdpdHVkZURNU01hc2sgfSBmcm9tICcuL21hc2tzJ1xuaW1wb3J0IHsgYnVpbGREbXNTdHJpbmcsIHBhcnNlRG1zQ29vcmRpbmF0ZSB9IGZyb20gJy4uL3V0aWxzL2Rtcy11dGlscydcblxuY29uc3QgQ29vcmRpbmF0ZSA9IChwcm9wczogYW55KSA9PiB7XG4gIGNvbnN0IHsgcGxhY2Vob2xkZXIsIHZhbHVlLCBvbkNoYW5nZSwgY2hpbGRyZW4sIC4uLm90aGVyUHJvcHMgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciB3LWZ1bGwgZmxleC1ub3dyYXBcIj5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgey4uLm90aGVyUHJvcHN9XG4gICAgICAvPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IE1hc2tlZENvb3JkaW5hdGUgPSAocHJvcHM6IGFueSkgPT4ge1xuICBjb25zdCB7IHBsYWNlaG9sZGVyLCBtYXNrLCB2YWx1ZSwgb25DaGFuZ2UsIGNoaWxkcmVuLCAuLi5vdGhlclByb3BzIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgdy1mdWxsIGZsZXgtbm93cmFwXCI+XG4gICAgICA8TWFza2VkVGV4dEZpZWxkXG4gICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgbWFzaz17bWFza31cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIHsuLi5vdGhlclByb3BzfVxuICAgICAgLz5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBEbXNMYXRpdHVkZSA9IChwcm9wczogYW55KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPE1hc2tlZENvb3JkaW5hdGVcbiAgICAgIHBsYWNlaG9sZGVyPVwiZGTCsG1tJ3NzLnNzcyZxdW90O1wiXG4gICAgICBtYXNrPXtsYXRpdHVkZURNU01hc2t9XG4gICAgICBwbGFjZWhvbGRlckNoYXI9XCJfXCJcbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIG9uQmx1cj17KGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgcHJvcHMub25DaGFuZ2UoXG4gICAgICAgICAgYnVpbGREbXNTdHJpbmcocGFyc2VEbXNDb29yZGluYXRlKHByb3BzLnZhbHVlKSksXG4gICAgICAgICAgZXZlbnQudHlwZVxuICAgICAgICApXG4gICAgICB9fVxuICAgIC8+XG4gIClcbn1cblxuY29uc3QgRG1zTG9uZ2l0dWRlID0gKHByb3BzOiBhbnkpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8TWFza2VkQ29vcmRpbmF0ZVxuICAgICAgcGxhY2Vob2xkZXI9XCJkZGTCsG1tJ3NzLnNzcyZxdW90O1wiXG4gICAgICBtYXNrPXtsb25naXR1ZGVETVNNYXNrfVxuICAgICAgcGxhY2Vob2xkZXJDaGFyPVwiX1wiXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBvbkJsdXI9eyhldmVudDogYW55KSA9PiB7XG4gICAgICAgIHByb3BzLm9uQ2hhbmdlKFxuICAgICAgICAgIGJ1aWxkRG1zU3RyaW5nKHBhcnNlRG1zQ29vcmRpbmF0ZShwcm9wcy52YWx1ZSkpLFxuICAgICAgICAgIGV2ZW50LnR5cGVcbiAgICAgICAgKVxuICAgICAgfX1cbiAgICAvPlxuICApXG59XG5cbmNvbnN0IERkTGF0aXR1ZGUgPSAocHJvcHM6IGFueSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxDb29yZGluYXRlXG4gICAgICBwbGFjZWhvbGRlcj1cImxhdGl0dWRlXCJcbiAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgc3RlcD1cImFueVwiXG4gICAgICBtaW49ey05MH1cbiAgICAgIG1heD17OTB9XG4gICAgICBhZGRvbj1cIsKwXCJcbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApXG59XG5cbmNvbnN0IERkTG9uZ2l0dWRlID0gKHByb3BzOiBhbnkpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q29vcmRpbmF0ZVxuICAgICAgcGxhY2Vob2xkZXI9XCJsb25naXR1ZGVcIlxuICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICBzdGVwPVwiYW55XCJcbiAgICAgIG1pbj17LTE4MH1cbiAgICAgIG1heD17MTgwfVxuICAgICAgYWRkb249XCLCsFwiXG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKVxufVxuXG5jb25zdCBVc25nQ29vcmRpbmF0ZSA9IChwcm9wczogYW55KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb29yZGluYXRlXCI+XG4gICAgICA8VGV4dEZpZWxkIGxhYmVsPVwiR3JpZFwiIHsuLi5wcm9wc30gLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgeyBEbXNMYXRpdHVkZSwgRG1zTG9uZ2l0dWRlLCBEZExhdGl0dWRlLCBEZExvbmdpdHVkZSwgVXNuZ0Nvb3JkaW5hdGUgfVxuIl19