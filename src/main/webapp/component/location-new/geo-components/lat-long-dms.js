import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import Group from '../../../react-component/group/index';
import { Radio, RadioItem } from '../../../react-component/radio/radio';
import TextField from '../../../react-component/text-field/index';
import { Units } from '../../../react-component/location/common';
import ListEditor from '../inputs/list-editor';
import { DmsLatitude, DmsLongitude } from './coordinates';
import { dmsPoint } from '../models';
import DirectionInput from './direction';
import { Direction } from '../utils/dms-utils';
var latitudeDirections = [Direction.North, Direction.South];
var longitudeDirections = [Direction.East, Direction.West];
var Point = function (props) {
    var dms = props.dms, setState = props.setState;
    return (_jsxs(Group, { children: [_jsx(DmsLatitude, { value: dms.point.latitude.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.point.latitude.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: latitudeDirections, value: dms.point.latitude.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.point.latitude.direction = value);
                    }) }) }), _jsx(DmsLongitude, { value: dms.point.longitude.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.point.longitude.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: longitudeDirections, value: dms.point.longitude.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.point.longitude.direction = value);
                    }) }) })] }));
};
var Circle = function (props) {
    var dms = props.dms, setState = props.setState;
    return (_jsxs("div", { className: "flex flex-col flex-nowrap space-y-2", children: [_jsxs(Group, { children: [_jsx(DmsLatitude, { value: dms.circle.point.latitude.coordinate, onChange: setState(function (draft, value) {
                            return (draft.dms.circle.point.latitude.coordinate = value);
                        }), children: _jsx(DirectionInput
                        // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                        , { 
                            // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                            options: latitudeDirections, value: dms.circle.point.latitude.direction, onChange: setState(function (draft, value) {
                                return (draft.dms.circle.point.latitude.direction = value);
                            }) }) }), _jsx(DmsLongitude, { value: dms.circle.point.longitude.coordinate, onChange: setState(function (draft, value) {
                            return (draft.dms.circle.point.longitude.coordinate = value);
                        }), children: _jsx(DirectionInput
                        // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                        , { 
                            // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                            options: longitudeDirections, value: dms.circle.point.longitude.direction, onChange: setState(function (draft, value) {
                                return (draft.dms.circle.point.longitude.direction = value);
                            }) }) })] }), _jsx(Units, { value: dms.circle.units, onChange: setState(function (draft, value) { return (draft.dms.circle.units = value); }), children: _jsx(TextField
                // @ts-expect-error ts-migrate(2322) FIXME: Type '{ label: string; type: string; value: any; o... Remove this comment to see the full error message
                , { 
                    // @ts-expect-error ts-migrate(2322) FIXME: Type '{ label: string; type: string; value: any; o... Remove this comment to see the full error message
                    label: "Radius", type: "number", value: dms.circle.radius, onChange: setState(function (draft, value) { return (draft.dms.circle.radius = value); }) }) })] }));
};
var Line = function (props) {
    var dms = props.dms, setState = props.setState;
    var points = dms.line.list.map(function (_entry, index) { return (_jsxs(Group, { children: [_jsx(DmsLatitude, { value: dms.line.list[index].latitude.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.line.list[index].latitude.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: latitudeDirections, value: dms.line.list[index].latitude.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.line.list[index].latitude.direction = value);
                    }) }) }), _jsx(DmsLongitude, { value: dms.line.list[index].longitude.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.line.list[index].longitude.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: longitudeDirections, value: dms.line.list[index].longitude.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.line.list[index].longitude.direction = value);
                    }) }) })] }, index)); });
    return (_jsx(ListEditor, { list: dms.line.list, defaultItem: dmsPoint, onChange: setState(function (draft, value) { return (draft.dms.line.list = value); }), children: points }));
};
var Polygon = function (props) {
    var dms = props.dms, setState = props.setState;
    var points = dms.polygon.list.map(function (_entry, index) { return (_jsxs(Group, { children: [_jsx(DmsLatitude, { value: dms.polygon.list[index].latitude.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.polygon.list[index].latitude.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: latitudeDirections, value: dms.polygon.list[index].latitude.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.polygon.list[index].latitude.direction = value);
                    }) }) }), _jsx(DmsLongitude, { value: dms.polygon.list[index].longitude.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.polygon.list[index].longitude.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: longitudeDirections, value: dms.polygon.list[index].longitude.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.polygon.list[index].longitude.direction = value);
                    }) }) })] }, index)); });
    return (_jsx(ListEditor, { list: dms.polygon.list, defaultItem: dmsPoint, onChange: setState(function (draft, value) { return (draft.dms.polygon.list = value); }), children: points }));
};
var BoundingBox = function (props) {
    var dms = props.dms, setState = props.setState;
    return (_jsxs("div", { className: "flex flex-col flex-nowrap space-y-2", children: [_jsx(DmsLatitude, { label: "South", value: dms.boundingbox.south.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.boundingbox.south.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: latitudeDirections, value: dms.boundingbox.south.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.boundingbox.south.direction = value);
                    }) }) }), _jsx(DmsLatitude, { label: "North", value: dms.boundingbox.north.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.boundingbox.north.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: latitudeDirections, value: dms.boundingbox.north.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.boundingbox.north.direction = value);
                    }) }) }), _jsx(DmsLongitude, { label: "West", value: dms.boundingbox.west.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.boundingbox.west.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: longitudeDirections, value: dms.boundingbox.west.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.boundingbox.west.direction = value);
                    }) }) }), _jsx(DmsLongitude, { label: "East", value: dms.boundingbox.east.coordinate, onChange: setState(function (draft, value) {
                    return (draft.dms.boundingbox.east.coordinate = value);
                }), children: _jsx(DirectionInput
                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                , { 
                    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                    options: longitudeDirections, value: dms.boundingbox.east.direction, onChange: setState(function (draft, value) {
                        return (draft.dms.boundingbox.east.direction = value);
                    }) }) })] }));
};
var LatLongDMS = function (props) {
    var dms = props.dms, setState = props.setState;
    var inputs = {
        point: Point,
        line: Line,
        circle: Circle,
        polygon: Polygon,
        boundingbox: BoundingBox,
    };
    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
    var Component = inputs[dms.shape] || null;
    return (_jsxs("div", { children: [_jsxs(Radio, { value: dms.shape, onChange: setState(function (draft, value) { return (draft.dms.shape = value); }), children: [_jsx(RadioItem, { value: "point", children: "Point" }), _jsx(RadioItem, { value: "circle", children: "Circle" }), _jsx(RadioItem, { value: "line", children: "Line" }), _jsx(RadioItem, { value: "polygon", children: "Polygon" }), _jsx(RadioItem, { value: "boundingbox", children: "Bounding Box" })] }), _jsx("div", { className: "input-location mt-2", children: Component !== null ? _jsx(Component, __assign({}, props)) : null })] }));
};
export default LatLongDMS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF0LWxvbmctZG1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudC9sb2NhdGlvbi1uZXcvZ2VvLWNvbXBvbmVudHMvbGF0LWxvbmctZG1zLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7QUFFSixPQUFPLEtBQUssTUFBTSxzQ0FBc0MsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNDQUFzQyxDQUFBO0FBQ3ZFLE9BQU8sU0FBUyxNQUFNLDJDQUEyQyxDQUFBO0FBQ2pFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQTtBQUNoRSxPQUFPLFVBQVUsTUFBTSx1QkFBdUIsQ0FBQTtBQUM5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN6RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQ3BDLE9BQU8sY0FBYyxNQUFNLGFBQWEsQ0FBQTtBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFOUMsSUFBTSxrQkFBa0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzdELElBQU0sbUJBQW1CLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUU1RCxJQUFNLEtBQUssR0FBRyxVQUFDLEtBQVU7SUFDZixJQUFBLEdBQUcsR0FBZSxLQUFLLElBQXBCLEVBQUUsUUFBUSxHQUFLLEtBQUssU0FBVixDQUFVO0lBQy9CLE9BQU8sQ0FDTCxNQUFDLEtBQUssZUFDSixLQUFDLFdBQVcsSUFDVixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUNw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QUEsR0FBRyxHQUFlLEtBQUssSUFBcEIsRUFBRSxRQUFRLEdBQUssS0FBSyxTQUFWLENBQVU7SUFFL0IsSUFBTSxNQUFNLEdBQUc7UUFDYixLQUFLLEVBQUUsS0FBSztRQUNaLElBQUksRUFBRSxJQUFJO1FBQ1YsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsT0FBTztRQUNoQixXQUFXLEVBQUUsV0FBVztLQUN6QixDQUFBO0lBRUQsbUpBQW1KO0lBQ25KLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFBO0lBRTNDLE9BQU8sQ0FDTCwwQkFDRSxNQUFDLEtBQUssSUFDSixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFDaEIsUUFBUSxFQUFFLFFBQVEsQ0FDaEIsVUFBQyxLQUFVLEVBQUUsS0FBVSxJQUFLLE9BQUEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsRUFBekIsQ0FBeUIsQ0FDdEQsYUFFRCxLQUFDLFNBQVMsSUFBQyxLQUFLLEVBQUMsT0FBTyxzQkFBa0IsRUFDMUMsS0FBQyxTQUFTLElBQUMsS0FBSyxFQUFDLFFBQVEsdUJBQW1CLEVBQzVDLEtBQUMsU0FBUyxJQUFDLEtBQUssRUFBQyxNQUFNLHFCQUFpQixFQUN4QyxLQUFDLFNBQVMsSUFBQyxLQUFLLEVBQUMsU0FBUyx3QkFBb0IsRUFDOUMsS0FBQyxTQUFTLElBQUMsS0FBSyxFQUFDLGFBQWEsNkJBQXlCLElBQ2pELEVBQ1IsY0FBSyxTQUFTLEVBQUMscUJBQXFCLFlBQ2pDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUMsU0FBUyxlQUFLLEtBQUssRUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQ2pELElBQ0YsQ0FDUCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsZUFBZSxVQUFVLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cblxuaW1wb3J0IEdyb3VwIGZyb20gJy4uLy4uLy4uL3JlYWN0LWNvbXBvbmVudC9ncm91cC9pbmRleCdcbmltcG9ydCB7IFJhZGlvLCBSYWRpb0l0ZW0gfSBmcm9tICcuLi8uLi8uLi9yZWFjdC1jb21wb25lbnQvcmFkaW8vcmFkaW8nXG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJy4uLy4uLy4uL3JlYWN0LWNvbXBvbmVudC90ZXh0LWZpZWxkL2luZGV4J1xuaW1wb3J0IHsgVW5pdHMgfSBmcm9tICcuLi8uLi8uLi9yZWFjdC1jb21wb25lbnQvbG9jYXRpb24vY29tbW9uJ1xuaW1wb3J0IExpc3RFZGl0b3IgZnJvbSAnLi4vaW5wdXRzL2xpc3QtZWRpdG9yJ1xuaW1wb3J0IHsgRG1zTGF0aXR1ZGUsIERtc0xvbmdpdHVkZSB9IGZyb20gJy4vY29vcmRpbmF0ZXMnXG5pbXBvcnQgeyBkbXNQb2ludCB9IGZyb20gJy4uL21vZGVscydcbmltcG9ydCBEaXJlY3Rpb25JbnB1dCBmcm9tICcuL2RpcmVjdGlvbidcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJy4uL3V0aWxzL2Rtcy11dGlscydcblxuY29uc3QgbGF0aXR1ZGVEaXJlY3Rpb25zID0gW0RpcmVjdGlvbi5Ob3J0aCwgRGlyZWN0aW9uLlNvdXRoXVxuY29uc3QgbG9uZ2l0dWRlRGlyZWN0aW9ucyA9IFtEaXJlY3Rpb24uRWFzdCwgRGlyZWN0aW9uLldlc3RdXG5cbmNvbnN0IFBvaW50ID0gKHByb3BzOiBhbnkpID0+IHtcbiAgY29uc3QgeyBkbXMsIHNldFN0YXRlIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxHcm91cD5cbiAgICAgIDxEbXNMYXRpdHVkZVxuICAgICAgICB2YWx1ZT17ZG1zLnBvaW50LmxhdGl0dWRlLmNvb3JkaW5hdGV9XG4gICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAoZHJhZnQ6IGFueSwgdmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgIChkcmFmdC5kbXMucG9pbnQubGF0aXR1ZGUuY29vcmRpbmF0ZSA9IHZhbHVlKVxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICA8RGlyZWN0aW9uSW5wdXRcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjc2OSkgRklYTUU6IE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICAgICAgICAgIG9wdGlvbnM9e2xhdGl0dWRlRGlyZWN0aW9uc31cbiAgICAgICAgICB2YWx1ZT17ZG1zLnBvaW50LmxhdGl0dWRlLmRpcmVjdGlvbn1cbiAgICAgICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgICAgICAoZHJhZnQ6IGFueSwgdmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgICAgKGRyYWZ0LmRtcy5wb2ludC5sYXRpdHVkZS5kaXJlY3Rpb24gPSB2YWx1ZSlcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgPC9EbXNMYXRpdHVkZT5cbiAgICAgIDxEbXNMb25naXR1ZGVcbiAgICAgICAgdmFsdWU9e2Rtcy5wb2ludC5sb25naXR1ZGUuY29vcmRpbmF0ZX1cbiAgICAgICAgb25DaGFuZ2U9e3NldFN0YXRlKFxuICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgKGRyYWZ0LmRtcy5wb2ludC5sb25naXR1ZGUuY29vcmRpbmF0ZSA9IHZhbHVlKVxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICA8RGlyZWN0aW9uSW5wdXRcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjc2OSkgRklYTUU6IE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICAgICAgICAgIG9wdGlvbnM9e2xvbmdpdHVkZURpcmVjdGlvbnN9XG4gICAgICAgICAgdmFsdWU9e2Rtcy5wb2ludC5sb25naXR1ZGUuZGlyZWN0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgICAoZHJhZnQuZG1zLnBvaW50LmxvbmdpdHVkZS5kaXJlY3Rpb24gPSB2YWx1ZSlcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgPC9EbXNMb25naXR1ZGU+XG4gICAgPC9Hcm91cD5cbiAgKVxufVxuXG5jb25zdCBDaXJjbGUgPSAocHJvcHM6IGFueSkgPT4ge1xuICBjb25zdCB7IGRtcywgc2V0U3RhdGUgfSA9IHByb3BzXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGZsZXgtbm93cmFwIHNwYWNlLXktMlwiPlxuICAgICAgPEdyb3VwPlxuICAgICAgICA8RG1zTGF0aXR1ZGVcbiAgICAgICAgICB2YWx1ZT17ZG1zLmNpcmNsZS5wb2ludC5sYXRpdHVkZS5jb29yZGluYXRlfVxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgICAoZHJhZnQuZG1zLmNpcmNsZS5wb2ludC5sYXRpdHVkZS5jb29yZGluYXRlID0gdmFsdWUpXG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxEaXJlY3Rpb25JbnB1dFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDI3NjkpIEZJWE1FOiBObyBvdmVybG9hZCBtYXRjaGVzIHRoaXMgY2FsbC5cbiAgICAgICAgICAgIG9wdGlvbnM9e2xhdGl0dWRlRGlyZWN0aW9uc31cbiAgICAgICAgICAgIHZhbHVlPXtkbXMuY2lyY2xlLnBvaW50LmxhdGl0dWRlLmRpcmVjdGlvbn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAgICAgKGRyYWZ0OiBhbnksIHZhbHVlOiBhbnkpID0+XG4gICAgICAgICAgICAgICAgKGRyYWZ0LmRtcy5jaXJjbGUucG9pbnQubGF0aXR1ZGUuZGlyZWN0aW9uID0gdmFsdWUpXG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRG1zTGF0aXR1ZGU+XG4gICAgICAgIDxEbXNMb25naXR1ZGVcbiAgICAgICAgICB2YWx1ZT17ZG1zLmNpcmNsZS5wb2ludC5sb25naXR1ZGUuY29vcmRpbmF0ZX1cbiAgICAgICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgICAgICAoZHJhZnQ6IGFueSwgdmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgICAgKGRyYWZ0LmRtcy5jaXJjbGUucG9pbnQubG9uZ2l0dWRlLmNvb3JkaW5hdGUgPSB2YWx1ZSlcbiAgICAgICAgICApfVxuICAgICAgICA+XG4gICAgICAgICAgPERpcmVjdGlvbklucHV0XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjc2OSkgRklYTUU6IE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICAgICAgICAgICAgb3B0aW9ucz17bG9uZ2l0dWRlRGlyZWN0aW9uc31cbiAgICAgICAgICAgIHZhbHVlPXtkbXMuY2lyY2xlLnBvaW50LmxvbmdpdHVkZS5kaXJlY3Rpb259XG4gICAgICAgICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgICAgIChkcmFmdC5kbXMuY2lyY2xlLnBvaW50LmxvbmdpdHVkZS5kaXJlY3Rpb24gPSB2YWx1ZSlcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9EbXNMb25naXR1ZGU+XG4gICAgICA8L0dyb3VwPlxuICAgICAgPFVuaXRzXG4gICAgICAgIHZhbHVlPXtkbXMuY2lyY2xlLnVuaXRzfVxuICAgICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgICAgKGRyYWZ0OiBhbnksIHZhbHVlOiBhbnkpID0+IChkcmFmdC5kbXMuY2lyY2xlLnVuaXRzID0gdmFsdWUpXG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjMyMikgRklYTUU6IFR5cGUgJ3sgbGFiZWw6IHN0cmluZzsgdHlwZTogc3RyaW5nOyB2YWx1ZTogYW55OyBvLi4uIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG8gc2VlIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICBsYWJlbD1cIlJhZGl1c1wiXG4gICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgdmFsdWU9e2Rtcy5jaXJjbGUucmFkaXVzfVxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PiAoZHJhZnQuZG1zLmNpcmNsZS5yYWRpdXMgPSB2YWx1ZSlcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgPC9Vbml0cz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBMaW5lID0gKHByb3BzOiBhbnkpID0+IHtcbiAgY29uc3QgeyBkbXMsIHNldFN0YXRlIH0gPSBwcm9wc1xuICBjb25zdCBwb2ludHMgPSBkbXMubGluZS5saXN0Lm1hcCgoX2VudHJ5OiBhbnksIGluZGV4OiBhbnkpID0+IChcbiAgICA8R3JvdXAga2V5PXtpbmRleH0+XG4gICAgICA8RG1zTGF0aXR1ZGVcbiAgICAgICAgdmFsdWU9e2Rtcy5saW5lLmxpc3RbaW5kZXhdLmxhdGl0dWRlLmNvb3JkaW5hdGV9XG4gICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAoZHJhZnQ6IGFueSwgdmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgIChkcmFmdC5kbXMubGluZS5saXN0W2luZGV4XS5sYXRpdHVkZS5jb29yZGluYXRlID0gdmFsdWUpXG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIDxEaXJlY3Rpb25JbnB1dFxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHMtbWlncmF0ZSgyNzY5KSBGSVhNRTogTm8gb3ZlcmxvYWQgbWF0Y2hlcyB0aGlzIGNhbGwuXG4gICAgICAgICAgb3B0aW9ucz17bGF0aXR1ZGVEaXJlY3Rpb25zfVxuICAgICAgICAgIHZhbHVlPXtkbXMubGluZS5saXN0W2luZGV4XS5sYXRpdHVkZS5kaXJlY3Rpb259XG4gICAgICAgICAgb25DaGFuZ2U9e3NldFN0YXRlKFxuICAgICAgICAgICAgKGRyYWZ0OiBhbnksIHZhbHVlOiBhbnkpID0+XG4gICAgICAgICAgICAgIChkcmFmdC5kbXMubGluZS5saXN0W2luZGV4XS5sYXRpdHVkZS5kaXJlY3Rpb24gPSB2YWx1ZSlcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgPC9EbXNMYXRpdHVkZT5cbiAgICAgIDxEbXNMb25naXR1ZGVcbiAgICAgICAgdmFsdWU9e2Rtcy5saW5lLmxpc3RbaW5kZXhdLmxvbmdpdHVkZS5jb29yZGluYXRlfVxuICAgICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgICAgKGRyYWZ0OiBhbnksIHZhbHVlOiBhbnkpID0+XG4gICAgICAgICAgICAoZHJhZnQuZG1zLmxpbmUubGlzdFtpbmRleF0ubG9uZ2l0dWRlLmNvb3JkaW5hdGUgPSB2YWx1ZSlcbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPERpcmVjdGlvbklucHV0XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDI3NjkpIEZJWE1FOiBObyBvdmVybG9hZCBtYXRjaGVzIHRoaXMgY2FsbC5cbiAgICAgICAgICBvcHRpb25zPXtsb25naXR1ZGVEaXJlY3Rpb25zfVxuICAgICAgICAgIHZhbHVlPXtkbXMubGluZS5saXN0W2luZGV4XS5sb25naXR1ZGUuZGlyZWN0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgICAoZHJhZnQuZG1zLmxpbmUubGlzdFtpbmRleF0ubG9uZ2l0dWRlLmRpcmVjdGlvbiA9IHZhbHVlKVxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG4gICAgICA8L0Rtc0xvbmdpdHVkZT5cbiAgICA8L0dyb3VwPlxuICApKVxuXG4gIHJldHVybiAoXG4gICAgPExpc3RFZGl0b3JcbiAgICAgIGxpc3Q9e2Rtcy5saW5lLmxpc3R9XG4gICAgICBkZWZhdWx0SXRlbT17ZG1zUG9pbnR9XG4gICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PiAoZHJhZnQuZG1zLmxpbmUubGlzdCA9IHZhbHVlKVxuICAgICAgKX1cbiAgICA+XG4gICAgICB7cG9pbnRzfVxuICAgIDwvTGlzdEVkaXRvcj5cbiAgKVxufVxuXG5jb25zdCBQb2x5Z29uID0gKHByb3BzOiBhbnkpID0+IHtcbiAgY29uc3QgeyBkbXMsIHNldFN0YXRlIH0gPSBwcm9wc1xuICBjb25zdCBwb2ludHMgPSBkbXMucG9seWdvbi5saXN0Lm1hcCgoX2VudHJ5OiBhbnksIGluZGV4OiBhbnkpID0+IChcbiAgICA8R3JvdXAga2V5PXtpbmRleH0+XG4gICAgICA8RG1zTGF0aXR1ZGVcbiAgICAgICAgdmFsdWU9e2Rtcy5wb2x5Z29uLmxpc3RbaW5kZXhdLmxhdGl0dWRlLmNvb3JkaW5hdGV9XG4gICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAoZHJhZnQ6IGFueSwgdmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgIChkcmFmdC5kbXMucG9seWdvbi5saXN0W2luZGV4XS5sYXRpdHVkZS5jb29yZGluYXRlID0gdmFsdWUpXG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIDxEaXJlY3Rpb25JbnB1dFxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHMtbWlncmF0ZSgyNzY5KSBGSVhNRTogTm8gb3ZlcmxvYWQgbWF0Y2hlcyB0aGlzIGNhbGwuXG4gICAgICAgICAgb3B0aW9ucz17bGF0aXR1ZGVEaXJlY3Rpb25zfVxuICAgICAgICAgIHZhbHVlPXtkbXMucG9seWdvbi5saXN0W2luZGV4XS5sYXRpdHVkZS5kaXJlY3Rpb259XG4gICAgICAgICAgb25DaGFuZ2U9e3NldFN0YXRlKFxuICAgICAgICAgICAgKGRyYWZ0OiBhbnksIHZhbHVlOiBhbnkpID0+XG4gICAgICAgICAgICAgIChkcmFmdC5kbXMucG9seWdvbi5saXN0W2luZGV4XS5sYXRpdHVkZS5kaXJlY3Rpb24gPSB2YWx1ZSlcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgPC9EbXNMYXRpdHVkZT5cbiAgICAgIDxEbXNMb25naXR1ZGVcbiAgICAgICAgdmFsdWU9e2Rtcy5wb2x5Z29uLmxpc3RbaW5kZXhdLmxvbmdpdHVkZS5jb29yZGluYXRlfVxuICAgICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgICAgKGRyYWZ0OiBhbnksIHZhbHVlOiBhbnkpID0+XG4gICAgICAgICAgICAoZHJhZnQuZG1zLnBvbHlnb24ubGlzdFtpbmRleF0ubG9uZ2l0dWRlLmNvb3JkaW5hdGUgPSB2YWx1ZSlcbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPERpcmVjdGlvbklucHV0XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDI3NjkpIEZJWE1FOiBObyBvdmVybG9hZCBtYXRjaGVzIHRoaXMgY2FsbC5cbiAgICAgICAgICBvcHRpb25zPXtsb25naXR1ZGVEaXJlY3Rpb25zfVxuICAgICAgICAgIHZhbHVlPXtkbXMucG9seWdvbi5saXN0W2luZGV4XS5sb25naXR1ZGUuZGlyZWN0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgICAoZHJhZnQuZG1zLnBvbHlnb24ubGlzdFtpbmRleF0ubG9uZ2l0dWRlLmRpcmVjdGlvbiA9IHZhbHVlKVxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG4gICAgICA8L0Rtc0xvbmdpdHVkZT5cbiAgICA8L0dyb3VwPlxuICApKVxuXG4gIHJldHVybiAoXG4gICAgPExpc3RFZGl0b3JcbiAgICAgIGxpc3Q9e2Rtcy5wb2x5Z29uLmxpc3R9XG4gICAgICBkZWZhdWx0SXRlbT17ZG1zUG9pbnR9XG4gICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PiAoZHJhZnQuZG1zLnBvbHlnb24ubGlzdCA9IHZhbHVlKVxuICAgICAgKX1cbiAgICA+XG4gICAgICB7cG9pbnRzfVxuICAgIDwvTGlzdEVkaXRvcj5cbiAgKVxufVxuXG5jb25zdCBCb3VuZGluZ0JveCA9IChwcm9wczogYW55KSA9PiB7XG4gIGNvbnN0IHsgZG1zLCBzZXRTdGF0ZSB9ID0gcHJvcHNcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZmxleC1ub3dyYXAgc3BhY2UteS0yXCI+XG4gICAgICA8RG1zTGF0aXR1ZGVcbiAgICAgICAgbGFiZWw9XCJTb3V0aFwiXG4gICAgICAgIHZhbHVlPXtkbXMuYm91bmRpbmdib3guc291dGguY29vcmRpbmF0ZX1cbiAgICAgICAgb25DaGFuZ2U9e3NldFN0YXRlKFxuICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgKGRyYWZ0LmRtcy5ib3VuZGluZ2JveC5zb3V0aC5jb29yZGluYXRlID0gdmFsdWUpXG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIDxEaXJlY3Rpb25JbnB1dFxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHMtbWlncmF0ZSgyNzY5KSBGSVhNRTogTm8gb3ZlcmxvYWQgbWF0Y2hlcyB0aGlzIGNhbGwuXG4gICAgICAgICAgb3B0aW9ucz17bGF0aXR1ZGVEaXJlY3Rpb25zfVxuICAgICAgICAgIHZhbHVlPXtkbXMuYm91bmRpbmdib3guc291dGguZGlyZWN0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgICAoZHJhZnQuZG1zLmJvdW5kaW5nYm94LnNvdXRoLmRpcmVjdGlvbiA9IHZhbHVlKVxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG4gICAgICA8L0Rtc0xhdGl0dWRlPlxuICAgICAgPERtc0xhdGl0dWRlXG4gICAgICAgIGxhYmVsPVwiTm9ydGhcIlxuICAgICAgICB2YWx1ZT17ZG1zLmJvdW5kaW5nYm94Lm5vcnRoLmNvb3JkaW5hdGV9XG4gICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAoZHJhZnQ6IGFueSwgdmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgIChkcmFmdC5kbXMuYm91bmRpbmdib3gubm9ydGguY29vcmRpbmF0ZSA9IHZhbHVlKVxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICA8RGlyZWN0aW9uSW5wdXRcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjc2OSkgRklYTUU6IE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICAgICAgICAgIG9wdGlvbnM9e2xhdGl0dWRlRGlyZWN0aW9uc31cbiAgICAgICAgICB2YWx1ZT17ZG1zLmJvdW5kaW5nYm94Lm5vcnRoLmRpcmVjdGlvbn1cbiAgICAgICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgICAgICAoZHJhZnQ6IGFueSwgdmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgICAgKGRyYWZ0LmRtcy5ib3VuZGluZ2JveC5ub3J0aC5kaXJlY3Rpb24gPSB2YWx1ZSlcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgPC9EbXNMYXRpdHVkZT5cbiAgICAgIDxEbXNMb25naXR1ZGVcbiAgICAgICAgbGFiZWw9XCJXZXN0XCJcbiAgICAgICAgdmFsdWU9e2Rtcy5ib3VuZGluZ2JveC53ZXN0LmNvb3JkaW5hdGV9XG4gICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAoZHJhZnQ6IGFueSwgdmFsdWU6IGFueSkgPT5cbiAgICAgICAgICAgIChkcmFmdC5kbXMuYm91bmRpbmdib3gud2VzdC5jb29yZGluYXRlID0gdmFsdWUpXG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIDxEaXJlY3Rpb25JbnB1dFxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHMtbWlncmF0ZSgyNzY5KSBGSVhNRTogTm8gb3ZlcmxvYWQgbWF0Y2hlcyB0aGlzIGNhbGwuXG4gICAgICAgICAgb3B0aW9ucz17bG9uZ2l0dWRlRGlyZWN0aW9uc31cbiAgICAgICAgICB2YWx1ZT17ZG1zLmJvdW5kaW5nYm94Lndlc3QuZGlyZWN0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRTdGF0ZShcbiAgICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgICAoZHJhZnQuZG1zLmJvdW5kaW5nYm94Lndlc3QuZGlyZWN0aW9uID0gdmFsdWUpXG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgIDwvRG1zTG9uZ2l0dWRlPlxuICAgICAgPERtc0xvbmdpdHVkZVxuICAgICAgICBsYWJlbD1cIkVhc3RcIlxuICAgICAgICB2YWx1ZT17ZG1zLmJvdW5kaW5nYm94LmVhc3QuY29vcmRpbmF0ZX1cbiAgICAgICAgb25DaGFuZ2U9e3NldFN0YXRlKFxuICAgICAgICAgIChkcmFmdDogYW55LCB2YWx1ZTogYW55KSA9PlxuICAgICAgICAgICAgKGRyYWZ0LmRtcy5ib3VuZGluZ2JveC5lYXN0LmNvb3JkaW5hdGUgPSB2YWx1ZSlcbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPERpcmVjdGlvbklucHV0XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDI3NjkpIEZJWE1FOiBObyBvdmVybG9hZCBtYXRjaGVzIHRoaXMgY2FsbC5cbiAgICAgICAgICBvcHRpb25zPXtsb25naXR1ZGVEaXJlY3Rpb25zfVxuICAgICAgICAgIHZhbHVlPXtkbXMuYm91bmRpbmdib3guZWFzdC5kaXJlY3Rpb259XG4gICAgICAgICAgb25DaGFuZ2U9e3NldFN0YXRlKFxuICAgICAgICAgICAgKGRyYWZ0OiBhbnksIHZhbHVlOiBhbnkpID0+XG4gICAgICAgICAgICAgIChkcmFmdC5kbXMuYm91bmRpbmdib3guZWFzdC5kaXJlY3Rpb24gPSB2YWx1ZSlcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgPC9EbXNMb25naXR1ZGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgTGF0TG9uZ0RNUyA9IChwcm9wczogYW55KSA9PiB7XG4gIGNvbnN0IHsgZG1zLCBzZXRTdGF0ZSB9ID0gcHJvcHNcblxuICBjb25zdCBpbnB1dHMgPSB7XG4gICAgcG9pbnQ6IFBvaW50LFxuICAgIGxpbmU6IExpbmUsXG4gICAgY2lyY2xlOiBDaXJjbGUsXG4gICAgcG9seWdvbjogUG9seWdvbixcbiAgICBib3VuZGluZ2JveDogQm91bmRpbmdCb3gsXG4gIH1cblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoNzA1MykgRklYTUU6IEVsZW1lbnQgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZSBiZWNhdXNlIGV4cHJlLi4uIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG8gc2VlIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2VcbiAgY29uc3QgQ29tcG9uZW50ID0gaW5wdXRzW2Rtcy5zaGFwZV0gfHwgbnVsbFxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxSYWRpb1xuICAgICAgICB2YWx1ZT17ZG1zLnNoYXBlfVxuICAgICAgICBvbkNoYW5nZT17c2V0U3RhdGUoXG4gICAgICAgICAgKGRyYWZ0OiBhbnksIHZhbHVlOiBhbnkpID0+IChkcmFmdC5kbXMuc2hhcGUgPSB2YWx1ZSlcbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPFJhZGlvSXRlbSB2YWx1ZT1cInBvaW50XCI+UG9pbnQ8L1JhZGlvSXRlbT5cbiAgICAgICAgPFJhZGlvSXRlbSB2YWx1ZT1cImNpcmNsZVwiPkNpcmNsZTwvUmFkaW9JdGVtPlxuICAgICAgICA8UmFkaW9JdGVtIHZhbHVlPVwibGluZVwiPkxpbmU8L1JhZGlvSXRlbT5cbiAgICAgICAgPFJhZGlvSXRlbSB2YWx1ZT1cInBvbHlnb25cIj5Qb2x5Z29uPC9SYWRpb0l0ZW0+XG4gICAgICAgIDxSYWRpb0l0ZW0gdmFsdWU9XCJib3VuZGluZ2JveFwiPkJvdW5kaW5nIEJveDwvUmFkaW9JdGVtPlxuICAgICAgPC9SYWRpbz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtbG9jYXRpb24gbXQtMlwiPlxuICAgICAgICB7Q29tcG9uZW50ICE9PSBudWxsID8gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+IDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IExhdExvbmdETVNcbiJdfQ==