import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import { Radio, RadioItem } from '../../../react-component/radio/radio';
import TextField from '../../../react-component/text-field/index';
import { Units } from '../../../react-component/location/common';
import ListEditor from '../inputs/list-editor';
import { UsngCoordinate } from './coordinates';
var Point = function (props) {
    var usng = props.usng, setState = props.setState;
    return (_jsx(UsngCoordinate, { value: usng.point, onChange: setState(function (draft, value) { return (draft.usng.point = value); }) }));
};
var Circle = function (props) {
    var usng = props.usng, setState = props.setState;
    return (_jsxs("div", { className: "flex flex-col flex-nowrap space-y-2", children: [_jsx(UsngCoordinate, { value: usng.circle.point, onChange: setState(function (draft, value) { return (draft.usng.circle.point = value); }) }), _jsx(Units, { value: usng.circle.units, onChange: setState(function (draft, value) { return (draft.usng.circle.units = value); }), children: _jsx(TextField
                // @ts-expect-error ts-migrate(2322) FIXME: Type '{ label: string; type: string; value: any; o... Remove this comment to see the full error message
                , { 
                    // @ts-expect-error ts-migrate(2322) FIXME: Type '{ label: string; type: string; value: any; o... Remove this comment to see the full error message
                    label: "Radius", type: "number", value: usng.circle.radius, onChange: setState(function (draft, value) { return (draft.usng.circle.radius = value); }) }) })] }));
};
var Line = function (props) {
    var usng = props.usng, setState = props.setState;
    var grids = usng.line.list.map(function (_entry, index) { return (_jsx(UsngCoordinate, { value: usng.line.list[index], onChange: setState(function (draft, value) { return (draft.usng.line.list[index] = value); }) }, index)); });
    return (_jsx(ListEditor, { list: usng.line.list, defaultItem: "", onChange: setState(function (draft, value) { return (draft.usng.line.list = value); }), children: grids }));
};
var Polygon = function (props) {
    var usng = props.usng, setState = props.setState;
    var grids = usng.polygon.list.map(function (_entry, index) { return (_jsx(UsngCoordinate, { value: usng.polygon.list[index], onChange: setState(function (draft, value) { return (draft.usng.polygon.list[index] = value); }) }, index)); });
    return (_jsx(ListEditor, { list: usng.polygon.list, defaultItem: "", onChange: setState(function (draft, value) { return (draft.usng.polygon.list = value); }), children: grids }));
};
var BoundingBox = function (props) {
    var usng = props.usng, setState = props.setState;
    return (_jsx(UsngCoordinate, { value: usng.boundingbox, onChange: setState(function (draft, value) { return (draft.usng.boundingbox = value); }) }));
};
var USNG = function (props) {
    var usng = props.usng, setState = props.setState;
    var inputs = {
        point: Point,
        circle: Circle,
        line: Line,
        polygon: Polygon,
        boundingbox: BoundingBox,
    };
    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
    var Component = inputs[usng.shape] || null;
    return (_jsxs("div", { children: [_jsxs(Radio, { value: usng.shape, onChange: setState(function (draft, value) { return (draft.usng.shape = value); }), children: [_jsx(RadioItem, { value: "point", children: "Point" }), _jsx(RadioItem, { value: "circle", children: "Circle" }), _jsx(RadioItem, { value: "line", children: "Line" }), _jsx(RadioItem, { value: "polygon", children: "Polygon" }), _jsx(RadioItem, { value: "boundingbox", children: "Bounding Box" })] }), _jsx("div", { className: "input-location mt-2", children: Component !== null ? _jsx(Component, __assign({}, props)) : null })] }));
};
export default USNG;
//# sourceMappingURL=data:application/json;base64,