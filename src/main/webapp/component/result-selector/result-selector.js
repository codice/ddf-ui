import { __assign, __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from 'react';
import Spellcheck from '../spellcheck/spellcheck';
import Grid from '@mui/material/Grid';
import QueryFeed from './query-feed';
import LinearProgress from '@mui/material/LinearProgress';
import Paging from './paging';
import Paper from '@mui/material/Paper';
import Button from '@mui/material/Button';
import FilterListIcon from '@mui/icons-material/FilterList';
import ResultFilter from '../result-filter/result-filter';
import { useBackbone } from '../selection-checkbox/useBackbone.hook';
import EphemeralSearchSort from '../../react-component/query-sort-selection/ephemeral-search-sort';
import { useLazyResultsStatusFromSelectionInterface, useLazyResultsSelectedResultsFromSelectionInterface, } from '../selection-interface/hooks';
import VisualizationSelector from '../../react-component/visualization-selector/visualization-selector';
import LayoutDropdownIcon from '@mui/icons-material/ViewComfy';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import user from '../singletons/user-instance';
import MoreIcon from '@mui/icons-material/MoreVert';
import LazyMetacardInteractions from '../visualization/results-visual/lazy-metacard-interactions';
import { Elevations } from '../theme/theme';
import SelectionRipple from '../golden-layout/selection-ripple';
import Extensions from '../../extension-points';
import { useMenuState } from '../menu-state/menu-state';
import Popover from '@mui/material/Popover';
import Badge from '@mui/material/Badge';
var SelectedResults = function (_a) {
    var selectionInterface = _a.selectionInterface;
    var selectedResults = useLazyResultsSelectedResultsFromSelectionInterface({
        selectionInterface: selectionInterface,
    });
    var selectedResultsArray = Object.values(selectedResults);
    var _b = useMenuState(), MuiButtonProps = _b.MuiButtonProps, MuiPopoverProps = _b.MuiPopoverProps, handleClose = _b.handleClose;
    return (_jsxs(_Fragment, { children: [_jsxs(Button, __assign({ "data-id": "result-selector-more-vert-button", className: "relative ".concat(selectedResultsArray.length === 0 ? 'invisible' : ''), color: "primary", disabled: selectedResultsArray.length === 0, style: { height: '100%' }, size: "small" }, MuiButtonProps, { children: [selectedResultsArray.length, " selected", _jsx("div", { className: selectedResultsArray.length === 0 ? '' : 'Mui-text-text-primary', children: _jsx(MoreIcon, {}) })] })), _jsx(Popover, __assign({}, MuiPopoverProps, { keepMounted: true, children: _jsx(Paper, { children: _jsx(LazyMetacardInteractions, { lazyResults: selectedResultsArray, onClose: handleClose }) }) }))] }));
};
var determineResultFilterSize = function () {
    var resultFilters = user.get('user').get('preferences').get('resultFilter');
    if (!resultFilters || !resultFilters.filters) {
        return 0;
    }
    return resultFilters.filters.length;
};
var determineResultSortSize = function () {
    var resultSorts = user.get('user').get('preferences').get('resultSort');
    if (!resultSorts) {
        return 0;
    }
    return resultSorts.length;
};
var ResultSelector = function (_a) {
    var selectionInterface = _a.selectionInterface, model = _a.model, goldenLayout = _a.goldenLayout, layoutResult = _a.layoutResult, editLayoutRef = _a.editLayoutRef;
    var isSearching = useLazyResultsStatusFromSelectionInterface({
        selectionInterface: selectionInterface,
    }).isSearching;
    var _b = __read(React.useState(determineResultFilterSize()), 2), resultFilterSize = _b[0], setResultFilterSize = _b[1];
    var _c = __read(React.useState(determineResultSortSize()), 2), resultSortSize = _c[0], setResultSortSize = _c[1];
    var listenTo = useBackbone().listenTo;
    React.useEffect(function () {
        listenTo(user.get('user').get('preferences'), 'change:resultFilter', function () {
            setResultFilterSize(determineResultFilterSize());
        });
        listenTo(user.get('user').get('preferences'), 'change:resultSort', function () {
            setResultSortSize(determineResultSortSize());
        });
    }, []);
    var LayoutDropdown = Extensions.layoutDropdown({
        goldenLayout: goldenLayout,
        layoutResult: layoutResult,
        editLayoutRef: editLayoutRef,
    });
    var resultFilterMenuState = useMenuState();
    var resultSortMenuState = useMenuState();
    var layoutMenuState = useMenuState();
    return (_jsx(React.Fragment, { children: _jsxs(Grid, { container: true, alignItems: "center", justifyContent: "flex-start", direction: "row", children: [isSearching ? (_jsx(LinearProgress, { variant: "query", className: "opacity-100 absolute w-full h-1 left-0 bottom-0" })) : null, _jsx(Grid, { item: true, children: _jsx(Spellcheck, { selectionInterface: selectionInterface, model: model }, Math.random()) }), _jsx(Grid, { item: true, className: "relative z-10", children: _jsx(QueryFeed, { selectionInterface: selectionInterface }) }), _jsxs(Grid, { item: true, className: "relative z-0", children: [_jsx(SelectionRipple, { selectionInterface: selectionInterface }), _jsx(SelectedResults, { selectionInterface: selectionInterface })] }), _jsx(Grid, { item: true, className: "pl-2 mx-auto", children: _jsx(Paging, { selectionInterface: selectionInterface }) }), _jsxs(Grid, { item: true, className: "ml-auto", children: [_jsx(Button, __assign({ "data-id": "filter-button", variant: "text", color: "primary" }, resultFilterMenuState.MuiButtonProps, { children: _jsxs(Badge, { color: "secondary", badgeContent: resultFilterSize, anchorOrigin: {
                                    vertical: 'top',
                                    horizontal: 'left',
                                }, className: "items-center", children: [_jsx(FilterListIcon, { className: "Mui-text-text-primary" }), "Filter"] }) })), _jsx(Popover, __assign({}, resultFilterMenuState.MuiPopoverProps, { children: _jsx(Paper, { className: "p-3", elevation: Elevations.overlays, children: _jsx(ResultFilter, { closeDropdown: resultFilterMenuState.handleClose }) }) }))] }), _jsxs(Grid, { item: true, className: "pl-2", children: [_jsx(Button, __assign({ "data-id": "sort-button", variant: "text", color: "primary" }, resultSortMenuState.MuiButtonProps, { children: _jsxs(Badge, { color: "secondary", badgeContent: resultSortSize, anchorOrigin: {
                                    vertical: 'top',
                                    horizontal: 'left',
                                }, className: "items-center", children: [_jsx(ArrowDownwardIcon, { className: "Mui-text-text-primary" }), "Sort"] }) })), _jsx(Popover, __assign({}, resultSortMenuState.MuiPopoverProps, { children: _jsx(Paper, { className: "p-3", elevation: Elevations.overlays, children: _jsx(EphemeralSearchSort, { closeDropdown: resultSortMenuState.handleClose }) }) }))] }), _jsxs(Grid, { item: true, className: "pl-2", children: [_jsxs(Button, __assign({ "data-id": "layout-button", color: "primary" }, layoutMenuState.MuiButtonProps, { children: [_jsx(LayoutDropdownIcon, { className: "Mui-text-text-primary" }), _jsx("div", { className: "pl-1", children: "Layout" })] })), _jsx(Popover, __assign({}, layoutMenuState.MuiPopoverProps, { children: _jsx(Paper, { className: "p-3", elevation: Elevations.overlays, children: LayoutDropdown || (_jsx(VisualizationSelector, { onClose: layoutMenuState.handleClose, goldenLayout: goldenLayout })) }) }))] })] }) }));
};
export default ResultSelector;
//# sourceMappingURL=data:application/json;base64,