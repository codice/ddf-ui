import { __assign, __makeTemplateObject, __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from 'react';
import Paper from '@mui/material/Paper';
import moment from 'moment-timezone';
import styled from 'styled-components';
import Button from '@mui/material/Button';
import { useLazyResultsStatusFromSelectionInterface } from '../selection-interface/hooks';
import Tooltip from '@mui/material/Tooltip';
import { Elevations } from '../theme/theme';
import FilterListIcon from '@mui/icons-material/FilterList';
import { fuzzyHits, fuzzyResultCount } from './fuzzy-results';
import WarningIcon from '@mui/icons-material/Warning';
import ErrorIcon from '@mui/icons-material/Error';
import { useMenuState } from '../menu-state/menu-state';
import Popover from '@mui/material/Popover';
var Cell = styled.td(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  padding: 20px;\n  border: solid 1px rgba(120, 120, 120, 0.2);\n"], ["\n  padding: 20px;\n  border: solid 1px rgba(120, 120, 120, 0.2);\n"])));
var HeaderCell = styled.th(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  padding: 20px;\n"], ["\n  padding: 20px;\n"])));
var CellValue = function (props) {
    var value = props.value, _a = props.warnings, warnings = _a === void 0 ? [] : _a, _b = props.errors, errors = _b === void 0 ? [] : _b, message = props.message, alwaysShowValue = props.alwaysShowValue, hasReturned = props.hasReturned, successful = props.successful;
    return (_jsxs(React.Fragment, { children: [(errors.length > 0 || !successful) && (_jsx(Tooltip, { title: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2", children: (function () {
                        if (errors.length > 0) {
                            return errors.map(function (error) { return _jsx("div", { children: error }, error); });
                        }
                        else if (message) {
                            return message;
                        }
                        else {
                            return 'Something went wrong searching this source.';
                        }
                    })() }), children: _jsx(ErrorIcon, { style: { paddingRight: '5px' }, color: "error" }) })), warnings.length > 0 && (_jsx(Tooltip, { title: _jsx(Paper, { elevation: Elevations.overlays, className: "p-2", children: warnings.map(function (warning) { return (_jsx("div", { children: warning }, warning)); }) }), children: _jsx(WarningIcon, { style: { paddingRight: '5px' }, color: "warning" }) })), alwaysShowValue || (!message && hasReturned) ? value : null, !hasReturned && !alwaysShowValue && (_jsx("span", { className: "fa fa-circle-o-notch fa-spin", title: "Waiting for source to return" }))] }));
};
var QueryStatusRow = function (_a) {
    var status = _a.status, query = _a.query;
    var hasReturned = status.hasReturned;
    var successful = status.successful;
    var message = status.message;
    var warnings = status.warnings;
    var errors = status.errors;
    var id = status.id;
    return (_jsxs("tr", { "data-id": "source-".concat(id, "-row"), children: [_jsx(Cell, { "data-id": "source-id-label", children: _jsx(CellValue, { value: id, hasReturned: hasReturned, successful: successful, warnings: warnings, errors: errors, message: message, alwaysShowValue: true }) }), _jsx(Cell, { "data-id": "available-label", children: _jsx(CellValue, { value: "".concat(status.count, " hit").concat(status.count === 1 ? '' : 's'), hasReturned: hasReturned, successful: successful, warnings: warnings, errors: errors, message: message }) }), _jsx(Cell, { "data-id": "possible-label", children: _jsx(CellValue, { value: fuzzyHits(status.hits), hasReturned: hasReturned, successful: successful, warnings: warnings, errors: errors, message: message }) }), _jsx(Cell, { "data-id": "time-label", children: _jsx(CellValue, { value: status.elapsed / 1000, hasReturned: hasReturned, successful: successful, warnings: warnings, errors: errors, message: message }) }), _jsx(Cell, { className: "status-filter", children: _jsx(Tooltip, { title: "Click to search only this source.", children: _jsxs(Button, { "data-id": "filter-button", onClick: function () {
                            query.set('sources', [status.id]);
                            query.startSearchFromFirstPage();
                        }, color: "primary", children: [_jsx(FilterListIcon, { className: "Mui-text-text-primary" }), "Filter"] }) }) })] }));
};
var QueryStatus = function (_a) {
    var statusBySource = _a.statusBySource, query = _a.query;
    return (_jsxs("table", { children: [_jsxs("tr", { children: [_jsx(HeaderCell, { children: "Source" }), _jsx(HeaderCell, { "data-help": "This is the number of results available based on the current sorting.", children: "Available" }), _jsx(HeaderCell, { "data-help": "This is the total number of results (hits) that matched your search.", children: "Possible" }), _jsx(HeaderCell, { "data-help": "This is the time (in seconds) that it took for the search to run.", children: "Time (s)" }), _jsx(HeaderCell, { "data-help": "Locally filter results to be from a specific source.", children: "Filter" })] }), _jsx("tbody", { children: statusBySource.map(function (status) {
                    return (_jsx(QueryStatusRow, { status: status, query: query }, status.id));
                }) })] }));
};
var LastRan = function (_a) {
    var currentAsOf = _a.currentAsOf;
    var _b = __read(React.useState(moment(currentAsOf).fromNow()), 2), howLongAgo = _b[0], setHowLongAgo = _b[1];
    React.useEffect(function () {
        setHowLongAgo(moment(currentAsOf).fromNow());
        var intervalId = setInterval(function () {
            setHowLongAgo(moment(currentAsOf).fromNow());
        }, 60000);
        return function () {
            clearInterval(intervalId);
        };
    }, [currentAsOf]);
    return _jsxs("div", { style: { whiteSpace: 'nowrap' }, children: ["Current as of ", howLongAgo] });
};
var QueryFeed = function (_a) {
    var selectionInterface = _a.selectionInterface;
    var _b = useMenuState(), MuiButtonProps = _b.MuiButtonProps, MuiPopoverProps = _b.MuiPopoverProps;
    var _c = useLazyResultsStatusFromSelectionInterface({
        selectionInterface: selectionInterface,
    }), status = _c.status, currentAsOf = _c.currentAsOf, isSearching = _c.isSearching;
    var statusBySource = Object.values(status);
    var resultMessage = '', pending = false, failed = false, warnings = false, errors = false;
    if (statusBySource.length === 0) {
        resultMessage = 'Has not been run';
    }
    else {
        var sourcesThatHaveReturned = statusBySource.filter(function (status) { return status.hasReturned; });
        if (sourcesThatHaveReturned.length > 0) {
            var results = statusBySource.filter(function (status) { return status.hasReturned; });
            var available_1 = 0;
            var possible_1 = 0;
            results.forEach(function (result) {
                var _a, _b;
                available_1 += (_a = result === null || result === void 0 ? void 0 : result.count) !== null && _a !== void 0 ? _a : 0;
                possible_1 += (_b = result === null || result === void 0 ? void 0 : result.hits) !== null && _b !== void 0 ? _b : 0;
            });
            resultMessage = "".concat(available_1, " hit").concat(available_1 === 1 ? '' : 's', " out of ").concat(fuzzyResultCount(possible_1), " possible");
        }
        else {
            resultMessage = 'Searching...';
        }
        failed = sourcesThatHaveReturned.some(function (status) { return !status.successful; });
        warnings = sourcesThatHaveReturned.some(function (status) { return status.warnings && status.warnings.length > 0; });
        errors = sourcesThatHaveReturned.some(function (status) {
            return status.errors && status.errors.length > 0;
        });
        pending = isSearching;
    }
    return (_jsx(_Fragment, { children: _jsxs("div", { className: "flex flex-row items-center flex-nowrap", children: [_jsxs("div", { className: "leading-5", children: [_jsx("div", { "data-id": "results-count-label", title: resultMessage, className: " whitespace-nowrap", children: resultMessage }), _jsx(LastRan, { currentAsOf: currentAsOf })] }), _jsx("div", { children: _jsx("div", { children: _jsxs("div", { className: "relative", children: [_jsxs(Button, __assign({ "data-id": "heartbeat-button", title: "Show the full status for the search.", "data-help": "Show the full status for the search." }, MuiButtonProps, { children: [pending && (_jsx("i", { className: "fa fa-circle-o-notch fa-spin is-critical-animation", style: { paddingRight: '2px' } })), (errors || failed) && (_jsx(ErrorIcon, { fontSize: "inherit", color: "error" })), warnings && _jsx(WarningIcon, { fontSize: "inherit", color: "warning" }), _jsx("span", { className: "fa fa-heartbeat" })] })), _jsx(Popover, __assign({}, MuiPopoverProps, { children: _jsx(Paper, { "data-id": "query-status-container", style: { padding: '20px' }, className: "intrigue-table", children: _jsx(QueryStatus, { statusBySource: statusBySource, query: selectionInterface.getCurrentQuery() }) }) }))] }) }) })] }) }));
};
export default QueryFeed;
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,