import { __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import React from 'react';
import { useListenTo } from '../selection-checkbox/useBackbone.hook';
import Button from '@mui/material/Button';
import LinearProgress from '@mui/material/LinearProgress';
import { useNavigate } from 'react-router-dom';
var modelToJSON = function (model) {
    var modelJSON = model.toJSON();
    modelJSON.file = {
        name: modelJSON.file.name,
        size: (modelJSON.file.size / 1000000).toFixed(2) + 'MB, ',
        type: modelJSON.file.type,
    };
    return modelJSON;
};
export var UploadItemViewReact = function (_a) {
    var model = _a.model;
    var navigate = useNavigate();
    var _b = __read(React.useState(modelToJSON(model)), 2), modelJson = _b[0], setModelJson = _b[1];
    var _c = __read(React.useState(false), 2), cancel = _c[0], setCancel = _c[1];
    useListenTo(model, 'change:percentage change:sending change:success change:error change:validating change:issues', function () {
        setModelJson(modelToJSON(model));
    });
    React.useEffect(function () {
        if (cancel && model) {
            model.cancel();
        }
    }, [cancel, model]);
    var isSending = modelJson.sending;
    var hasError = modelJson.error;
    var hasSuccess = modelJson.success;
    var hasIssues = modelJson.issues;
    var isValidating = modelJson.validating;
    return (_jsxs("div", { className: "flex flex-row items-center flex-nowrap w-full p-4 border-gray-600/25 border", onClick: function () {
            if (model.get('success') && !model.hasChildren()) {
                navigate("/metacards/".concat(model.get('id')));
            }
        }, children: [_jsxs("div", { className: "w-full shrink", children: [_jsxs("div", { className: "text-center", children: [_jsx("div", { children: _jsx("span", { className: "top-filename", children: modelJson.file.name }) }), _jsxs("div", { children: [_jsxs("div", { children: [_jsx("span", { className: "bottom-filesize", children: modelJson.file.size }), _jsx("span", { className: "bottom-filetype", children: modelJson.file.type })] }), _jsx("div", { children: Math.floor(modelJson.percentage) + '%' })] })] }), !hasSuccess && !hasError && isSending ? (_jsx(LinearProgress, { className: "h-2 w-full", value: modelJson.percentage, variant: "determinate" })) : null, hasSuccess ? (_jsx("div", { className: "info-success text-center", children: _jsxs("div", { className: "success-message", children: [hasIssues ? (_jsx("span", { children: "Uploaded, but quality issues were found " })) : (_jsx(_Fragment, {})), isValidating ? (_jsx("span", { className: "success-validate fa fa-refresh fa-spin is-critical-animation" })) : (_jsx(_Fragment, {})), hasIssues ? _jsx("span", { className: "message-text" }) : _jsx(_Fragment, {})] }) })) : null, hasError ? (_jsx("div", { className: "info-error text-center", children: _jsx("div", { className: "error-message", children: modelJson.message }) })) : null] }), _jsxs("div", { className: "upload-actions shrink-0", children: [!isSending ? (_jsx(Button, { onClick: function () {
                            setCancel(true);
                        }, children: "Remove" })) : null, hasSuccess ? (_jsx(Button, { onClick: function () {
                            navigate("/metacards/".concat(model.get('id')));
                        }, children: "Success" })) : (_jsx(_Fragment, {})), hasError ? (_jsx(_Fragment, { children: _jsx("div", { children: "Failures" }) })) : (_jsx(_Fragment, {}))] })] }));
};
export default UploadItemViewReact;
//# sourceMappingURL=data:application/json;base64,