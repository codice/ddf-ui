import { __assign, __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import LazyMetacardInteractions from './lazy-metacard-interactions';
import IconHelper from '../../../js/IconHelper';
import user from '../../singletons/user-instance';
import Button from '@mui/material/Button';
import Paper from '@mui/material/Paper';
import Tooltip from '@mui/material/Tooltip';
import MoreIcon from '@mui/icons-material/MoreVert';
import WarningIcon from '@mui/icons-material/Warning';
import { useBackbone } from '../../selection-checkbox/useBackbone.hook';
import { useRerenderOnBackboneSync, useSelectionOfLazyResult, } from '../../../js/model/LazyQueryResult/hooks';
import Extensions from '../../../extension-points';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
import CheckIcon from '@mui/icons-material/Check';
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import { Elevations } from '../../theme/theme';
import TouchRipple from '@mui/material/ButtonBase/TouchRipple';
import { clearSelection, hasSelection } from './result-item-row';
import { useLazyResultsSelectedResultsFromSelectionInterface } from '../../selection-interface/hooks';
import { TypedUserInstance } from '../../singletons/TypedUser';
import useCoordinateFormat from '../../tabs/metacard/useCoordinateFormat';
import EditIcon from '@mui/icons-material/Edit';
import { Link } from '../../link/link';
import { useMenuState } from '../../menu-state/menu-state';
import Popover from '@mui/material/Popover';
import Common from '../../../js/Common';
import ExtensionPoints from '../../../extension-points/extension-points';
import { StartupDataStore } from '../../../js/model/Startup/startup';
import { useMetacardDefinitions } from '../../../js/model/Startup/metacard-definitions.hooks';
import wreqr from '../../../js/wreqr';
import { LayoutContext } from '../../golden-layout/visual-settings.provider';
import { RESULTS_ATTRIBUTES_LIST, getDefaultResultsShownList, } from '../settings-helpers';
import { Grid2 } from '@mui/material';
import { LinkButton } from '../../button/link-button';
import { DownloadButton } from '../../button/download-button';
var PropertyComponent = function (props) {
    return (_jsx("div", __assign({}, props, { className: "overflow-auto", style: {
            marginTop: '10px',
            opacity: '.7',
            maxHeight: '200px',
            minHeight: '21px', // firefox will show scroll bars all the time unless we do this minHeight :S
        } })));
};
var showSource = function () {
    return (StartupDataStore.Configuration.getResultShow().find(function (additionalProperty) {
        return additionalProperty === 'source-id';
    }) !== undefined);
};
var showRelevanceScore = function (_a) {
    var lazyResult = _a.lazyResult;
    return (StartupDataStore.Configuration.getShowRelevanceScores() &&
        lazyResult.hasRelevance());
};
export var getIconClassName = function (_a) {
    var lazyResult = _a.lazyResult;
    if (lazyResult.isRevision()) {
        return 'fa fa-history';
    }
    else if (lazyResult.isResource()) {
        return IconHelper.getClassByMetacardObject(lazyResult.plain);
    }
    else if (lazyResult.isDeleted()) {
        return 'fa fa-trash';
    }
    return IconHelper.getClassByMetacardObject(lazyResult.plain);
};
/**
 * A React component that provides multi-select actions for managing a collection of selected results.
 *
 * @param {Object} props - The component properties.
 * @param {any} props.selectionInterface - An interface for managing the selection of results.
 *
 * The component displays the number of selected results and provides access
 * to actions for the selected items via a contextual menu.
 *
 * - Disables actions if no results are selected.
 * - Allows interaction with selected results through a popover menu.
 * - Uses `LazyMetacardInteractions` to display actions for the selected results.
 */
// @ts-ignore
var MultiSelectActions = function (_a) {
    var selectionInterface = _a.selectionInterface;
    var selectedResults = useLazyResultsSelectedResultsFromSelectionInterface({
        selectionInterface: selectionInterface,
    });
    var selectedResultsArray = Object.values(selectedResults);
    var metacardInteractionMenuState = useMenuState();
    return (_jsxs(_Fragment, { children: [_jsxs(Button, { component: "div", className: selectedResultsArray.length === 0 ? 'relative' : 'relative', color: "primary", disabled: selectedResultsArray.length === 0, onClick: function (e) {
                    e.stopPropagation();
                    metacardInteractionMenuState.handleClick();
                }, ref: metacardInteractionMenuState.anchorRef, style: { height: '100%' }, size: "small", children: [selectedResultsArray.length, " selected", _jsx(MoreIcon, { className: "Mui-text-text-primary" })] }), _jsx(Popover, __assign({}, metacardInteractionMenuState.MuiPopoverProps, { children: _jsx(Paper, { children: _jsx(LazyMetacardInteractions, { lazyResults: selectedResultsArray, onClose: metacardInteractionMenuState.handleClose }) }) }))] }));
};
/**
 * A CSS class string for setting the height of a component to fill its container.
 * Used to ensure consistent full-height styling across dynamic action elements.
 */
var dynamicActionClasses = 'h-full';
var HorizontalFixedActions = function (_a) {
    var lazyResult = _a.lazyResult;
    return (_jsxs(Grid2, { container: true, direction: "row", wrap: "nowrap", "data-id": "row-actions-container", children: [_jsx(DownloadButton, { lazyResult: lazyResult }), _jsx(LinkButton, { lazyResult: lazyResult }), _jsx(Grid2, { className: "h-full", children: _jsx(Button, { component: "div", "data-id": "result-item-more-vert-button", style: { height: '100%' }, size: "small", children: _jsx(MoreIcon, {}) }) })] }));
};
/**
 * A component that displays a set of dynamic action buttons for a given result (lazyResult).
 * Includes options for more actions, download, validation errors/warnings, external links, and editing search results.
 *
 * - Utilizes a popover menu for extended interactions through `LazyMetacardInteractions`.
 * - Displays visual indicators for validation errors or warnings.
 * - Provides buttons for result-specific actions such as opening external links, downloading resources,
 *   and editing search-based results.
 *
 * Props:
 * - `lazyResult` (LazyQueryResult): The result object for which actions are displayed.
 */
var HorizontalDynamicActions = function (_a) {
    var lazyResult = _a.lazyResult;
    var metacardInteractionMenuState = useMenuState();
    return (_jsxs(Grid2, { container: true, direction: "row", wrap: "nowrap", alignItems: "center", spacing: 0.03, "data-id": "row-dynamic-actions-container", children: [_jsx(Grid2, { className: dynamicActionClasses, children: !lazyResult.hasErrors() && lazyResult.hasWarnings() ? (_jsx("div", { "data-id": "validation-warnings-icon", className: "h-full", title: "Has validation warnings.", "data-help": "Indicates the given result has a validation warning.\n                     See the 'Quality' tab of the result for more details.", children: _jsx(WarningIcon, {}) })) : ('') }), _jsx(Grid2, { className: dynamicActionClasses, children: lazyResult.hasErrors() ? (_jsx("div", { "data-id": "validation-errors-icon", className: "h-full", title: "Has validation errors.", "data-help": "Indicates the given result has a validation error.\n                     See the 'Quality' tab of the result for more details.", children: _jsx(WarningIcon, {}) })) : ('') }), _jsx(Grid2, { className: dynamicActionClasses, children: lazyResult.isSearch() ? (_jsx(Button, { component: Link, "data-id": "edit-button", to: "/search/".concat(lazyResult.plain.id), style: { height: '100%' }, size: "small", children: _jsx(EditIcon, {}) })) : null }), _jsx(Extensions.resultItemTitleAddOn, { lazyResult: lazyResult }), _jsx(DownloadButton, { lazyResult: lazyResult }), _jsx(LinkButton, { lazyResult: lazyResult }), _jsxs(Grid2, { className: "h-full", children: [_jsx(Button, { component: "div", "data-id": "result-item-more-vert-button", onClick: function (e) {
                            e.stopPropagation();
                            metacardInteractionMenuState.handleClick();
                        }, style: { height: '100%' }, size: "small", ref: metacardInteractionMenuState.anchorRef, children: _jsx(MoreIcon, {}) }), _jsx(Popover, __assign({}, metacardInteractionMenuState.MuiPopoverProps, { keepMounted: true, children: _jsx(Paper, { children: _jsx(LazyMetacardInteractions, { lazyResults: [lazyResult], onClose: metacardInteractionMenuState.handleClose }) }) }))] })] }));
};
export var SelectionBackground = function (_a) {
    var lazyResult = _a.lazyResult;
    var isSelected = useSelectionOfLazyResult({ lazyResult: lazyResult });
    return (_jsx("div", { className: "absolute left-0 top-0 z-0 w-full h-full Mui-bg-secondary", style: {
            opacity: isSelected ? 0.05 : 0,
        } }));
};
var IconButton = function (_a) {
    var lazyResult = _a.lazyResult, selectionInterface = _a.selectionInterface, itemContentRef = _a.itemContentRef;
    var MetacardDefinitions = useMetacardDefinitions();
    var isSelected = useSelectionOfLazyResult({ lazyResult: lazyResult });
    var ResultItemAction = ExtensionPoints.resultItemAction({
        lazyResult: lazyResult,
        selectionInterface: selectionInterface,
        itemContentRef: itemContentRef,
        className: 'scale-0 absolute z-10 left-0 -translate-x-full ml-[3px] group-hover:scale-100 transition pt-1',
    });
    var extraClasses = ResultItemAction
        ? 'group-hover:scale-50 group-hover:-translate-x-[85%]'
        : '';
    return (_jsxs(_Fragment, { children: [ResultItemAction && (_jsx(ResultItemAction, { lazyResult: lazyResult, selectionInterface: selectionInterface, itemContentRef: itemContentRef })), _jsxs(Button, { component: "div", "data-id": "select-checkbox", onClick: function (event) {
                    event.stopPropagation(); // this button takes precedence over the enclosing button, and is always additive / subtractive (no deselect of other results)
                    if (event.shiftKey) {
                        lazyResult.shiftSelect();
                    }
                    else {
                        lazyResult.controlSelect();
                    }
                }, focusVisibleClassName: "focus-visible", className: "relative p-2 min-w-0 outline-none h-full group/checkbox shrink-0", children: [(function () {
                        if (isSelected) {
                            return (_jsxs(_Fragment, { children: [_jsxs("div", { className: "".concat(extraClasses, " absolute w-full h-full left-0 top-0 opacity-0 transform transition duration-200 ease-in-out -translate-x-full group-hover/checkbox:scale-100"), children: [_jsx(CheckBoxIcon, { className: "group-hover/checkbox:block group-focus-visible/checkbox:block hidden" }), _jsx(CheckIcon, { className: "group-hover/checkbox:hidden group-focus-visible/checkbox:hidden block" })] }), _jsxs("div", { className: "".concat(extraClasses, " transform transition duration-200 ease-in-out -translate-x-full group-focus-visible/checkbox:!translate-x-0 group-hover/checkbox:!translate-x-0 group-hover/checkbox:scale-100"), children: [_jsx(CheckBoxIcon, { className: "group-hover/checkbox:block group-focus-visible/checkbox:block hidden" }), _jsx(CheckIcon, { className: "group-hover/checkbox:hidden group-focus-visible/checkbox:hidden block" })] })] }));
                        }
                        else if (!isSelected) {
                            return (_jsx("div", { className: "transform ", children: _jsx(CheckBoxOutlineBlankIcon, { className: "group-hover/checkbox:visible group-focus-visible/checkbox:visible invisible" }) }));
                        }
                        return null;
                    })(), _jsx("span", { className: "".concat(getIconClassName({
                            lazyResult: lazyResult,
                        }), " font-awesome-span group-focus-visible/checkbox:invisible group-hover/checkbox:invisible absolute z-0 left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2"), "data-help": MetacardDefinitions.getAlias('title'), title: "".concat(MetacardDefinitions.getAlias('title'), ": ").concat(lazyResult.plain.metacard.properties.title) })] })] }));
};
// factored out for easy debugging (can add bg-gray-400 to see trail)
var diagonalHoverClasses = 'absolute z-50 right-0 bottom-100 h-4 transform scale-0 group-hover:scale-100 transition-all absolute z-50 right-0 bottom-100';
// fake event to pass ripple.stop
var fakeEvent = {
    type: '',
};
export var ResultItem = function (_a) {
    var lazyResult = _a.lazyResult, originalMeasure = _a.measure, selectionInterface = _a.selectionInterface;
    var _b = React.useContext(LayoutContext), getValue = _b.getValue, onStateChanged = _b.onStateChanged;
    var MetacardDefinitions = useMetacardDefinitions();
    var rippleRef = React.useRef(null);
    var listenTo = useBackbone().listenTo;
    var convertToPrecision = function (value) {
        return value && decimalPrecision
            ? Number(value).toFixed(decimalPrecision)
            : value;
    };
    var convertToFormat = useCoordinateFormat();
    var _c = __read(React.useState(false), 2), renderExtras = _c[0], setRenderExtras = _c[1]; // dynamic actions are a significant part of rendering time, so delay until necessary
    var _d = __read(React.useState(TypedUserInstance.getDecimalPrecision()), 2), decimalPrecision = _d[0], setDecimalPrecision = _d[1];
    var _e = __read(React.useState(getValue(RESULTS_ATTRIBUTES_LIST, getDefaultResultsShownList())), 2), shownAttributes = _e[0], setShownAttributes = _e[1];
    useRerenderOnBackboneSync({ lazyResult: lazyResult });
    React.useEffect(function () {
        listenTo(user.get('user').get('preferences'), 'change:decimalPrecision', function () {
            setDecimalPrecision(TypedUserInstance.getDecimalPrecision());
        });
        onStateChanged(function () {
            var shownList = getValue(RESULTS_ATTRIBUTES_LIST, getDefaultResultsShownList());
            setShownAttributes(shownList);
        });
    }, []);
    /**
     * Unfocused (hidden) tab sets the container height to 0
     * Run the measure function when the height is 0 could cause items inside the tab to be unreadable
     */
    var measure = function () {
        var _a, _b;
        if (((_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) &&
            ((_b = buttonRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight) > 0) {
            originalMeasure();
        }
    };
    React.useEffect(function () {
        measure();
    }, [shownAttributes, convertToFormat]);
    listenTo(wreqr.vent, 'activeContentItemChanged', function () {
        measure();
    });
    var thumbnail = lazyResult.plain.metacard.properties.thumbnail;
    var imgsrc = Common.getImageSrc(thumbnail);
    var buttonRef = React.useRef(null);
    var itemContentRef = React.useRef(null);
    var ResultItemAddOnInstance = Extensions.resultItemRowAddOn({
        lazyResult: lazyResult,
        isTableView: false,
    });
    var ResultTitleIconAddOnInstance = Extensions.resultTitleIconAddOn({
        lazyResult: lazyResult,
    });
    var shouldShowRelevance = showRelevanceScore({ lazyResult: lazyResult });
    var shouldShowSource = showSource();
    var extraHighlights = Object.keys(lazyResult.highlights).filter(function (attr) { return !shownAttributes.find(function (shownAttribute) { return shownAttribute === attr; }); });
    var getDisplayValue = function (_a) {
        var detail = _a.detail, lazyResult = _a.lazyResult;
        var value = lazyResult.plain.metacard.properties[detail];
        if (value && MetacardDefinitions.getAttributeMap()[detail]) {
            switch (MetacardDefinitions.getAttributeMap()[detail].type) {
                case 'DATE':
                    if (Array.isArray(value)) {
                        value = value.map(function (val) {
                            return TypedUserInstance.getMomentDate(val);
                        });
                    }
                    else {
                        value = TypedUserInstance.getMomentDate(value);
                    }
                    break;
                case 'GEOMETRY':
                    if (value.constructor === Array) {
                        value = value.map(function (val) { return convertToFormat(val); });
                    }
                    else {
                        value = convertToFormat(value);
                    }
                    break;
                case 'LONG':
                case 'DOUBLE':
                case 'FLOAT':
                    if (value.constructor === Array) {
                        value = value.map(function (val) { return convertToPrecision(val); });
                    }
                    else {
                        value = convertToPrecision(value);
                    }
                    break;
            }
        }
        if (Array.isArray(value)) {
            value = value.join(', ');
        }
        return value;
    };
    var detailsMap = shownAttributes
        .slice(1) // remove top one since that's special
        .map(function (detail) {
        return {
            attribute: detail,
            value: getDisplayValue({ detail: detail, lazyResult: lazyResult }),
        };
    })
        .filter(function (detail) {
        // this is special and is handled differently, see show source
        if (detail.attribute === 'source-id') {
            return false;
        }
        return detail.value;
    });
    return (_jsx("button", { "data-id": "result-item-container-button", onMouseDown: function (event) {
            /**
             * Shift key can cause selections since we set the class to allow text selection,
             * so the only scenario we want to prevent that in is when shift clicking
             */
            if (event.shiftKey) {
                clearSelection();
            }
            /**
             * Stop the ripple that starts on focus, that's only for navigating by keyboard
             */
            setTimeout(function () {
                if (rippleRef.current) {
                    rippleRef.current.stop(fakeEvent);
                }
            }, 0);
        }, onClick: function (event) {
            if (hasSelection()) {
                return;
            }
            if (event.shiftKey) {
                lazyResult.shiftSelect();
            }
            else if (event.ctrlKey || event.metaKey) {
                lazyResult.controlSelect();
            }
            else {
                lazyResult.select();
            }
            if (rippleRef.current) {
                rippleRef.current.start(event);
            }
            setTimeout(function () {
                if (rippleRef.current) {
                    rippleRef.current.stop(fakeEvent);
                }
            }, 200);
        }, onMouseLeave: function () {
            /**
             * This is to prevent weirdness with the dynamic actions, where clicking a menu option there adds focus,
             * thus making the dynamic actions stay visible when the user starts to mouse away.
             */
            try {
                setRenderExtras(false);
                if (document.activeElement &&
                    buttonRef.current &&
                    buttonRef.current.contains(document.activeElement)) {
                    ;
                    document.activeElement.blur();
                }
            }
            catch (err) {
                console.error(err);
            }
        }, onMouseEnter: function () {
            setRenderExtras(true);
        }, onFocus: function (e) {
            setRenderExtras(true);
            if (e.target === e.currentTarget && rippleRef.current) {
                rippleRef.current.pulsate();
            }
        }, onBlur: function (e) {
            if (rippleRef.current) {
                rippleRef.current.stop(e);
            }
        }, ref: buttonRef, className: "select-text outline-none px-6 pr-12 p-2 text-left break-words group w-full Mui-bg-button", children: _jsxs("div", { className: "w-full", children: [_jsx(TouchRipple, { ref: rippleRef }), _jsx(SelectionBackground, { lazyResult: lazyResult }), _jsxs("div", { className: "w-full relative z-0", ref: itemContentRef, children: [_jsxs("div", { className: "w-full flex items-start", children: [_jsx(IconButton, { lazyResult: lazyResult, selectionInterface: selectionInterface, itemContentRef: itemContentRef }), ResultTitleIconAddOnInstance && (_jsx("div", { className: "pt-2 pr-1", children: ResultTitleIconAddOnInstance })), _jsx("div", { "data-id": "result-item-".concat(shownAttributes[0], "-label"), title: "".concat(MetacardDefinitions.getAlias(shownAttributes[0])), className: "shrink-1 w-full overflow-auto self-center", style: { maxHeight: '200px', minHeight: '21px' }, children: shownAttributes[0] === 'thumbnail' && thumbnail ? (_jsx("img", { "data-id": "result-item-thumbnail", src: imgsrc, style: { maxWidth: '100%', maxHeight: '200px' }, onLoad: function () {
                                            measure();
                                        }, onError: function () {
                                            measure();
                                        } })) : lazyResult.highlights[shownAttributes[0]] ? (_jsx("span", { dangerouslySetInnerHTML: {
                                            __html: lazyResult.highlights[shownAttributes[0]][0].highlight,
                                        } })) : (getDisplayValue({ detail: shownAttributes[0], lazyResult: lazyResult })) })] }), _jsxs("div", { className: "pl-3 ".concat(ResultItemAddOnInstance !== null ||
                                detailsMap.length > 0 ||
                                extraHighlights.length > 0 ||
                                shouldShowRelevance ||
                                shouldShowSource
                                ? 'pb-2'
                                : ''), children: [_jsx("div", { children: ResultItemAddOnInstance }), _jsxs("div", { children: [detailsMap.map(function (detail) {
                                            if (detail.attribute === 'thumbnail') {
                                                return (_jsx("img", { "data-id": "result-item-thumbnail", src: imgsrc, style: {
                                                        marginTop: '10px',
                                                        maxWidth: '100%',
                                                        maxHeight: '200px',
                                                    }, onLoad: function () {
                                                        measure();
                                                    }, onError: function () {
                                                        measure();
                                                    } }, detail.attribute));
                                            }
                                            return (_jsx(PropertyComponent, { "data-help": MetacardDefinitions.getAlias(detail.attribute), title: "".concat(MetacardDefinitions.getAlias(detail.attribute), ": ").concat(detail.value), children: _jsx("span", { children: lazyResult.highlights[detail.attribute] ? (_jsx("span", { dangerouslySetInnerHTML: {
                                                            __html: lazyResult.highlights[detail.attribute][0]
                                                                .highlight,
                                                        } })) : (getDisplayValue({
                                                        detail: detail.attribute,
                                                        lazyResult: lazyResult,
                                                    })) }) }, detail.attribute));
                                        }), extraHighlights.map(function (extraHighlight) {
                                            var relevantHighlight = lazyResult.highlights[extraHighlight][0];
                                            return (_jsx(PropertyComponent, { "data-help": MetacardDefinitions.getAlias(relevantHighlight.attribute), children: _jsx(Tooltip, { title: MetacardDefinitions.getAlias(relevantHighlight.attribute), children: _jsx("span", { dangerouslySetInnerHTML: {
                                                            __html: relevantHighlight.highlight,
                                                        } }) }) }, relevantHighlight.attribute));
                                        }), shouldShowRelevance ? (_jsx(PropertyComponent, { "data-help": "Relevance: ".concat(lazyResult.plain.relevance), title: "Relevance: ".concat(lazyResult.plain.relevance), children: _jsx("span", { children: lazyResult.getRoundedRelevance() }) })) : (''), shouldShowSource ? (_jsx(PropertyComponent, { title: "".concat(MetacardDefinitions.getAlias('source-id'), ": ").concat(lazyResult.plain.metacard.properties['source-id']), "data-help": MetacardDefinitions.getAlias('source-id'), children: !lazyResult.isRemote() ? (_jsxs(React.Fragment, { children: [_jsx("span", { className: "fa fa-home" }), _jsx("span", { style: { marginLeft: '5px' }, children: "local" })] })) : (_jsxs(React.Fragment, { children: [_jsx("span", { className: "fa fa-cloud" }), _jsx("span", { style: { marginLeft: '5px' }, children: lazyResult.plain.metacard.properties['source-id'] })] })) })) : ('')] })] })] }), renderExtras ? null : (_jsxs(_Fragment, { children: [' ', _jsx("div", { className: "absolute z-40 \n                focus-within:z-50 \n                right-0 \n                top-0 \n                focus-within:opacity-100 \n                opacity-100 \n                cursor-auto transform \n                focus-within:scale-100 \n                transition-all \n                ease-in-out \n                duration-200", children: _jsx(Paper, { onClick: function (e) {
                                    e.stopPropagation();
                                }, elevation: Elevations.overlays, className: "p-2", children: _jsx(HorizontalFixedActions, { lazyResult: lazyResult }) }) })] })), renderExtras ? (_jsxs(_Fragment, { children: [' ', _jsx("div", { className: "".concat(diagonalHoverClasses, " w-full transform translate-y-1") }), _jsx("div", { className: "".concat(diagonalHoverClasses, " w-9/12 transform translate-y-2 ") }), _jsx("div", { className: "".concat(diagonalHoverClasses, " w-6/12 transform translate-y-3") }), _jsx("div", { className: "".concat(diagonalHoverClasses, " w-5/12 transform translate-y-4") }), _jsx("div", { className: "".concat(diagonalHoverClasses, " w-4/12 transform translate-y-5") }), _jsx("div", { className: "".concat(diagonalHoverClasses, " w-3/12 transform translate-y-6") }), _jsx("div", { className: "".concat(diagonalHoverClasses, " w-2/12 transform translate-y-8") }), _jsx("div", { className: "absolute z-40 \n              group-hover:z-50 \n              focus-within:z-50 \n              right-0 \n              top-0 \n              focus-within:opacity-100 \n              group-hover:opacity-100 \n              hover:opacity-100 \n              opacity-0 \n              cursor-auto transform \n              focus-within:scale-100 \n              transition-all \n              hover:scale-100 \n              ease-in-out \n              duration-200 \n              hover:translate-x-0 \n              hover:scale-x-100", children: _jsx(Paper, { onClick: function (e) {
                                    e.stopPropagation();
                                }, elevation: Elevations.overlays, className: "p-2", children: _jsx(HorizontalDynamicActions, { lazyResult: lazyResult }) }) })] })) : null] }) }));
};
export default ResultItem;
//# sourceMappingURL=data:application/json;base64,