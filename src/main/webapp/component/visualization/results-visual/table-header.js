import { __assign, __read, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import _ from 'underscore';
import user from '../../singletons/user-instance';
import Button from '@mui/material/Button';
import { useSelectionOfLazyResults } from '../../../js/model/LazyQueryResult/hooks';
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
import IndeterminateCheckBoxIcon from '@mui/icons-material/IndeterminateCheckBox';
import { useMetacardDefinitions } from '../../../js/model/Startup/metacard-definitions.hooks';
import { LayoutContext } from '../../golden-layout/visual-settings.provider';
import { RESULTS_ATTRIBUTES_TABLE, getDefaultResultsShownTable, } from '../settings-helpers';
export var CellComponent = React.forwardRef(function (props, ref) {
    var style = props.style, className = props.className, otherProps = __rest(props, ["style", "className"]);
    return (_jsx("div", __assign({}, otherProps, { className: "inline-block ".concat(className, " p-2 overflow-auto whitespace-normal break-all "), style: __assign({ width: '200px', maxHeight: '200px' }, style), ref: ref })));
});
var updateSort = function (attribute) {
    var prefs = user.get('user').get('preferences');
    var prefResultSort = prefs.get('resultSort');
    var currSort = prefResultSort && prefResultSort.length
        ? prefResultSort.find(function (sort) { return sort.attribute === attribute; })
        : undefined;
    var sort = [
        {
            attribute: attribute,
            direction: 'ascending',
        },
    ];
    if (currSort) {
        sort[0].direction =
            currSort.direction === 'ascending' ? 'descending' : 'ascending';
    }
    prefs.set('resultSort', sort);
    prefs.savePreferences();
};
var getSortDirectionClass = function (attribute) {
    var sorts = user.get('user').get('preferences').get('resultSort');
    var matchedSort = sorts && sorts.find(function (sort) { return sort.attribute === attribute; });
    if (matchedSort && matchedSort.direction) {
        if (matchedSort.direction === 'ascending') {
            return 'fa fa-sort-asc';
        }
        else if (matchedSort.direction === 'descending') {
            return 'fa fa-sort-desc';
        }
        else {
            return '';
        }
    }
    else {
        return '';
    }
};
export var HeaderCheckbox = function (_a) {
    var _b = _a.showText, showText = _b === void 0 ? false : _b, lazyResults = _a.lazyResults, buttonProps = _a.buttonProps;
    var selection = useSelectionOfLazyResults({
        lazyResults: Object.values(lazyResults.results),
    });
    return (_jsx(Button, __assign({ "data-id": "select-all-checkbox", color: "primary", onClick: function (event) {
            event.stopPropagation();
            if (selection === 'selected') {
                Object.values(lazyResults.results).forEach(function (lazyResult) {
                    lazyResult.setSelected(false);
                });
            }
            else {
                Object.values(lazyResults.results).forEach(function (lazyResult) {
                    lazyResult.setSelected(true);
                });
            }
        } }, buttonProps, { children: (function () {
            switch (selection) {
                case 'partially':
                    return (_jsxs(_Fragment, { children: [_jsx(IndeterminateCheckBoxIcon, { className: "Mui-text-text-primary" }), showText ? _jsx("div", { className: "pl-2", children: "Select All" }) : null] }));
                case 'selected':
                    return (_jsxs(_Fragment, { children: [_jsx(CheckBoxIcon, { className: "Mui-text-text-primary" }), showText ? _jsx("div", { className: "pl-2", children: "Deselect All" }) : null] }));
                case 'unselected':
                    return (_jsxs(_Fragment, { children: [_jsx("div", { className: "Mui-text-text-primary", children: _jsx(CheckBoxOutlineBlankIcon, {}) }), showText ? _jsx("div", { className: "pl-2", children: "Select All" }) : null] }));
            }
        })() })));
};
export var Header = function (_a) {
    var lazyResults = _a.lazyResults, setHeaderColWidth = _a.setHeaderColWidth, headerColWidth = _a.headerColWidth, actionWidth = _a.actionWidth, addOnWidth = _a.addOnWidth;
    var _b = React.useContext(LayoutContext), getValue = _b.getValue, onStateChanged = _b.onStateChanged;
    var MetacardDefinitions = useMetacardDefinitions();
    var handleSortClick = _.debounce(updateSort, 500, true);
    var _c = __read(React.useState(getValue(RESULTS_ATTRIBUTES_TABLE, getDefaultResultsShownTable())), 2), shownAttributes = _c[0], setShownAttributes = _c[1];
    var _d = __read(React.useState(null), 2), activeIndex = _d[0], setActiveIndex = _d[1];
    var columnRefs = React.useRef(shownAttributes.map(function () { return React.createRef(); }));
    var prefs = user.get('user').get('preferences');
    var mouseDown = function (index) {
        setActiveIndex(index);
    };
    var mouseMove = React.useCallback(function (e) {
        var columnsWidth = new Map(__spreadArray([], __read(headerColWidth), false));
        if (headerColWidth.size === 0) {
            shownAttributes.map(function (col) {
                columnsWidth.set(col, '200px');
            });
        }
        shownAttributes.map(function (col, i) {
            if (i === activeIndex) {
                var currRef = columnRefs.current[i].current;
                var offset = currRef === null || currRef === void 0 ? void 0 : currRef.getBoundingClientRect().x;
                if (offset) {
                    var width = e.clientX - offset;
                    if (currRef) {
                        currRef.style.width = "".concat(width, "px");
                        columnsWidth.set(col, "".concat(width, "px"));
                    }
                }
            }
        });
        setHeaderColWidth(columnsWidth);
        prefs.set('columnWidths', columnsWidth);
        prefs.savePreferences();
    }, [activeIndex, shownAttributes]);
    var resetColumnWidth = function (col) {
        var columnsWidth = new Map(__spreadArray([], __read(headerColWidth), false));
        columnsWidth.set(col, '200px');
        setHeaderColWidth(columnsWidth);
        prefs.set('columnWidths', columnsWidth);
        prefs.savePreferences();
    };
    var removeListeners = React.useCallback(function () {
        window.removeEventListener('mousemove', mouseMove);
        window.removeEventListener('mouseup', removeListeners);
    }, [mouseMove]);
    var mouseUp = React.useCallback(function () {
        setActiveIndex(null);
        removeListeners();
    }, [setActiveIndex, removeListeners]);
    React.useEffect(function () {
        if (activeIndex !== null) {
            window.addEventListener('mousemove', mouseMove);
            window.addEventListener('mouseup', mouseUp);
        }
        return function () {
            removeListeners();
        };
    }, [activeIndex, mouseMove, mouseUp, removeListeners]);
    React.useEffect(function () {
        onStateChanged(function () {
            var shownList = getValue(RESULTS_ATTRIBUTES_TABLE, getDefaultResultsShownTable());
            setShownAttributes(shownList);
            columnRefs.current = shownList.map(function () {
                return React.createRef();
            });
        });
    }, []);
    return (_jsx(React.Fragment, { children: _jsxs("div", { "data-id": "table-container", className: "bg-inherit whitespace-nowrap flex items-strech flex-nowrap", style: {
                width: shownAttributes.length * 200 + 'px',
                display: 'grid',
                gridTemplateColumns: "repeat(".concat(shownAttributes.length + 4, ", 1fr)"),
            }, children: [_jsx("div", { className: "bg-inherit Mui-border-divider border border-t-0 border-l-0 border-b-0", children: _jsx("div", { style: {
                            width: actionWidth,
                        } }) }, "resultItemAction"), _jsx("div", { className: "sticky left-0 w-auto z-10 bg-inherit Mui-border-divider border border-t-0 border-l-0 border-b-0", children: _jsx(CellComponent, { className: "bg-inherit", style: { width: 'auto', paddingLeft: '0px', paddingRight: '0px' }, children: _jsx(HeaderCheckbox, { lazyResults: lazyResults }) }) }), _jsx("div", { className: "bg-inherit Mui-border-divider border border-t-0 border-l-0 border-b-0", children: _jsx("div", { style: {
                            width: addOnWidth,
                        } }) }, "resultItemAddOn"), shownAttributes.map(function (attr, index) {
                    var label = MetacardDefinitions.getAlias(attr);
                    var sortable = true;
                    return (_jsx("div", { style: {
                            display: 'flex',
                            width: "".concat(headerColWidth.get(attr)),
                            minWidth: '200px',
                        }, ref: columnRefs.current[index], children: _jsxs(CellComponent, { className: "".concat(sortable ? 'is-sortable' : '', " Mui-border-divider border border-t-0 border-l-0 border-b-0"), "data-propertyid": "".concat(attr), "data-propertytext": "".concat(label ? "".concat(label) : "".concat(attr)), style: {
                                width: '100%',
                                minWidth: '200px',
                                display: 'flex',
                                padding: 0,
                            }, children: [_jsx(Button, { disabled: !sortable, className: "w-full outline-none is-bold h-full", onClick: function () { return handleSortClick(attr); }, style: { width: '100%', marginRight: '5px' }, children: _jsxs("div", { className: "w-full text-left", children: [_jsx("span", { className: "column-text is-bold", title: "".concat(label ? "".concat(label) : "".concat(attr)), children: "".concat(label ? "".concat(label) : "".concat(attr)) }), _jsx("span", { className: getSortDirectionClass(attr), style: { paddingLeft: '3px' } })] }) }), _jsx("div", { style: { width: '10px', cursor: 'col-resize' }, className: "hover:border-solid", onDoubleClick: function () {
                                        resetColumnWidth(attr);
                                        var currRef = columnRefs.current[index].current;
                                        if (currRef) {
                                            currRef.style.width = '200px';
                                        }
                                    }, onMouseDown: function () {
                                        mouseDown(index);
                                    } })] }) }, attr));
                }), _jsx(CellComponent, { style: { width: '8px' } }), ' '] }) }));
};
export default Header;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaGVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudC92aXN1YWxpemF0aW9uL3Jlc3VsdHMtdmlzdWFsL3RhYmxlLWhlYWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFHOUIsT0FBTyxDQUFDLE1BQU0sWUFBWSxDQUFBO0FBQzFCLE9BQU8sSUFBSSxNQUFNLGdDQUFnQyxDQUFBO0FBQ2pELE9BQU8sTUFBdUIsTUFBTSxzQkFBc0IsQ0FBQTtBQUMxRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQTtBQUNuRixPQUFPLFlBQVksTUFBTSw4QkFBOEIsQ0FBQTtBQUN2RCxPQUFPLHdCQUF3QixNQUFNLDBDQUEwQyxDQUFBO0FBQy9FLE9BQU8seUJBQXlCLE1BQU0sMkNBQTJDLENBQUE7QUFDakYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0RBQXNELENBQUE7QUFDN0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhDQUE4QyxDQUFBO0FBQzVFLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIsMkJBQTJCLEdBQzVCLE1BQU0scUJBQXFCLENBQUE7QUFxQjVCLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUMzQyxVQUNFLEtBR0MsRUFDRCxHQUFtQjtJQUVYLElBQUEsS0FBSyxHQUErQixLQUFLLE1BQXBDLEVBQUUsU0FBUyxHQUFvQixLQUFLLFVBQXpCLEVBQUssVUFBVSxVQUFLLEtBQUssRUFBM0Msc0JBQW1DLENBQUYsQ0FBVTtJQUNqRCxPQUFPLENBQ0wseUJBQ00sVUFBVSxJQUNkLFNBQVMsRUFBRSx1QkFBZ0IsU0FBUyxvREFBaUQsRUFDckYsS0FBSyxhQUNILEtBQUssRUFBRSxP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LEVBQ1AsZUFDRSxTQUFTLEVBQUUscUJBQXFCLENBQUMsSUFBSSxDQUFDLEVBQ3RDLEtBQUssRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FDN0IsSUFDRSxHQUNDLEVBQ1QsY0FDRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsRUFDOUMsU0FBUyxFQUFDLG9CQUFvQixFQUM5QixhQUFhLEVBQUU7d0NBQ2IsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7d0NBQ3RCLElBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFBO3dDQUNqRCxJQUFJLE9BQU8sRUFBRSxDQUFDOzRDQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQTt3Q0FDL0IsQ0FBQztvQ0FDSCxDQUFDLEVBQ0QsV0FBVyxFQUFFO3dDQUNYLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQ0FDbEIsQ0FBQyxHQUNJLElBQ08sSUF0RFgsSUFBSSxDQXVETCxDQUNQLENBQUE7Z0JBQ0gsQ0FBQyxDQUFDLEVBQ0YsS0FBQyxhQUFhLElBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFrQixFQUFDLEdBQUcsSUFFeEQsR0FDUyxDQUNsQixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsZUFBZSxNQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBMYXp5UXVlcnlSZXN1bHRzIH0gZnJvbSAnLi4vLi4vLi4vanMvbW9kZWwvTGF6eVF1ZXJ5UmVzdWx0L0xhenlRdWVyeVJlc3VsdHMnXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJ1xuaW1wb3J0IHVzZXIgZnJvbSAnLi4vLi4vc2luZ2xldG9ucy91c2VyLWluc3RhbmNlJ1xuaW1wb3J0IEJ1dHRvbiwgeyBCdXR0b25Qcm9wcyB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJ1xuaW1wb3J0IHsgdXNlU2VsZWN0aW9uT2ZMYXp5UmVzdWx0cyB9IGZyb20gJy4uLy4uLy4uL2pzL21vZGVsL0xhenlRdWVyeVJlc3VsdC9ob29rcydcbmltcG9ydCBDaGVja0JveEljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9DaGVja0JveCdcbmltcG9ydCBDaGVja0JveE91dGxpbmVCbGFua0ljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9DaGVja0JveE91dGxpbmVCbGFuaydcbmltcG9ydCBJbmRldGVybWluYXRlQ2hlY2tCb3hJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvSW5kZXRlcm1pbmF0ZUNoZWNrQm94J1xuaW1wb3J0IHsgdXNlTWV0YWNhcmREZWZpbml0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2pzL21vZGVsL1N0YXJ0dXAvbWV0YWNhcmQtZGVmaW5pdGlvbnMuaG9va3MnXG5pbXBvcnQgeyBMYXlvdXRDb250ZXh0IH0gZnJvbSAnLi4vLi4vZ29sZGVuLWxheW91dC92aXN1YWwtc2V0dGluZ3MucHJvdmlkZXInXG5pbXBvcnQge1xuICBSRVNVTFRTX0FUVFJJQlVURVNfVEFCTEUsXG4gIGdldERlZmF1bHRSZXN1bHRzU2hvd25UYWJsZSxcbn0gZnJvbSAnLi4vc2V0dGluZ3MtaGVscGVycydcbmV4cG9ydCB0eXBlIEhlYWRlciA9IHtcbiAgaGlkZGVuOiBib29sZWFuXG4gIGlkOiBzdHJpbmdcbiAgbGFiZWw/OiBzdHJpbmdcbiAgc29ydGFibGU6IGJvb2xlYW5cbn1cblxudHlwZSBIZWFkZXJQcm9wcyA9IHtcbiAgbGF6eVJlc3VsdHM6IExhenlRdWVyeVJlc3VsdHNcbiAgc2V0SGVhZGVyQ29sV2lkdGg6IEZ1bmN0aW9uXG4gIGhlYWRlckNvbFdpZHRoOiBNYXA8c3RyaW5nLCBzdHJpbmc+XG4gIGFjdGlvbldpZHRoOiBudW1iZXJcbiAgYWRkT25XaWR0aDogbnVtYmVyXG59XG5cbnR5cGUgU29ydCA9IHtcbiAgYXR0cmlidXRlOiBzdHJpbmdcbiAgZGlyZWN0aW9uOiAnYXNjZW5kaW5nJyB8ICdkZXNjZW5kaW5nJ1xufVxuXG5leHBvcnQgY29uc3QgQ2VsbENvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoXG4gIChcbiAgICBwcm9wczogUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8XG4gICAgICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4sXG4gICAgICBIVE1MRGl2RWxlbWVudFxuICAgID4sXG4gICAgcmVmOiBSZWFjdC5SZWY8YW55PlxuICApID0+IHtcbiAgICBjb25zdCB7IHN0eWxlLCBjbGFzc05hbWUsIC4uLm90aGVyUHJvcHMgfSA9IHByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgey4uLm90aGVyUHJvcHN9XG4gICAgICAgIGNsYXNzTmFtZT17YGlubGluZS1ibG9jayAke2NsYXNzTmFtZX0gcC0yIG92ZXJmbG93LWF1dG8gd2hpdGVzcGFjZS1ub3JtYWwgYnJlYWstYWxsIGB9XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgd2lkdGg6ICcyMDBweCcsXG4gICAgICAgICAgbWF4SGVpZ2h0OiAnMjAwcHgnLFxuICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB9fVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgIC8+XG4gICAgKVxuICB9XG4pXG5cbmNvbnN0IHVwZGF0ZVNvcnQgPSAoYXR0cmlidXRlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcHJlZnMgPSB1c2VyLmdldCgndXNlcicpLmdldCgncHJlZmVyZW5jZXMnKVxuICBjb25zdCBwcmVmUmVzdWx0U29ydCA9IHByZWZzLmdldCgncmVzdWx0U29ydCcpIGFzIFNvcnRbXVxuICBjb25zdCBjdXJyU29ydCA9XG4gICAgcHJlZlJlc3VsdFNvcnQgJiYgcHJlZlJlc3VsdFNvcnQubGVuZ3RoXG4gICAgICA/IHByZWZSZXN1bHRTb3J0LmZpbmQoKHNvcnQpID0+IHNvcnQuYXR0cmlidXRlID09PSBhdHRyaWJ1dGUpXG4gICAgICA6IHVuZGVmaW5lZFxuXG4gIGNvbnN0IHNvcnQ6IFNvcnRbXSA9IFtcbiAgICB7XG4gICAgICBhdHRyaWJ1dGUsXG4gICAgICBkaXJlY3Rpb246ICdhc2NlbmRpbmcnLFxuICAgIH0sXG4gIF1cblxuICBpZiAoY3VyclNvcnQpIHtcbiAgICBzb3J0WzBdLmRpcmVjdGlvbiA9XG4gICAgICBjdXJyU29ydC5kaXJlY3Rpb24gPT09ICdhc2NlbmRpbmcnID8gJ2Rlc2NlbmRpbmcnIDogJ2FzY2VuZGluZydcbiAgfVxuXG4gIHByZWZzLnNldCgncmVzdWx0U29ydCcsIHNvcnQpXG4gIHByZWZzLnNhdmVQcmVmZXJlbmNlcygpXG59XG5cbmNvbnN0IGdldFNvcnREaXJlY3Rpb25DbGFzcyA9IChhdHRyaWJ1dGU6IHN0cmluZykgPT4ge1xuICBjb25zdCBzb3J0cyA9IHVzZXIuZ2V0KCd1c2VyJykuZ2V0KCdwcmVmZXJlbmNlcycpLmdldCgncmVzdWx0U29ydCcpIGFzIFNvcnRbXVxuICBjb25zdCBtYXRjaGVkU29ydCA9XG4gICAgc29ydHMgJiYgc29ydHMuZmluZCgoc29ydCkgPT4gc29ydC5hdHRyaWJ1dGUgPT09IGF0dHJpYnV0ZSlcbiAgaWYgKG1hdGNoZWRTb3J0ICYmIG1hdGNoZWRTb3J0LmRpcmVjdGlvbikge1xuICAgIGlmIChtYXRjaGVkU29ydC5kaXJlY3Rpb24gPT09ICdhc2NlbmRpbmcnKSB7XG4gICAgICByZXR1cm4gJ2ZhIGZhLXNvcnQtYXNjJ1xuICAgIH0gZWxzZSBpZiAobWF0Y2hlZFNvcnQuZGlyZWN0aW9uID09PSAnZGVzY2VuZGluZycpIHtcbiAgICAgIHJldHVybiAnZmEgZmEtc29ydC1kZXNjJ1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEhlYWRlckNoZWNrYm94ID0gKHtcbiAgc2hvd1RleHQgPSBmYWxzZSxcbiAgbGF6eVJlc3VsdHMsXG4gIGJ1dHRvblByb3BzLFxufToge1xuICBzaG93VGV4dD86IGJvb2xlYW5cbiAgbGF6eVJlc3VsdHM6IEhlYWRlclByb3BzWydsYXp5UmVzdWx0cyddXG4gIGJ1dHRvblByb3BzPzogQnV0dG9uUHJvcHNcbn0pID0+IHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gdXNlU2VsZWN0aW9uT2ZMYXp5UmVzdWx0cyh7XG4gICAgbGF6eVJlc3VsdHM6IE9iamVjdC52YWx1ZXMobGF6eVJlc3VsdHMucmVzdWx0cyksXG4gIH0pXG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgZGF0YS1pZD1cInNlbGVjdC1hbGwtY2hlY2tib3hcIlxuICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT4ge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICBpZiAoc2VsZWN0aW9uID09PSAnc2VsZWN0ZWQnKSB7XG4gICAgICAgICAgT2JqZWN0LnZhbHVlcyhsYXp5UmVzdWx0cy5yZXN1bHRzKS5mb3JFYWNoKChsYXp5UmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBsYXp5UmVzdWx0LnNldFNlbGVjdGVkKGZhbHNlKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgT2JqZWN0LnZhbHVlcyhsYXp5UmVzdWx0cy5yZXN1bHRzKS5mb3JFYWNoKChsYXp5UmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBsYXp5UmVzdWx0LnNldFNlbGVjdGVkKHRydWUpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgIHsuLi5idXR0b25Qcm9wc31cbiAgICA+XG4gICAgICB7KCgpID0+IHtcbiAgICAgICAgc3dpdGNoIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICBjYXNlICdwYXJ0aWFsbHknOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrQm94SWNvbiBjbGFzc05hbWU9XCJNdWktdGV4dC10ZXh0LXByaW1hcnlcIiAvPlxuICAgICAgICAgICAgICAgIHtzaG93VGV4dCA/IDxkaXYgY2xhc3NOYW1lPVwicGwtMlwiPlNlbGVjdCBBbGw8L2Rpdj4gOiBudWxsfVxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICBjYXNlICdzZWxlY3RlZCc6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxDaGVja0JveEljb24gY2xhc3NOYW1lPVwiTXVpLXRleHQtdGV4dC1wcmltYXJ5XCIgLz5cbiAgICAgICAgICAgICAgICB7c2hvd1RleHQgPyA8ZGl2IGNsYXNzTmFtZT1cInBsLTJcIj5EZXNlbGVjdCBBbGw8L2Rpdj4gOiBudWxsfVxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICBjYXNlICd1bnNlbGVjdGVkJzpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJNdWktdGV4dC10ZXh0LXByaW1hcnlcIj5cbiAgICAgICAgICAgICAgICAgIDxDaGVja0JveE91dGxpbmVCbGFua0ljb24gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7c2hvd1RleHQgPyA8ZGl2IGNsYXNzTmFtZT1cInBsLTJcIj5TZWxlY3QgQWxsPC9kaXY+IDogbnVsbH1cbiAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0pKCl9XG4gICAgPC9CdXR0b24+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IEhlYWRlciA9ICh7XG4gIGxhenlSZXN1bHRzLFxuICBzZXRIZWFkZXJDb2xXaWR0aCxcbiAgaGVhZGVyQ29sV2lkdGgsXG4gIGFjdGlvbldpZHRoLFxuICBhZGRPbldpZHRoLFxufTogSGVhZGVyUHJvcHMpID0+IHtcbiAgY29uc3QgeyBnZXRWYWx1ZSwgb25TdGF0ZUNoYW5nZWQgfSA9IFJlYWN0LnVzZUNvbnRleHQoTGF5b3V0Q29udGV4dClcbiAgY29uc3QgTWV0YWNhcmREZWZpbml0aW9ucyA9IHVzZU1ldGFjYXJkRGVmaW5pdGlvbnMoKVxuICBjb25zdCBoYW5kbGVTb3J0Q2xpY2sgPSBfLmRlYm91bmNlKHVwZGF0ZVNvcnQsIDUwMCwgdHJ1ZSlcbiAgY29uc3QgW3Nob3duQXR0cmlidXRlcywgc2V0U2hvd25BdHRyaWJ1dGVzXSA9IFJlYWN0LnVzZVN0YXRlKFxuICAgIGdldFZhbHVlKFxuICAgICAgUkVTVUxUU19BVFRSSUJVVEVTX1RBQkxFLFxuICAgICAgZ2V0RGVmYXVsdFJlc3VsdHNTaG93blRhYmxlKClcbiAgICApIGFzIHN0cmluZ1tdXG4gIClcblxuICBjb25zdCBbYWN0aXZlSW5kZXgsIHNldEFjdGl2ZUluZGV4XSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXG5cbiAgY29uc3QgY29sdW1uUmVmcyA9IFJlYWN0LnVzZVJlZihcbiAgICBzaG93bkF0dHJpYnV0ZXMubWFwKCgpID0+IFJlYWN0LmNyZWF0ZVJlZjxIVE1MRGl2RWxlbWVudD4oKSlcbiAgKVxuICBjb25zdCBwcmVmcyA9IHVzZXIuZ2V0KCd1c2VyJykuZ2V0KCdwcmVmZXJlbmNlcycpXG5cbiAgY29uc3QgbW91c2VEb3duID0gKGluZGV4OiBhbnkpID0+IHtcbiAgICBzZXRBY3RpdmVJbmRleChpbmRleClcbiAgfVxuXG4gIGNvbnN0IG1vdXNlTW92ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChlOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGNvbHVtbnNXaWR0aCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KFsuLi5oZWFkZXJDb2xXaWR0aF0pXG5cbiAgICAgIGlmIChoZWFkZXJDb2xXaWR0aC5zaXplID09PSAwKSB7XG4gICAgICAgIHNob3duQXR0cmlidXRlcy5tYXAoKGNvbCkgPT4ge1xuICAgICAgICAgIGNvbHVtbnNXaWR0aC5zZXQoY29sLCAnMjAwcHgnKVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBzaG93bkF0dHJpYnV0ZXMubWFwKChjb2wsIGkpID0+IHtcbiAgICAgICAgaWYgKGkgPT09IGFjdGl2ZUluZGV4KSB7XG4gICAgICAgICAgY29uc3QgY3VyclJlZiA9IGNvbHVtblJlZnMuY3VycmVudFtpXS5jdXJyZW50XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY3VyclJlZj8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueFxuICAgICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gZS5jbGllbnRYIC0gb2Zmc2V0XG4gICAgICAgICAgICBpZiAoY3VyclJlZikge1xuICAgICAgICAgICAgICBjdXJyUmVmLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgXG4gICAgICAgICAgICAgIGNvbHVtbnNXaWR0aC5zZXQoY29sLCBgJHt3aWR0aH1weGApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgc2V0SGVhZGVyQ29sV2lkdGgoY29sdW1uc1dpZHRoKVxuICAgICAgcHJlZnMuc2V0KCdjb2x1bW5XaWR0aHMnLCBjb2x1bW5zV2lkdGgpXG4gICAgICBwcmVmcy5zYXZlUHJlZmVyZW5jZXMoKVxuICAgIH0sXG4gICAgW2FjdGl2ZUluZGV4LCBzaG93bkF0dHJpYnV0ZXNdXG4gIClcbiAgY29uc3QgcmVzZXRDb2x1bW5XaWR0aCA9IChjb2w6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGNvbHVtbnNXaWR0aCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KFsuLi5oZWFkZXJDb2xXaWR0aF0pXG4gICAgY29sdW1uc1dpZHRoLnNldChjb2wsICcyMDBweCcpXG4gICAgc2V0SGVhZGVyQ29sV2lkdGgoY29sdW1uc1dpZHRoKVxuICAgIHByZWZzLnNldCgnY29sdW1uV2lkdGhzJywgY29sdW1uc1dpZHRoKVxuICAgIHByZWZzLnNhdmVQcmVmZXJlbmNlcygpXG4gIH1cblxuICBjb25zdCByZW1vdmVMaXN0ZW5lcnMgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZSlcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHJlbW92ZUxpc3RlbmVycylcbiAgfSwgW21vdXNlTW92ZV0pXG5cbiAgY29uc3QgbW91c2VVcCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRBY3RpdmVJbmRleChudWxsKVxuICAgIHJlbW92ZUxpc3RlbmVycygpXG4gIH0sIFtzZXRBY3RpdmVJbmRleCwgcmVtb3ZlTGlzdGVuZXJzXSlcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhY3RpdmVJbmRleCAhPT0gbnVsbCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZSlcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcClcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcmVtb3ZlTGlzdGVuZXJzKClcbiAgICB9XG4gIH0sIFthY3RpdmVJbmRleCwgbW91c2VNb3ZlLCBtb3VzZVVwLCByZW1vdmVMaXN0ZW5lcnNdKVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgb25TdGF0ZUNoYW5nZWQoKCkgPT4ge1xuICAgICAgY29uc3Qgc2hvd25MaXN0ID0gZ2V0VmFsdWUoXG4gICAgICAgIFJFU1VMVFNfQVRUUklCVVRFU19UQUJMRSxcbiAgICAgICAgZ2V0RGVmYXVsdFJlc3VsdHNTaG93blRhYmxlKClcbiAgICAgIClcbiAgICAgIHNldFNob3duQXR0cmlidXRlcyhzaG93bkxpc3QpXG4gICAgICBjb2x1bW5SZWZzLmN1cnJlbnQgPSBzaG93bkxpc3QubWFwKCgpID0+XG4gICAgICAgIFJlYWN0LmNyZWF0ZVJlZjxIVE1MRGl2RWxlbWVudD4oKVxuICAgICAgKVxuICAgIH0pXG4gIH0sIFtdKVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPGRpdlxuICAgICAgICBkYXRhLWlkPVwidGFibGUtY29udGFpbmVyXCJcbiAgICAgICAgY2xhc3NOYW1lPVwiYmctaW5oZXJpdCB3aGl0ZXNwYWNlLW5vd3JhcCBmbGV4IGl0ZW1zLXN0cmVjaCBmbGV4LW5vd3JhcFwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgd2lkdGg6IHNob3duQXR0cmlidXRlcy5sZW5ndGggKiAyMDAgKyAncHgnLFxuICAgICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBgcmVwZWF0KCR7c2hvd25BdHRyaWJ1dGVzLmxlbmd0aCArIDR9LCAxZnIpYCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGtleT1cInJlc3VsdEl0ZW1BY3Rpb25cIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImJnLWluaGVyaXQgTXVpLWJvcmRlci1kaXZpZGVyIGJvcmRlciBib3JkZXItdC0wIGJvcmRlci1sLTAgYm9yZGVyLWItMFwiXG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICB3aWR0aDogYWN0aW9uV2lkdGgsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0aWNreSBsZWZ0LTAgdy1hdXRvIHotMTAgYmctaW5oZXJpdCBNdWktYm9yZGVyLWRpdmlkZXIgYm9yZGVyIGJvcmRlci10LTAgYm9yZGVyLWwtMCBib3JkZXItYi0wXCI+XG4gICAgICAgICAgPENlbGxDb21wb25lbnRcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJnLWluaGVyaXRcIlxuICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICdhdXRvJywgcGFkZGluZ0xlZnQ6ICcwcHgnLCBwYWRkaW5nUmlnaHQ6ICcwcHgnIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEhlYWRlckNoZWNrYm94IGxhenlSZXN1bHRzPXtsYXp5UmVzdWx0c30gLz5cbiAgICAgICAgICA8L0NlbGxDb21wb25lbnQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAga2V5PVwicmVzdWx0SXRlbUFkZE9uXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJiZy1pbmhlcml0IE11aS1ib3JkZXItZGl2aWRlciBib3JkZXIgYm9yZGVyLXQtMCBib3JkZXItbC0wIGJvcmRlci1iLTBcIlxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgd2lkdGg6IGFkZE9uV2lkdGgsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7c2hvd25BdHRyaWJ1dGVzLm1hcCgoYXR0ciwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBsYWJlbCA9IE1ldGFjYXJkRGVmaW5pdGlvbnMuZ2V0QWxpYXMoYXR0cilcbiAgICAgICAgICBjb25zdCBzb3J0YWJsZSA9IHRydWVcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2F0dHJ9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBgJHtoZWFkZXJDb2xXaWR0aC5nZXQoYXR0cil9YCxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogJzIwMHB4JyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgcmVmPXtjb2x1bW5SZWZzLmN1cnJlbnRbaW5kZXhdfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Q2VsbENvbXBvbmVudFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7XG4gICAgICAgICAgICAgICAgICBzb3J0YWJsZSA/ICdpcy1zb3J0YWJsZScgOiAnJ1xuICAgICAgICAgICAgICAgIH0gTXVpLWJvcmRlci1kaXZpZGVyIGJvcmRlciBib3JkZXItdC0wIGJvcmRlci1sLTAgYm9yZGVyLWItMGB9XG4gICAgICAgICAgICAgICAgZGF0YS1wcm9wZXJ0eWlkPXtgJHthdHRyfWB9XG4gICAgICAgICAgICAgICAgZGF0YS1wcm9wZXJ0eXRleHQ9e2Ake2xhYmVsID8gYCR7bGFiZWx9YCA6IGAke2F0dHJ9YH1gfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgbWluV2lkdGg6ICcyMDBweCcsXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IXNvcnRhYmxlfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIG91dGxpbmUtbm9uZSBpcy1ib2xkIGgtZnVsbFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVTb3J0Q2xpY2soYXR0cil9XG4gICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBtYXJnaW5SaWdodDogJzVweCcgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCB0ZXh0LWxlZnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb2x1bW4tdGV4dCBpcy1ib2xkXCJcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17YCR7bGFiZWwgPyBgJHtsYWJlbH1gIDogYCR7YXR0cn1gfWB9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7YCR7bGFiZWwgPyBgJHtsYWJlbH1gIDogYCR7YXR0cn1gfWB9XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2dldFNvcnREaXJlY3Rpb25DbGFzcyhhdHRyKX1cbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBwYWRkaW5nTGVmdDogJzNweCcgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTBweCcsIGN1cnNvcjogJ2NvbC1yZXNpemUnIH19XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJob3Zlcjpib3JkZXItc29saWRcIlxuICAgICAgICAgICAgICAgICAgb25Eb3VibGVDbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNldENvbHVtbldpZHRoKGF0dHIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJSZWYgPSBjb2x1bW5SZWZzLmN1cnJlbnRbaW5kZXhdLmN1cnJlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyUmVmLnN0eWxlLndpZHRoID0gJzIwMHB4J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgb25Nb3VzZURvd249eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2VEb3duKGluZGV4KVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+PC9kaXY+XG4gICAgICAgICAgICAgIDwvQ2VsbENvbXBvbmVudD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIClcbiAgICAgICAgfSl9XG4gICAgICAgIDxDZWxsQ29tcG9uZW50IHN0eWxlPXt7IHdpZHRoOiAnOHB4JyB9fT48L0NlbGxDb21wb25lbnQ+eycgJ31cbiAgICAgICAgey8qKiAvLyA4cHggaXMgdGhlIHNjcm9sbGJhciB3aWR0aCBhbmQgdGhleSBvbmx5IGFmZmVjdCB0aGUgYm9keSwgc28gd2UgbmVlZCB0byBhY2NvdW50IGZvciBpdCAqL31cbiAgICAgIDwvZGl2PlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyXG4iXX0=