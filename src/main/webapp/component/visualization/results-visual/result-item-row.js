import { __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
import * as React from 'react';
import { CellComponent } from './table-header';
import { useRerenderOnBackboneSync, useSelectionOfLazyResult, } from '../../../js/model/LazyQueryResult/hooks';
import user from '../../singletons/user-instance';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import { SelectionBackground } from './result-item';
import { useBackbone } from '../../selection-checkbox/useBackbone.hook';
import { TypedUserInstance } from '../../singletons/TypedUser';
import useCoordinateFormat from '../../tabs/metacard/useCoordinateFormat';
import Common from '../../../js/Common';
import Extensions from '../../../extension-points';
import { useMetacardDefinitions } from '../../../js/model/Startup/metacard-definitions.hooks';
import wreqr from '../../../js/wreqr';
import { LayoutContext } from '../../golden-layout/visual-settings.provider';
import { RESULTS_ATTRIBUTES_TABLE, getDefaultResultsShownTable, } from '../settings-helpers';
export function clearSelection() {
    if (window.getSelection) {
        // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.
        window.getSelection().removeAllRanges();
    }
    else if (document.selection) {
        ;
        document.selection.empty();
    }
}
export function hasSelection() {
    if (window.getSelection) {
        // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.
        return window.getSelection().toString() !== '';
    }
    else if (document.selection) {
        return document.selection.toString() !== '';
    }
    else {
        return false;
    }
}
var CheckboxCell = function (_a) {
    var lazyResult = _a.lazyResult;
    var isSelected = useSelectionOfLazyResult({ lazyResult: lazyResult });
    return (_jsx(CellComponent, { className: "h-full", style: { width: 'auto', padding: '0px' }, children: _jsx(Button, { "data-id": "select-checkbox", onClick: function (event) {
                event.stopPropagation();
                if (event.shiftKey) {
                    lazyResult.shiftSelect();
                }
                else {
                    lazyResult.controlSelect();
                }
            }, className: "h-full", children: isSelected ? _jsx(CheckBoxIcon, {}) : _jsx(CheckBoxOutlineBlankIcon, {}) }) }));
};
var RowComponent = function (_a) {
    var lazyResult = _a.lazyResult, originalMeasure = _a.measure, index = _a.index, results = _a.results, selectionInterface = _a.selectionInterface, headerColWidth = _a.headerColWidth, actionWidth = _a.actionWidth, setMaxActionWidth = _a.setMaxActionWidth, addOnWidth = _a.addOnWidth, setMaxAddOnWidth = _a.setMaxAddOnWidth;
    var _b = React.useContext(LayoutContext), getValue = _b.getValue, onStateChanged = _b.onStateChanged;
    var MetacardDefinitions = useMetacardDefinitions();
    var thumbnail = lazyResult.plain.metacard.properties.thumbnail;
    var _c = __read(React.useState(TypedUserInstance.getDecimalPrecision()), 2), decimalPrecision = _c[0], setDecimalPrecision = _c[1];
    var _d = __read(React.useState(getValue(RESULTS_ATTRIBUTES_TABLE, getDefaultResultsShownTable())), 2), shownAttributes = _d[0], setShownAttributes = _d[1];
    var isLast = index === results.length - 1;
    var listenTo = useBackbone().listenTo;
    var convertToFormat = useCoordinateFormat();
    var convertToPrecision = function (value) {
        return value && decimalPrecision
            ? Number(value).toFixed(decimalPrecision)
            : value;
    };
    useRerenderOnBackboneSync({ lazyResult: lazyResult });
    var actionRef = React.useRef(null);
    var addOnRef = React.useRef(null);
    React.useEffect(function () {
        var _a, _b;
        var actionWidth = ((_a = actionRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) || 0;
        setMaxActionWidth(actionWidth);
        var addOnWidth = ((_b = addOnRef.current) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect().width) || 0;
        setMaxAddOnWidth(addOnWidth);
    });
    React.useEffect(function () {
        listenTo(user.get('user').get('preferences'), 'change:decimalPrecision', function () {
            setDecimalPrecision(TypedUserInstance.getDecimalPrecision());
        });
        onStateChanged(function () {
            var shownList = getValue(RESULTS_ATTRIBUTES_TABLE, getDefaultResultsShownTable());
            setShownAttributes(shownList);
        });
    }, []);
    var imgsrc = Common.getImageSrc(thumbnail);
    var measure = function () {
        var _a, _b;
        if (((_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) &&
            ((_b = containerRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight) > 0) {
            originalMeasure();
        }
    };
    React.useEffect(function () {
        measure();
    }, [shownAttributes, convertToFormat]);
    var getDisplayValue = function (value, property) {
        if (value && MetacardDefinitions.getAttributeMap()[property]) {
            switch (MetacardDefinitions.getAttributeMap()[property].type) {
                case 'GEOMETRY':
                    return convertToFormat(value);
                case 'LONG':
                case 'DOUBLE':
                case 'FLOAT':
                    return convertToPrecision(value);
            }
        }
        return value;
    };
    listenTo(wreqr.vent, 'activeContentItemChanged', function () {
        measure();
    });
    var containerRef = React.useRef(null);
    var ResultItemActionInstance = Extensions.resultItemAction({
        lazyResult: lazyResult,
        selectionInterface: selectionInterface,
        itemContentRef: containerRef,
    });
    var ResultItemAddOnInstance = Extensions.resultItemRowAddOn({
        lazyResult: lazyResult,
        isTableView: true,
    });
    return (_jsx("div", { ref: containerRef, children: _jsxs("div", { className: "bg-inherit flex items-strech flex-nowrap", style: {
                width: actionWidth + addOnWidth + shownAttributes.length * 200 + 'px',
            }, children: [_jsx("div", { className: "bg-inherit Mui-border-divider border ".concat(isLast ? '' : 'border-b-0', " border-l-0 ").concat(index === 0 ? 'border-t-0' : ''), children: ResultItemActionInstance ? (_jsx(CellComponent, { className: "h-full", style: {
                            width: 'auto',
                            padding: 0,
                        }, ref: actionRef, children: _jsx(ResultItemActionInstance, {}) }, "resultItemAction")) : (_jsx("div", { style: { width: actionWidth } })) }, "resultItemAction"), _jsxs("div", { className: "sticky left-0 w-auto z-10 bg-inherit Mui-border-divider border ".concat(isLast ? '' : 'border-b-0', " border-l-0 ").concat(index === 0 ? 'border-t-0' : ''), children: [_jsx(SelectionBackground, { lazyResult: lazyResult }), _jsx(CheckboxCell, { lazyResult: lazyResult })] }), _jsxs("div", { className: "relative Mui-border-divider border border-b-0 border-r-0 border-l-0 ".concat(index === 0 ? 'border-t-0' : ''), children: [_jsx(SelectionBackground, { lazyResult: lazyResult, style: { width: addOnWidth + shownAttributes.length * 200 + 'px' } }), _jsx(Button, { "data-id": "result-item-row-container-button", onMouseDown: function (event) {
                                /**
                                 * Shift key can cause selections since we set the class to allow text selection,
                                 * so the only scenario we want to prevent that in is when shift clicking
                                 */
                                if (event.shiftKey) {
                                    clearSelection();
                                }
                            }, onClick: function (event) {
                                if (hasSelection()) {
                                    return;
                                }
                                if (event.shiftKey) {
                                    lazyResult.shiftSelect();
                                }
                                else if (event.ctrlKey || event.metaKey) {
                                    lazyResult.controlSelect();
                                }
                                else {
                                    lazyResult.select();
                                }
                            }, disableFocusRipple: true, disableRipple: true, disableTouchRipple: true, className: "outline-none rounded-none select-text p-0 text-left break-words h-full", children: _jsx("div", { className: "w-full h-full", children: _jsxs(Grid, { container: true, direction: "row", className: "h-full", wrap: "nowrap", children: [_jsx("div", { className: "Mui-border-divider border border-t-0 border-l-0 ".concat(isLast ? '' : 'border-b-0', " h-full"), children: _jsx("div", { style: { width: addOnWidth }, children: ResultItemAddOnInstance && (_jsx(CellComponent, { style: {
                                                        width: 'auto',
                                                    }, className: "pt-3", ref: addOnRef, children: ResultItemAddOnInstance }, "resultItemAddOn")) }) }, "resultItemAddOn"), shownAttributes.map(function (property) {
                                            var value = lazyResult.plain.metacard.properties[property];
                                            if (value === undefined) {
                                                value = '';
                                            }
                                            if (!Array.isArray(value)) {
                                                value = [value];
                                            }
                                            if (value &&
                                                MetacardDefinitions.getAttributeMap()[property]) {
                                                switch (MetacardDefinitions.getAttributeMap()[property].type) {
                                                    case 'DATE':
                                                        value = value.map(function (val) {
                                                            return val !== undefined && val !== ''
                                                                ? user.getUserReadableDateTime(val)
                                                                : '';
                                                        });
                                                        break;
                                                    default:
                                                        break;
                                                }
                                            }
                                            return (_jsx("div", { children: _jsx(CellComponent, { "data-property": "".concat(property), className: "Mui-border-divider border border-t-0 border-l-0 ".concat(isLast ? '' : 'border-b-0', " h-full"), "data-value": "".concat(value), style: {
                                                        width: "".concat(headerColWidth.get(property)),
                                                        minWidth: '200px',
                                                    }, children: property === 'thumbnail' && thumbnail ? (_jsx("img", { "data-id": "thumbnail-value", src: imgsrc, style: {
                                                            maxWidth: '100%',
                                                            maxHeight: '100%',
                                                        }, onLoad: function () {
                                                            measure();
                                                        }, onError: function () {
                                                            measure();
                                                        } })) : (_jsx(React.Fragment, { children: _jsx("div", { "data-id": "".concat(property, "-value"), style: { wordBreak: 'break-word' }, children: value.map(function (curValue, index) {
                                                                return (_jsx("span", { "data-value": "".concat(curValue), children: curValue.toString().startsWith('http') ? (_jsx("a", { href: "".concat(curValue), target: "_blank", rel: "noopener noreferrer", children: MetacardDefinitions.getAlias(property) })) : ("".concat(value.length > 1 &&
                                                                        index < value.length - 1
                                                                        ? getDisplayValue(curValue, property) + ', '
                                                                        : getDisplayValue(curValue, property))) }, index));
                                                            }) }) })) }, property) }, property));
                                        })] }) }) })] })] }) }));
};
export default RowComponent;
//# sourceMappingURL=data:application/json;base64,