import { __assign, __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import Button from '@mui/material/Button';
import * as React from 'react';
import MapSettings from '../../../react-component/map-settings';
import ZoomToHomeButton from '../../../react-component/button/split-button/zoomToHome';
import Gazetteer from '../../../react-component/location/gazetteer';
import { LayersDropdown } from '../../layers/layers-dropdown';
import CheckBoxIcon from '@mui/icons-material/CheckBox';
import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';
import KeyboardArrowLeftIcon from '@mui/icons-material/KeyboardArrowLeft';
import KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';
import Paper from '@mui/material/Paper';
import { Elevations } from '../../theme/theme';
var ClusteringButton = function (_a) {
    var toggleClustering = _a.toggleClustering, isClustering = _a.isClustering;
    return (_jsx(Button, { "data-id": "cluster-button", onClick: function () {
            toggleClustering();
        }, size: "small", color: "primary", children: _jsxs("div", { className: "flex flex-row items-center", children: [isClustering ? (_jsx(CheckBoxIcon, { className: "Mui-text-text-primary" })) : (_jsx(CheckBoxOutlineBlankIcon, { className: "Mui-text-text-primary" })), _jsx("span", { className: "pr-2", children: "Cluster" })] }) }));
};
export var MapToolbar = function (props) {
    var _a = __read(React.useState(false), 2), expanded = _a[0], setExpanded = _a[1];
    return (_jsx(Paper, { className: "absolute z-10 right-0 m-4 max-w-full-4 truncate", elevation: Elevations.overlays, children: _jsxs("div", { className: "flex flex-row items-center overflow-auto w-full flex-nowrap px-2", children: [_jsx("div", { className: "py-2", children: expanded ? (_jsxs(Button, { size: "small", color: "primary", onClick: function () {
                            setExpanded(false);
                        }, className: "shrink-0", children: [_jsx(KeyboardArrowRightIcon, { color: "inherit", className: "Mui-text-text-primary Mui-icon-size-small" }), _jsx(KeyboardArrowRightIcon, { color: "inherit", className: "-ml-3 Mui-text-text-primary Mui-icon-size-small" })] })) : (_jsxs(Button, { size: "small", color: "primary", onClick: function () {
                            setExpanded(true);
                        }, "data-id": "expand-map-tools-button", children: [_jsx(KeyboardArrowLeftIcon, { color: "inherit", className: "Mui-text-text-primary Mui-icon-size-small" }), _jsx(KeyboardArrowLeftIcon, { color: "inherit", className: "-ml-3 Mui-text-text-primary Mui-icon-size-small" }), "Map Tools"] })) }), expanded ? (_jsxs(_Fragment, { children: [_jsx("div", { className: "w-64 min-w-32 py-2 shrink-1 truncate", children: _jsx(Gazetteer, { variant: "outlined", placeholder: "Go to a location", setState: function (_a) {
                                    var polygon = _a.polygon;
                                    return props.map.doPanZoom(polygon);
                                } }) }), _jsx("div", { className: "py-2 pr-2 shrink-0", children: _jsx(ClusteringButton, __assign({}, props)) }), _jsx("div", { className: "Mui-bg-default w-min self-stretch shrink-0" }), _jsx("div", { className: "py-2 px-2 shrink-0", children: _jsx(LayersDropdown, { layers: props.mapLayers }) }), _jsx("div", { className: "Mui-bg-default w-min self-stretch shrink-0" }), _jsx("div", { className: "py-2 px-2 shrink-0", children: _jsx(ZoomToHomeButton, { goHome: function () { return props.zoomToHome(); }, saveHome: function () { return props.saveAsHome(); } }) }), _jsx("div", { className: "Mui-bg-default w-min self-stretch shrink-0" }), _jsx("div", { className: "py-2 pl-2 shrink-0", children: _jsx(MapSettings, {}) })] })) : null] }) }));
};
export default MapToolbar;
//# sourceMappingURL=data:application/json;base64,