import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import React from 'react';
import DistanceUtils from '../../../../js/DistanceUtils';
import { MultiLineString, LineString } from 'ol/geom';
import { transform as projTransform } from 'ol/proj';
import { Vector as VectorSource } from 'ol/source';
import { Vector as VectorLayer } from 'ol/layer';
import Feature from 'ol/Feature';
import Style from 'ol/style/Style';
import { Stroke } from 'ol/style';
import _ from 'underscore';
import * as Turf from '@turf/turf';
import { validateGeo } from '../../../../react-component/utils/validation';
import { useListenTo } from '../../../selection-checkbox/useBackbone.hook';
import { removeOldDrawing } from './drawing-and-display';
import { getIdFromModelForDisplay } from '../drawing-and-display';
import { StartupDataStore } from '../../../../js/model/Startup/startup';
import { contrastingColor } from '../../../../react-component/location/location-color-selector';
export function translateFromOpenlayersCoordinates(coords) {
    var coordinates = [];
    coords.forEach(function (point) {
        point = projTransform([
            DistanceUtils.coordinateRound(point[0]),
            DistanceUtils.coordinateRound(point[1]),
        ], StartupDataStore.Configuration.getProjection(), 'EPSG:4326');
        if (point[1] > 90) {
            point[1] = 89.9;
        }
        else if (point[1] < -90) {
            point[1] = -89.9;
        }
        coordinates.push(point);
    });
    return coordinates;
}
export function translateToOpenlayersCoordinates(coords) {
    var coordinates = [];
    coords.forEach(function (item) {
        if (Array.isArray(item[0])) {
            coordinates.push(translateToOpenlayersCoordinates(item));
        }
        else {
            coordinates.push(projTransform([item[0], item[1]], 'EPSG:4326', StartupDataStore.Configuration.getProjection()));
        }
    });
    return coordinates;
}
var modelToLineString = function (model) {
    var line = model.get('line');
    var setArr = _.uniq(line);
    if (setArr.length < 2) {
        return;
    }
    return new LineString(translateToOpenlayersCoordinates(setArr));
};
var adjustLinePoints = function (line) {
    var extent = line.getExtent();
    var lon1 = extent[0];
    var lon2 = extent[2];
    var width = Math.abs(lon2 - lon1);
    if (width > 180) {
        var adjusted = line.getCoordinates();
        adjusted.forEach(function (coord) {
            if (coord[0] < 0) {
                coord[0] += 360;
            }
        });
        line.setCoordinates(adjusted);
    }
};
var adjustMultiLinePoints = function (lines) {
    var adjusted = [];
    lines.getLineStrings().forEach(function (line) {
        adjustLinePoints(line);
        adjusted.push(line.getCoordinates());
    });
    lines.setCoordinates(adjusted);
};
export var drawLine = function (_a) {
    var map = _a.map, model = _a.model, line = _a.line, id = _a.id, isInteractive = _a.isInteractive, translation = _a.translation;
    if (!line) {
        // Handles case where model changes to empty vars and we don't want to draw anymore
        return;
    }
    var lineWidth = DistanceUtils.getDistanceInMeters(model.get('lineWidth'), model.get('lineUnits')) || 1;
    if (translation) {
        line.translate(translation.longitude, translation.latitude);
    }
    adjustLinePoints(line);
    var turfLine = Turf.lineString(translateFromOpenlayersCoordinates(line.getCoordinates()));
    var bufferedLine = Turf.buffer(turfLine, lineWidth, { units: 'meters' });
    if (!bufferedLine) {
        return;
    }
    var geometryRepresentation = new MultiLineString(translateToOpenlayersCoordinates(bufferedLine.geometry.coordinates));
    var drawnGeometryRepresentation = new LineString(translateToOpenlayersCoordinates(turfLine.geometry.coordinates));
    // need to adjust the points again AFTER buffering, since buffering undoes the antimeridian adjustments
    adjustMultiLinePoints(geometryRepresentation);
    var billboard = new Feature({
        geometry: geometryRepresentation,
    });
    billboard.setId(id);
    billboard.set('locationId', model.get('locationId'));
    var drawnLineFeature = new Feature({
        geometry: drawnGeometryRepresentation,
    });
    var color = model.get('color');
    var iconStyle = new Style({
        stroke: new Stroke({
            color: isInteractive ? contrastingColor : color ? color : '#914500',
            width: isInteractive ? 6 : 4,
        }),
    });
    var drawnLineIconStyle = new Style({
        stroke: new Stroke({
            color: isInteractive ? contrastingColor : color ? color : '#914500',
            width: 2,
            lineDash: [10, 5],
        }),
    });
    billboard.setStyle(iconStyle);
    drawnLineFeature.setStyle(drawnLineIconStyle);
    var vectorSource = new VectorSource({
        features: [billboard, drawnLineFeature],
    });
    var vectorLayer = new VectorLayer({
        source: vectorSource,
    });
    vectorLayer.set('id', id);
    var mapRef = map.getMap();
    removeOldDrawing({ map: mapRef, id: id });
    map.getMap().addLayer(vectorLayer);
};
var updatePrimitive = function (_a) {
    var _b;
    var map = _a.map, model = _a.model, id = _a.id, isInteractive = _a.isInteractive, translation = _a.translation;
    var line = modelToLineString(model);
    // Make sure the current model has width and height before drawing
    if (line !== undefined &&
        !((_b = validateGeo('line', JSON.stringify(line.getCoordinates()))) === null || _b === void 0 ? void 0 : _b.error)) {
        drawLine({ map: map, model: model, line: line, id: id, isInteractive: isInteractive, translation: translation });
    }
};
var useListenToLineModel = function (_a) {
    var model = _a.model, map = _a.map, isInteractive = _a.isInteractive, translation = _a.translation;
    var callback = React.useMemo(function () {
        return function () {
            if (model && map) {
                updatePrimitive({
                    map: map,
                    model: model,
                    id: getIdFromModelForDisplay({ model: model }),
                    isInteractive: isInteractive,
                    translation: translation,
                });
            }
        };
    }, [model, map, isInteractive, translation]);
    useListenTo(model, 'change:line change:lineWidth change:lineUnits', callback);
    callback();
};
export var OpenlayersLineDisplay = function (_a) {
    var map = _a.map, model = _a.model, isInteractive = _a.isInteractive, translation = _a.translation;
    useListenToLineModel({ map: map, model: model, isInteractive: isInteractive, translation: translation });
    React.useEffect(function () {
        return function () {
            if (map && model) {
                removeOldDrawing({
                    map: map.getMap(),
                    id: getIdFromModelForDisplay({ model: model }),
                });
            }
        };
    }, [map, model]);
    return _jsx(_Fragment, {});
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1kaXNwbGF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudC92aXN1YWxpemF0aW9uL21hcHMvb3BlbmxheWVycy9saW5lLWRpc3BsYXkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQ3pCLE9BQU8sYUFBYSxNQUFNLDhCQUE4QixDQUFBO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQ3JELE9BQU8sRUFBRSxTQUFTLElBQUksYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQ3BELE9BQU8sRUFBRSxNQUFNLElBQUksWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQ2xELE9BQU8sRUFBRSxNQUFNLElBQUksV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ2hELE9BQU8sT0FBTyxNQUFNLFlBQVksQ0FBQTtBQUNoQyxPQUFPLEtBQUssTUFBTSxnQkFBZ0IsQ0FBQTtBQUNsQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBR2pDLE9BQU8sQ0FBQyxNQUFNLFlBQVksQ0FBQTtBQUMxQixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQTtBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOENBQThDLENBQUE7QUFDMUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhDQUE4QyxDQUFBO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ3hELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQ2pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFBO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxN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QVEsRUFBRSxDQUFBO0FBQ1osQ0FBQyxDQUFBO0FBQ0QsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBQUcsVUFBQyxFQVVyQztRQVRDLEdBQUcsU0FBQSxFQUNILEtBQUssV0FBQSxFQUNMLGFBQWEsbUJBQUEsRUFDYixXQUFXLGlCQUFBO0lBT1gsb0JBQW9CLENBQUMsRUFBRSxHQUFHLEtBQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxhQUFhLGVBQUEsRUFBRSxXQUFXLGFBQUEsRUFBRSxDQUFDLENBQUE7SUFDaEUsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNkLE9BQU87WUFDTCxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFDakIsZ0JBQWdCLENBQUM7b0JBQ2YsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7b0JBQ2pCLEVBQUUsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7aUJBQ3hDLENBQUMsQ0FBQTtZQUNKLENBQUM7UUFDSCxDQUFDLENBQUE7SUFDSCxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUNoQixPQUFPLG1CQUFLLENBQUE7QUFDZCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBEaXN0YW5jZVV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2pzL0Rpc3RhbmNlVXRpbHMnXG5pbXBvcnQgeyBNdWx0aUxpbmVTdHJpbmcsIExpbmVTdHJpbmcgfSBmcm9tICdvbC9nZW9tJ1xuaW1wb3J0IHsgdHJhbnNmb3JtIGFzIHByb2pUcmFuc2Zvcm0gfSBmcm9tICdvbC9wcm9qJ1xuaW1wb3J0IHsgVmVjdG9yIGFzIFZlY3RvclNvdXJjZSB9IGZyb20gJ29sL3NvdXJjZSdcbmltcG9ydCB7IFZlY3RvciBhcyBWZWN0b3JMYXllciB9IGZyb20gJ29sL2xheWVyJ1xuaW1wb3J0IEZlYXR1cmUgZnJvbSAnb2wvRmVhdHVyZSdcbmltcG9ydCBTdHlsZSBmcm9tICdvbC9zdHlsZS9TdHlsZSdcbmltcG9ydCB7IFN0cm9rZSB9IGZyb20gJ29sL3N0eWxlJ1xuaW1wb3J0IE1hcCBmcm9tICdvbC9NYXAnXG5pbXBvcnQgeyBDb29yZGluYXRlIH0gZnJvbSAnb2wvY29vcmRpbmF0ZSdcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnXG5pbXBvcnQgKiBhcyBUdXJmIGZyb20gJ0B0dXJmL3R1cmYnXG5pbXBvcnQgeyB2YWxpZGF0ZUdlbyB9IGZyb20gJy4uLy4uLy4uLy4uL3JlYWN0LWNvbXBvbmVudC91dGlscy92YWxpZGF0aW9uJ1xuaW1wb3J0IHsgdXNlTGlzdGVuVG8gfSBmcm9tICcuLi8uLi8uLi9zZWxlY3Rpb24tY2hlY2tib3gvdXNlQmFja2JvbmUuaG9vaydcbmltcG9ydCB7IHJlbW92ZU9sZERyYXdpbmcgfSBmcm9tICcuL2RyYXdpbmctYW5kLWRpc3BsYXknXG5pbXBvcnQgeyBnZXRJZEZyb21Nb2RlbEZvckRpc3BsYXkgfSBmcm9tICcuLi9kcmF3aW5nLWFuZC1kaXNwbGF5J1xuaW1wb3J0IHsgU3RhcnR1cERhdGFTdG9yZSB9IGZyb20gJy4uLy4uLy4uLy4uL2pzL21vZGVsL1N0YXJ0dXAvc3RhcnR1cCdcbmltcG9ydCB7IGNvbnRyYXN0aW5nQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9yZWFjdC1jb21wb25lbnQvbG9jYXRpb24vbG9jYXRpb24tY29sb3Itc2VsZWN0b3InXG5pbXBvcnQgeyBUcmFuc2xhdGlvbiB9IGZyb20gJy4uL2ludGVyYWN0aW9ucy5wcm92aWRlcidcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZUZyb21PcGVubGF5ZXJzQ29vcmRpbmF0ZXMoY29vcmRzOiBDb29yZGluYXRlW10pIHtcbiAgY29uc3QgY29vcmRpbmF0ZXMgPSBbXSBhcyBDb29yZGluYXRlW11cbiAgY29vcmRzLmZvckVhY2goKHBvaW50KSA9PiB7XG4gICAgcG9pbnQgPSBwcm9qVHJhbnNmb3JtKFxuICAgICAgW1xuICAgICAgICBEaXN0YW5jZVV0aWxzLmNvb3JkaW5hdGVSb3VuZChwb2ludFswXSksXG4gICAgICAgIERpc3RhbmNlVXRpbHMuY29vcmRpbmF0ZVJvdW5kKHBvaW50WzFdKSxcbiAgICAgIF0sXG4gICAgICBTdGFydHVwRGF0YVN0b3JlLkNvbmZpZ3VyYXRpb24uZ2V0UHJvamVjdGlvbigpLFxuICAgICAgJ0VQU0c6NDMyNidcbiAgICApXG4gICAgaWYgKHBvaW50WzFdID4gOTApIHtcbiAgICAgIHBvaW50WzFdID0gODkuOVxuICAgIH0gZWxzZSBpZiAocG9pbnRbMV0gPCAtOTApIHtcbiAgICAgIHBvaW50WzFdID0gLTg5LjlcbiAgICB9XG4gICAgY29vcmRpbmF0ZXMucHVzaChwb2ludClcbiAgfSlcbiAgcmV0dXJuIGNvb3JkaW5hdGVzXG59XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlVG9PcGVubGF5ZXJzQ29vcmRpbmF0ZXMoY29vcmRzOiBDb29yZGluYXRlW10pIHtcbiAgY29uc3QgY29vcmRpbmF0ZXMgPSBbXSBhcyBDb29yZGluYXRlW11cbiAgY29vcmRzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtWzBdKSkge1xuICAgICAgY29vcmRpbmF0ZXMucHVzaChcbiAgICAgICAgdHJhbnNsYXRlVG9PcGVubGF5ZXJzQ29vcmRpbmF0ZXMoXG4gICAgICAgICAgaXRlbSBhcyB1bmtub3duIGFzIENvb3JkaW5hdGVbXVxuICAgICAgICApIGFzIHVua25vd24gYXMgQ29vcmRpbmF0ZVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb29yZGluYXRlcy5wdXNoKFxuICAgICAgICBwcm9qVHJhbnNmb3JtKFxuICAgICAgICAgIFtpdGVtWzBdLCBpdGVtWzFdXSxcbiAgICAgICAgICAnRVBTRzo0MzI2JyxcbiAgICAgICAgICBTdGFydHVwRGF0YVN0b3JlLkNvbmZpZ3VyYXRpb24uZ2V0UHJvamVjdGlvbigpXG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG4gIH0pXG4gIHJldHVybiBjb29yZGluYXRlc1xufVxuY29uc3QgbW9kZWxUb0xpbmVTdHJpbmcgPSAobW9kZWw6IGFueSkgPT4ge1xuICBjb25zdCBsaW5lID0gbW9kZWwuZ2V0KCdsaW5lJylcbiAgY29uc3Qgc2V0QXJyID0gXy51bmlxKGxpbmUpXG4gIGlmIChzZXRBcnIubGVuZ3RoIDwgMikge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBuZXcgTGluZVN0cmluZyh0cmFuc2xhdGVUb09wZW5sYXllcnNDb29yZGluYXRlcyhzZXRBcnIpKVxufVxuY29uc3QgYWRqdXN0TGluZVBvaW50cyA9IChsaW5lOiBMaW5lU3RyaW5nKSA9PiB7XG4gIGNvbnN0IGV4dGVudCA9IGxpbmUuZ2V0RXh0ZW50KClcbiAgY29uc3QgbG9uMSA9IGV4dGVudFswXVxuICBjb25zdCBsb24yID0gZXh0ZW50WzJdXG4gIGNvbnN0IHdpZHRoID0gTWF0aC5hYnMobG9uMiAtIGxvbjEpXG4gIGlmICh3aWR0aCA+IDE4MCkge1xuICAgIGNvbnN0IGFkanVzdGVkID0gbGluZS5nZXRDb29yZGluYXRlcygpXG4gICAgYWRqdXN0ZWQuZm9yRWFjaCgoY29vcmQpID0+IHtcbiAgICAgIGlmIChjb29yZFswXSA8IDApIHtcbiAgICAgICAgY29vcmRbMF0gKz0gMzYwXG4gICAgICB9XG4gICAgfSlcbiAgICBsaW5lLnNldENvb3JkaW5hdGVzKGFkanVzdGVkKVxuICB9XG59XG5jb25zdCBhZGp1c3RNdWx0aUxpbmVQb2ludHMgPSAobGluZXM6IE11bHRpTGluZVN0cmluZykgPT4ge1xuICBjb25zdCBhZGp1c3RlZDogQ29vcmRpbmF0ZVtdW10gPSBbXVxuICBsaW5lcy5nZXRMaW5lU3RyaW5ncygpLmZvckVhY2goKGxpbmUpID0+IHtcbiAgICBhZGp1c3RMaW5lUG9pbnRzKGxpbmUpXG4gICAgYWRqdXN0ZWQucHVzaChsaW5lLmdldENvb3JkaW5hdGVzKCkpXG4gIH0pXG4gIGxpbmVzLnNldENvb3JkaW5hdGVzKGFkanVzdGVkKVxufVxuZXhwb3J0IGNvbnN0IGRyYXdMaW5lID0gKHtcbiAgbWFwLFxuICBtb2RlbCxcbiAgbGluZSxcbiAgaWQsXG4gIGlzSW50ZXJhY3RpdmUsXG4gIHRyYW5zbGF0aW9uLFxufToge1xuICBtYXA6IGFueVxuICBtb2RlbDogYW55XG4gIGxpbmU6IExpbmVTdHJpbmdcbiAgaWQ6IHN0cmluZ1xuICBpc0ludGVyYWN0aXZlPzogYm9vbGVhblxuICB0cmFuc2xhdGlvbj86IFRyYW5zbGF0aW9uXG59KSA9PiB7XG4gIGlmICghbGluZSkge1xuICAgIC8vIEhhbmRsZXMgY2FzZSB3aGVyZSBtb2RlbCBjaGFuZ2VzIHRvIGVtcHR5IHZhcnMgYW5kIHdlIGRvbid0IHdhbnQgdG8gZHJhdyBhbnltb3JlXG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3QgbGluZVdpZHRoID1cbiAgICBEaXN0YW5jZVV0aWxzLmdldERpc3RhbmNlSW5NZXRlcnMoXG4gICAgICBtb2RlbC5nZXQoJ2xpbmVXaWR0aCcpLFxuICAgICAgbW9kZWwuZ2V0KCdsaW5lVW5pdHMnKVxuICAgICkgfHwgMVxuICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICBsaW5lLnRyYW5zbGF0ZSh0cmFuc2xhdGlvbi5sb25naXR1ZGUsIHRyYW5zbGF0aW9uLmxhdGl0dWRlKVxuICB9XG4gIGFkanVzdExpbmVQb2ludHMobGluZSlcbiAgY29uc3QgdHVyZkxpbmUgPSBUdXJmLmxpbmVTdHJpbmcoXG4gICAgdHJhbnNsYXRlRnJvbU9wZW5sYXllcnNDb29yZGluYXRlcyhsaW5lLmdldENvb3JkaW5hdGVzKCkpXG4gIClcbiAgY29uc3QgYnVmZmVyZWRMaW5lID0gVHVyZi5idWZmZXIodHVyZkxpbmUsIGxpbmVXaWR0aCwgeyB1bml0czogJ21ldGVycycgfSlcbiAgaWYgKCFidWZmZXJlZExpbmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBnZW9tZXRyeVJlcHJlc2VudGF0aW9uID0gbmV3IE11bHRpTGluZVN0cmluZyhcbiAgICB0cmFuc2xhdGVUb09wZW5sYXllcnNDb29yZGluYXRlcyhcbiAgICAgIGJ1ZmZlcmVkTGluZS5nZW9tZXRyeS5jb29yZGluYXRlcyBhcyBhbnlcbiAgICApIGFzIHVua25vd24gYXMgYW55XG4gIClcbiAgY29uc3QgZHJhd25HZW9tZXRyeVJlcHJlc2VudGF0aW9uID0gbmV3IExpbmVTdHJpbmcoXG4gICAgdHJhbnNsYXRlVG9PcGVubGF5ZXJzQ29vcmRpbmF0ZXMoXG4gICAgICB0dXJmTGluZS5nZW9tZXRyeS5jb29yZGluYXRlcyBhcyBhbnlcbiAgICApIGFzIHVua25vd24gYXMgYW55XG4gIClcbiAgLy8gbmVlZCB0byBhZGp1c3QgdGhlIHBvaW50cyBhZ2FpbiBBRlRFUiBidWZmZXJpbmcsIHNpbmNlIGJ1ZmZlcmluZyB1bmRvZXMgdGhlIGFudGltZXJpZGlhbiBhZGp1c3RtZW50c1xuICBhZGp1c3RNdWx0aUxpbmVQb2ludHMoZ2VvbWV0cnlSZXByZXNlbnRhdGlvbilcbiAgY29uc3QgYmlsbGJvYXJkID0gbmV3IEZlYXR1cmUoe1xuICAgIGdlb21ldHJ5OiBnZW9tZXRyeVJlcHJlc2VudGF0aW9uLFxuICB9KVxuICBiaWxsYm9hcmQuc2V0SWQoaWQpXG4gIGJpbGxib2FyZC5zZXQoJ2xvY2F0aW9uSWQnLCBtb2RlbC5nZXQoJ2xvY2F0aW9uSWQnKSlcbiAgY29uc3QgZHJhd25MaW5lRmVhdHVyZSA9IG5ldyBGZWF0dXJlKHtcbiAgICBnZW9tZXRyeTogZHJhd25HZW9tZXRyeVJlcHJlc2VudGF0aW9uLFxuICB9KVxuICBjb25zdCBjb2xvciA9IG1vZGVsLmdldCgnY29sb3InKVxuICBjb25zdCBpY29uU3R5bGUgPSBuZXcgU3R5bGUoe1xuICAgIHN0cm9rZTogbmV3IFN0cm9rZSh7XG4gICAgICBjb2xvcjogaXNJbnRlcmFjdGl2ZSA/IGNvbnRyYXN0aW5nQ29sb3IgOiBjb2xvciA/IGNvbG9yIDogJyM5MTQ1MDAnLFxuICAgICAgd2lkdGg6IGlzSW50ZXJhY3RpdmUgPyA2IDogNCxcbiAgICB9KSxcbiAgfSlcbiAgY29uc3QgZHJhd25MaW5lSWNvblN0eWxlID0gbmV3IFN0eWxlKHtcbiAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgY29sb3I6IGlzSW50ZXJhY3RpdmUgPyBjb250cmFzdGluZ0NvbG9yIDogY29sb3IgPyBjb2xvciA6ICcjOTE0NTAwJyxcbiAgICAgIHdpZHRoOiAyLFxuICAgICAgbGluZURhc2g6IFsxMCwgNV0sXG4gICAgfSksXG4gIH0pXG4gIGJpbGxib2FyZC5zZXRTdHlsZShpY29uU3R5bGUpXG4gIGRyYXduTGluZUZlYXR1cmUuc2V0U3R5bGUoZHJhd25MaW5lSWNvblN0eWxlKVxuICBjb25zdCB2ZWN0b3JTb3VyY2UgPSBuZXcgVmVjdG9yU291cmNlKHtcbiAgICBmZWF0dXJlczogW2JpbGxib2FyZCwgZHJhd25MaW5lRmVhdHVyZV0sXG4gIH0pXG4gIGxldCB2ZWN0b3JMYXllciA9IG5ldyBWZWN0b3JMYXllcih7XG4gICAgc291cmNlOiB2ZWN0b3JTb3VyY2UsXG4gIH0pXG4gIHZlY3RvckxheWVyLnNldCgnaWQnLCBpZClcbiAgY29uc3QgbWFwUmVmID0gbWFwLmdldE1hcCgpIGFzIE1hcFxuICByZW1vdmVPbGREcmF3aW5nKHsgbWFwOiBtYXBSZWYsIGlkIH0pXG4gIG1hcC5nZXRNYXAoKS5hZGRMYXllcih2ZWN0b3JMYXllcilcbn1cbmNvbnN0IHVwZGF0ZVByaW1pdGl2ZSA9ICh7XG4gIG1hcCxcbiAgbW9kZWwsXG4gIGlkLFxuICBpc0ludGVyYWN0aXZlLFxuICB0cmFuc2xhdGlvbixcbn06IHtcbiAgbWFwOiBhbnlcbiAgbW9kZWw6IGFueVxuICBpZDogc3RyaW5nXG4gIGlzSW50ZXJhY3RpdmU/OiBib29sZWFuXG4gIHRyYW5zbGF0aW9uPzogVHJhbnNsYXRpb25cbn0pID0+IHtcbiAgY29uc3QgbGluZSA9IG1vZGVsVG9MaW5lU3RyaW5nKG1vZGVsKVxuICAvLyBNYWtlIHN1cmUgdGhlIGN1cnJlbnQgbW9kZWwgaGFzIHdpZHRoIGFuZCBoZWlnaHQgYmVmb3JlIGRyYXdpbmdcbiAgaWYgKFxuICAgIGxpbmUgIT09IHVuZGVmaW5lZCAmJlxuICAgICF2YWxpZGF0ZUdlbygnbGluZScsIEpTT04uc3RyaW5naWZ5KGxpbmUuZ2V0Q29vcmRpbmF0ZXMoKSkpPy5lcnJvclxuICApIHtcbiAgICBkcmF3TGluZSh7IG1hcCwgbW9kZWwsIGxpbmUsIGlkLCBpc0ludGVyYWN0aXZlLCB0cmFuc2xhdGlvbiB9KVxuICB9XG59XG5jb25zdCB1c2VMaXN0ZW5Ub0xpbmVNb2RlbCA9ICh7XG4gIG1vZGVsLFxuICBtYXAsXG4gIGlzSW50ZXJhY3RpdmUsXG4gIHRyYW5zbGF0aW9uLFxufToge1xuICBtb2RlbDogYW55XG4gIG1hcDogYW55XG4gIGlzSW50ZXJhY3RpdmU/OiBib29sZWFuXG4gIHRyYW5zbGF0aW9uPzogVHJhbnNsYXRpb25cbn0pID0+IHtcbiAgY29uc3QgY2FsbGJhY2sgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG1vZGVsICYmIG1hcCkge1xuICAgICAgICB1cGRhdGVQcmltaXRpdmUoe1xuICAgICAgICAgIG1hcCxcbiAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICBpZDogZ2V0SWRGcm9tTW9kZWxGb3JEaXNwbGF5KHsgbW9kZWwgfSksXG4gICAgICAgICAgaXNJbnRlcmFjdGl2ZSxcbiAgICAgICAgICB0cmFuc2xhdGlvbixcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttb2RlbCwgbWFwLCBpc0ludGVyYWN0aXZlLCB0cmFuc2xhdGlvbl0pXG4gIHVzZUxpc3RlblRvKG1vZGVsLCAnY2hhbmdlOmxpbmUgY2hhbmdlOmxpbmVXaWR0aCBjaGFuZ2U6bGluZVVuaXRzJywgY2FsbGJhY2spXG4gIGNhbGxiYWNrKClcbn1cbmV4cG9ydCBjb25zdCBPcGVubGF5ZXJzTGluZURpc3BsYXkgPSAoe1xuICBtYXAsXG4gIG1vZGVsLFxuICBpc0ludGVyYWN0aXZlLFxuICB0cmFuc2xhdGlvbixcbn06IHtcbiAgbWFwOiBhbnlcbiAgbW9kZWw6IGFueVxuICBpc0ludGVyYWN0aXZlPzogYm9vbGVhblxuICB0cmFuc2xhdGlvbj86IFRyYW5zbGF0aW9uXG59KSA9PiB7XG4gIHVzZUxpc3RlblRvTGluZU1vZGVsKHsgbWFwLCBtb2RlbCwgaXNJbnRlcmFjdGl2ZSwgdHJhbnNsYXRpb24gfSlcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG1hcCAmJiBtb2RlbCkge1xuICAgICAgICByZW1vdmVPbGREcmF3aW5nKHtcbiAgICAgICAgICBtYXA6IG1hcC5nZXRNYXAoKSxcbiAgICAgICAgICBpZDogZ2V0SWRGcm9tTW9kZWxGb3JEaXNwbGF5KHsgbW9kZWwgfSksXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9LCBbbWFwLCBtb2RlbF0pXG4gIHJldHVybiA8PjwvPlxufVxuIl19