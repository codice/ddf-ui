import 'backbone-associations';
import { IndexForSourceGroupType, QueryStartAndEndType } from './Query.methods';
export type QueryType = {
    constructor: (_attributes: any, options: any) => void;
    set: (p1: any, p2?: any) => void;
    toJSON: () => any;
    defaults: () => any;
    resetToDefaults: (overridenDefaults: any) => void;
    applyDefaults: () => void;
    revert: () => void;
    isLocal: () => boolean;
    _handleDeprecatedFederation: (attributes: any) => void;
    initialize: (attributes: any) => void;
    getSelectedSources: () => Array<any>;
    buildSearchData: () => any;
    isOutdated: () => boolean;
    startSearchIfOutdated: () => void;
    updateCqlBasedOnFilterTree: () => void;
    initializeResult: (options?: any) => {
        data: any;
        selectedSources: any;
        isHarvested: any;
        isFederated: any;
        result: any;
        resultOptions: any;
    };
    startSearchFromFirstPage: (options?: any, done?: any) => void;
    startSearch: (options?: any, done?: any) => void;
    currentSearches: Array<any>;
    cancelCurrentSearches: () => void;
    clearResults: () => void;
    setSources: (sources: any) => void;
    setColor: (color: any) => void;
    getColor: () => any;
    color: () => any;
    currentIndexForSourceGroup: IndexForSourceGroupType;
    nextIndexForSourceGroup: IndexForSourceGroupType;
    pastIndexesForSourceGroup: Array<IndexForSourceGroupType>;
    getPreviousServerPage: () => void;
    hasPreviousServerPage: () => boolean;
    hasNextServerPage: () => boolean;
    getNextServerPage: () => void;
    getHasFirstServerPage: () => boolean;
    getFirstServerPage: () => void;
    getHasLastServerPage: () => boolean;
    getLastServerPage: () => void;
    resetCurrentIndexForSourceGroup: () => void;
    setNextIndexForSourceGroupToPrevPage: () => void;
    setNextIndexForSourceGroupToNextPage: (sources: string[]) => void;
    getCurrentStartAndEndForSourceGroup: () => QueryStartAndEndType;
    [key: string]: any;
};
declare const _default: any;
export default _default;
