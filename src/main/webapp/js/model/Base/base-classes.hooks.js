import { __read } from "tslib";
// hooks to deal with the base classes
import React from 'react';
export function useSubscribable(subscribable, thing, callback) {
    React.useEffect(function () {
        return subscribable.subscribeTo({ subscribableThing: thing, callback: callback });
    }, [subscribable, thing, callback]);
}
/**
 * Notice that we are passing a function to useState. This is because useState will call functions
 * that are passed to it to compute the initial state. Since overridable.get() could return a function,
 * we need to encapsulate the call to it within another function to ensure that useState handles it correctly.
 * Similar with setValue, when passed a function it assumes you're trying to access the previous state, so we
 * need to encapsulate that call as well.
 */
export function useOverridable(overridable) {
    var _a = __read(React.useState(function () { return overridable.get(); }), 2), value = _a[0], setValue = _a[1];
    useSubscribable(overridable, 'override', function () {
        setValue(function () { return overridable.get(); });
    });
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jbGFzc2VzLmhvb2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2pzL21vZGVsL0Jhc2UvYmFzZS1jbGFzc2VzLmhvb2tzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQXNDO0FBQ3RDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUd6QixNQUFNLFVBQVUsZUFBZSxDQUM3QixZQUE2QixFQUM3QixLQUFpQixFQUNqQixRQUFrQztJQUVsQyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2QsT0FBTyxZQUFZLENBQUMsV0FBVyxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUMsQ0FBQTtJQUN6RSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7QUFDckMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQUksV0FBMkI7SUFDckQsSUFBQSxLQUFBLE9BQW9CLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBTSxPQUFBLFdBQVcsQ0FBQyxHQUFHLEVBQUUsRUFBakIsQ0FBaUIsQ0FBQyxJQUFBLEVBQTFELEtBQUssUUFBQSxFQUFFLFFBQVEsUUFBMkMsQ0FBQTtJQUNqRSxlQUFlLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRTtRQUN2QyxRQUFRLENBQUMsY0FBTSxPQUFBLFdBQVcsQ0FBQyxHQUFHLEVBQUUsRUFBakIsQ0FBaUIsQ0FBQyxDQUFBO0lBQ25DLENBQUMsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaG9va3MgdG8gZGVhbCB3aXRoIHRoZSBiYXNlIGNsYXNzZXNcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFN1YnNjcmliYWJsZSwgT3ZlcnJpZGFibGUgfSBmcm9tICcuL2Jhc2UtY2xhc3NlcydcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN1YnNjcmliYWJsZTxUIGV4dGVuZHMgeyB0aGluZzogc3RyaW5nOyBhcmdzPzogYW55IH0+KFxuICBzdWJzY3JpYmFibGU6IFN1YnNjcmliYWJsZTxUPixcbiAgdGhpbmc6IFRbJ3RoaW5nJ10sXG4gIGNhbGxiYWNrOiAodmFsOiBUWydhcmdzJ10pID0+IHZvaWRcbikge1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBzdWJzY3JpYmFibGUuc3Vic2NyaWJlVG8oeyBzdWJzY3JpYmFibGVUaGluZzogdGhpbmcsIGNhbGxiYWNrIH0pXG4gIH0sIFtzdWJzY3JpYmFibGUsIHRoaW5nLCBjYWxsYmFja10pXG59XG5cbi8qKlxuICogTm90aWNlIHRoYXQgd2UgYXJlIHBhc3NpbmcgYSBmdW5jdGlvbiB0byB1c2VTdGF0ZS4gVGhpcyBpcyBiZWNhdXNlIHVzZVN0YXRlIHdpbGwgY2FsbCBmdW5jdGlvbnNcbiAqIHRoYXQgYXJlIHBhc3NlZCB0byBpdCB0byBjb21wdXRlIHRoZSBpbml0aWFsIHN0YXRlLiBTaW5jZSBvdmVycmlkYWJsZS5nZXQoKSBjb3VsZCByZXR1cm4gYSBmdW5jdGlvbixcbiAqIHdlIG5lZWQgdG8gZW5jYXBzdWxhdGUgdGhlIGNhbGwgdG8gaXQgd2l0aGluIGFub3RoZXIgZnVuY3Rpb24gdG8gZW5zdXJlIHRoYXQgdXNlU3RhdGUgaGFuZGxlcyBpdCBjb3JyZWN0bHkuXG4gKiBTaW1pbGFyIHdpdGggc2V0VmFsdWUsIHdoZW4gcGFzc2VkIGEgZnVuY3Rpb24gaXQgYXNzdW1lcyB5b3UncmUgdHJ5aW5nIHRvIGFjY2VzcyB0aGUgcHJldmlvdXMgc3RhdGUsIHNvIHdlXG4gKiBuZWVkIHRvIGVuY2Fwc3VsYXRlIHRoYXQgY2FsbCBhcyB3ZWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlT3ZlcnJpZGFibGU8VD4ob3ZlcnJpZGFibGU6IE92ZXJyaWRhYmxlPFQ+KSB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gb3ZlcnJpZGFibGUuZ2V0KCkpXG4gIHVzZVN1YnNjcmliYWJsZShvdmVycmlkYWJsZSwgJ292ZXJyaWRlJywgKCkgPT4ge1xuICAgIHNldFZhbHVlKCgpID0+IG92ZXJyaWRhYmxlLmdldCgpKVxuICB9KVxuICByZXR1cm4gdmFsdWVcbn1cbiJdfQ==