import { __extends } from "tslib";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import { Subscribable } from '../Base/base-classes'; // Import Subscribable from base-classes module
import { Sources } from './sources';
import fetch from '../../../react-component/utils/fetch/fetch';
import { Configuration } from './configuration';
import { MetacardDefinitions } from './metacard-definitions';
var StartupData = /** @class */ (function (_super) {
    __extends(StartupData, _super);
    function StartupData() {
        var _this = _super.call(this) || this;
        _this.Configuration = new Configuration(_this);
        _this.Sources = new Sources(_this);
        _this.MetacardDefinitions = new MetacardDefinitions(_this);
        _this.fetch();
        return _this;
    }
    StartupData.prototype.fetch = function () {
        var _this = this;
        fetch('./internal/compose/startup')
            .then(function (response) { return response.json(); })
            .then(function (startupPayload) {
            _this.data = startupPayload;
            _this._notifySubscribers({ thing: 'fetched', args: startupPayload });
        });
    };
    return StartupData;
}(Subscribable));
export { StartupData };
export var StartupDataStore = new StartupData();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9qcy9tb2RlbC9TdGFydHVwL3N0YXJ0dXAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFBLENBQUMsK0NBQStDO0FBRW5HLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDbkMsT0FBTyxLQUFLLE1BQU0sNENBQTRDLENBQUE7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBRTVEO0lBQWlDLCtCQUcvQjtJQWVBO1FBQ0UsWUFBQSxNQUFLLFdBQUUsU0FBQTtRQUNQLEtBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsS0FBSSxDQUFDLENBQUE7UUFDNUMsS0FBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxLQUFJLENBQUMsQ0FBQTtRQUNoQyxLQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxLQUFJLENBQUMsQ0FBQTtRQUN4RCxLQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7O0lBQ2QsQ0FBQztJQUNELDJCQUFLLEdBQUw7UUFBQSxpQkFPQztRQU5DLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQzthQUNoQyxJQUFJLENBQUMsVUFBQyxRQUFRLElBQUssT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQWYsQ0FBZSxDQUFDO2FBQ25DLElBQUksQ0FBQyxVQUFDLGNBQWtDO1lBQ3ZDLEtBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFBO1lBQzFCLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUE7UUFDckUsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBakNELENBQWlDLFlBQVksR0FpQzVDOztBQUVELE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLElBQUksV0FBVyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4uL0Jhc2UvYmFzZS1jbGFzc2VzJyAvLyBJbXBvcnQgU3Vic2NyaWJhYmxlIGZyb20gYmFzZS1jbGFzc2VzIG1vZHVsZVxuaW1wb3J0IHsgU3RhcnR1cFBheWxvYWRUeXBlIH0gZnJvbSAnLi9zdGFydHVwLnR5cGVzJ1xuaW1wb3J0IHsgU291cmNlcyB9IGZyb20gJy4vc291cmNlcydcbmltcG9ydCBmZXRjaCBmcm9tICcuLi8uLi8uLi9yZWFjdC1jb21wb25lbnQvdXRpbHMvZmV0Y2gvZmV0Y2gnXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9jb25maWd1cmF0aW9uJ1xuaW1wb3J0IHsgTWV0YWNhcmREZWZpbml0aW9ucyB9IGZyb20gJy4vbWV0YWNhcmQtZGVmaW5pdGlvbnMnXG5cbmV4cG9ydCBjbGFzcyBTdGFydHVwRGF0YSBleHRlbmRzIFN1YnNjcmliYWJsZTx7XG4gIHRoaW5nOiAnZmV0Y2hlZCdcbiAgYXJnczogU3RhcnR1cFBheWxvYWRUeXBlXG59PiB7XG4gIGRhdGE/OiBPbWl0PFxuICAgIFN0YXJ0dXBQYXlsb2FkVHlwZSxcbiAgICB8ICdzb3VyY2VzJ1xuICAgIHwgJ2hhcnZlc3RlZFNvdXJjZXMnXG4gICAgfCAnbG9jYWxTb3VyY2VJZCdcbiAgICB8ICdjb25maWcnXG4gICAgfCAncGxhdGZvcm1VSUNvbmZpZ3VyYXRpb24nXG4gICAgfCAnYXR0cmlidXRlTWFwJ1xuICAgIHwgJ3NvcnRlZEF0dHJpYnV0ZXMnXG4gICAgfCAnbWV0YWNhcmRUeXBlcydcbiAgPlxuICBTb3VyY2VzOiBTb3VyY2VzXG4gIENvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb25cbiAgTWV0YWNhcmREZWZpbml0aW9uczogTWV0YWNhcmREZWZpbml0aW9uc1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5Db25maWd1cmF0aW9uID0gbmV3IENvbmZpZ3VyYXRpb24odGhpcylcbiAgICB0aGlzLlNvdXJjZXMgPSBuZXcgU291cmNlcyh0aGlzKVxuICAgIHRoaXMuTWV0YWNhcmREZWZpbml0aW9ucyA9IG5ldyBNZXRhY2FyZERlZmluaXRpb25zKHRoaXMpXG4gICAgdGhpcy5mZXRjaCgpXG4gIH1cbiAgZmV0Y2goKSB7XG4gICAgZmV0Y2goJy4vaW50ZXJuYWwvY29tcG9zZS9zdGFydHVwJylcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oKHN0YXJ0dXBQYXlsb2FkOiBTdGFydHVwUGF5bG9hZFR5cGUpID0+IHtcbiAgICAgICAgdGhpcy5kYXRhID0gc3RhcnR1cFBheWxvYWRcbiAgICAgICAgdGhpcy5fbm90aWZ5U3Vic2NyaWJlcnMoeyB0aGluZzogJ2ZldGNoZWQnLCBhcmdzOiBzdGFydHVwUGF5bG9hZCB9KVxuICAgICAgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgU3RhcnR1cERhdGFTdG9yZSA9IG5ldyBTdGFydHVwRGF0YSgpXG4iXX0=