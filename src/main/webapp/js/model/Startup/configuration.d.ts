import { Subscribable } from '../Base/base-classes';
import { StartupPayloadType } from './startup.types';
import { StartupData } from './startup';
declare class Configuration extends Subscribable<{
    thing: 'configuration-update';
}> {
    config?: StartupPayloadType['config'];
    platformUiConfiguration?: StartupPayloadType['platformUiConfiguration'];
    constructor(startupData?: StartupData);
    isHiddenAttribute: (attribute: any) => boolean;
    getHiddenAttributes: () => string[];
    getExportLimit: () => number;
    getResultCount: () => number;
    getProjection: () => string;
    getI18n: () => Record<string, string>;
    getAttributeAliases: () => Record<string, string>;
    isReadOnly: (attribute: string) => boolean;
    getReadOnly: () => string[];
    getSummaryShow: () => string[];
    getCommonAttributes: () => string[];
    getImageryProviders: () => import("./startup.types").ImageryProvider[];
    getTerrainProvider: () => {};
    getBingKey: () => string;
    getSystemUsageMessage: () => string;
    getPlatformUITimeout: () => number;
    getBasicSearchTemporalSelectionDefault: () => string[];
    getEnums: () => Record<string, any>;
    getOnlineGazetteer: () => boolean;
    getResultShow: () => string[];
    getIconConfig: () => import("./startup.types").IconConfig;
    getShowRelevanceScores: () => boolean;
    getRelevancePrecision: () => number;
    getMapHome: () => string;
    getHelpUrl: () => string;
    getCustomBranding: () => string;
    getTopLeftLogoSrc: () => string;
    getProduct: () => string;
    getMenuIconSrc: () => string;
    getBottomLeftBackgroundSrc: () => string;
    getPlatformHeader: () => string | undefined;
    getPlatformFooter: () => string | undefined;
    getPlatformBackground: () => string | undefined;
    getPlatformColor: () => string | undefined;
    getWebSocketsEnabled: () => true;
    getBasicSearchMatchType: () => string;
    getDefaultLayout: () => import("./startup.types").VisualizationType[] | undefined;
    getSearchTimeout: () => number;
    getDefaultSources: () => any[];
    getDefaultTableColumns: () => string[];
    getIsFuzzyResultsEnabled: () => boolean;
    getDisableUnknownErrorBox: () => boolean;
}
export { Configuration };
