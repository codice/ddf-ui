/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import { StartupDataStore } from './startup';
import { useSyncExternalStore } from 'react';
import { SnapshotManager } from './snapshot';
var subscribe = function (callback) {
    var cancelSubscription = StartupDataStore.Sources.subscribeTo({
        subscribableThing: 'sources-update',
        callback: callback,
    });
    return function () {
        cancelSubscription();
    };
};
var snapshotManager = new SnapshotManager(function () {
    return StartupDataStore.Sources;
}, subscribe);
// I want to be able to pass a subscribe callback, and only update it when the subscribe happens
export var useSources = function () {
    var sources = useSyncExternalStore(snapshotManager.subscribe, snapshotManager.getSnapshot);
    return sources;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlcy5ob29rcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9qcy9tb2RlbC9TdGFydHVwL3NvdXJjZXMuaG9va3MudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7QUFDSixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDNUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sT0FBTyxDQUFBO0FBQzVDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFNUMsSUFBTSxTQUFTLEdBQUcsVUFBQyxRQUFvQjtJQUNyQyxJQUFNLGtCQUFrQixHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFDOUQsaUJBQWlCLEVBQUUsZ0JBQWdCO1FBQ25DLFFBQVEsVUFBQTtLQUNULENBQUMsQ0FBQTtJQUNGLE9BQU87UUFDTCxrQkFBa0IsRUFBRSxDQUFBO0lBQ3RCLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELElBQU0sZUFBZSxHQUFHLElBQUksZUFBZSxDQUFDO0lBQzFDLE9BQU8sZ0JBQWdCLENBQUMsT0FBTyxDQUFBO0FBQ2pDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUViLGdHQUFnRztBQUNoRyxNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUc7SUFDeEIsSUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQ2xDLGVBQWUsQ0FBQyxTQUFTLEVBQ3pCLGVBQWUsQ0FBQyxXQUFXLENBQzVCLENBQUE7SUFDRCxPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCB7IFN0YXJ0dXBEYXRhU3RvcmUgfSBmcm9tICcuL3N0YXJ0dXAnXG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgU25hcHNob3RNYW5hZ2VyIH0gZnJvbSAnLi9zbmFwc2hvdCdcblxuY29uc3Qgc3Vic2NyaWJlID0gKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB7XG4gIGNvbnN0IGNhbmNlbFN1YnNjcmlwdGlvbiA9IFN0YXJ0dXBEYXRhU3RvcmUuU291cmNlcy5zdWJzY3JpYmVUbyh7XG4gICAgc3Vic2NyaWJhYmxlVGhpbmc6ICdzb3VyY2VzLXVwZGF0ZScsXG4gICAgY2FsbGJhY2ssXG4gIH0pXG4gIHJldHVybiAoKSA9PiB7XG4gICAgY2FuY2VsU3Vic2NyaXB0aW9uKClcbiAgfVxufVxuXG5jb25zdCBzbmFwc2hvdE1hbmFnZXIgPSBuZXcgU25hcHNob3RNYW5hZ2VyKCgpID0+IHtcbiAgcmV0dXJuIFN0YXJ0dXBEYXRhU3RvcmUuU291cmNlc1xufSwgc3Vic2NyaWJlKVxuXG4vLyBJIHdhbnQgdG8gYmUgYWJsZSB0byBwYXNzIGEgc3Vic2NyaWJlIGNhbGxiYWNrLCBhbmQgb25seSB1cGRhdGUgaXQgd2hlbiB0aGUgc3Vic2NyaWJlIGhhcHBlbnNcbmV4cG9ydCBjb25zdCB1c2VTb3VyY2VzID0gKCkgPT4ge1xuICBjb25zdCBzb3VyY2VzID0gdXNlU3luY0V4dGVybmFsU3RvcmUoXG4gICAgc25hcHNob3RNYW5hZ2VyLnN1YnNjcmliZSxcbiAgICBzbmFwc2hvdE1hbmFnZXIuZ2V0U25hcHNob3RcbiAgKVxuICByZXR1cm4gc291cmNlc1xufVxuIl19