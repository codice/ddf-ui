import _get from 'lodash/get';
import { StartupDataStore } from './model/Startup/startup';
var _map = Object.keys(StartupDataStore.Configuration.getIconConfig()).reduce(function (totalIconMap, iconConfigKey) {
    var iconProp = StartupDataStore.Configuration.getIconConfig()[iconConfigKey];
    totalIconMap[iconConfigKey] = {
        class: iconProp.className,
        style: {
            code: iconProp.code,
            font: iconProp.font,
            size: iconProp.size,
        },
    };
    return totalIconMap;
}, {});
/* Maps top-level mime type category names to the closest icon. */
var _mimeMap = {
    application: _map.document,
    audio: _map.sound,
    example: _map.default,
    font: _map.document,
    image: _map.image,
    message: _map.document,
    model: _map.dataset,
    multipart: _map.collection,
    text: _map.text,
    video: _map.video,
};
/*  This is the default icon that will be used if a Metacard cannot be
        mapped to an icon. Set default attributes to empty strings for no icon. */
var _default = _map.default;
/* Remove resource keyword from datatype and covert to lowercase. */
function _formatAttribute(attr) {
    if (attr !== undefined) {
        return attr.toLowerCase().replace(' resource', '');
    }
    return attr;
}
/* Checks if the attribute value exists in the icon map. */
function _iconExistsInMap(attr, map) {
    if (Array.isArray(attr)) {
        attr = attr[0];
    }
    if (attr !== undefined &&
        attr.length > 0 &&
        map.hasOwnProperty(_formatAttribute(attr))) {
        return true;
    }
    else {
        return false;
    }
}
/* Find the correct icon based on various Metacard attributes. */
function _deriveIconByMetacardObject(metacard) {
    var prop, dataTypes, metacardType, mimeType, contentType, icon = _default;
    prop = metacard.metacard.properties;
    dataTypes = prop.datatype;
    metacardType = _formatAttribute(prop['metacard-type']);
    mimeType = _formatAttribute(prop['media.type']);
    contentType = _formatAttribute(prop['metadata-content-type']);
    if (mimeType !== undefined) {
        var mime_1 = mimeType.split('/');
        if (mime_1 && mime_1.length === 2) {
            mimeType = mime_1[0];
        }
    }
    if (_iconExistsInMap(dataTypes, _map)) {
        icon = _get(_map, _formatAttribute(dataTypes[0]), _default);
    }
    else if (_iconExistsInMap(metacardType, _map)) {
        icon = _get(_map, metacardType, _default);
    }
    else if (_iconExistsInMap(contentType, _map)) {
        icon = _get(_map, contentType, _default);
    }
    else if (_iconExistsInMap(mimeType, _mimeMap)) {
        icon = _get(_mimeMap, mimeType, _default);
    }
    if (metacardType === 'metacard.query') {
        return {
            class: 'fa fa-search',
            style: {
                code: 'f002',
                font: 'FontAwesome',
                size: '12px',
            },
        };
    }
    if (!icon) {
        return {
            class: 'fa fa-question',
            style: {
                code: 'f128',
                font: 'FontAwesome',
                size: '12px',
            },
        };
    }
    return icon;
}
/* Find the correct icon by icon name. */
function _deriveIconByName(name) {
    return _get(_map, _formatAttribute(name), _default);
}
export default {
    getClassByMetacardObject: function (metacard) {
        var i = _deriveIconByMetacardObject(metacard);
        return _get(i, 'class', _default.class);
    },
    getFullByMetacardObject: function (metacard) {
        var i = _deriveIconByMetacardObject(metacard);
        return i !== undefined ? i : _default;
    },
    getClassByName: function (name) {
        var i = _deriveIconByName(name);
        return _get(i, 'class', _default === null || _default === void 0 ? void 0 : _default.class);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWNvbkhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9qcy9JY29uSGVscGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQkEsT0FBTyxJQUFJLE1BQU0sWUFBWSxDQUFBO0FBQzdCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRTFELElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUM3RSxVQUFDLFlBQVksRUFBRSxhQUFhO0lBQzFCLElBQU0sUUFBUSxHQUNaLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUMvRCxZQUFZLENBQUMsYUFBYSxDQUFDLEdBQUc7UUFDNUIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxTQUFTO1FBQ3pCLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtZQUNuQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7WUFDbkIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1NBQ3BCO0tBQ0YsQ0FBQTtJQUNELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUMsRUFDRCxFQVNDLENBQ0YsQ0FBQTtBQUVELGtFQUFrRTtBQUNsRSxJQUFNLFFBQVEsR0FBRztJQUNmLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUTtJQUMxQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7SUFDakIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO0lBQ3JCLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUTtJQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7SUFDakIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO0lBQ3RCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTztJQUNuQixTQUFTLEVB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LEVBQUUsT0FBTyxFQUFFLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxLQUFLLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBDb2RpY2UgRm91bmRhdGlvblxuICpcbiAqIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXJcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlXG4gKiBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0XG4gKiBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuIEEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBpcyBkaXN0cmlidXRlZCBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbSBhbmQgY2FuIGJlIGZvdW5kIGF0XG4gKiA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2xncGwuaHRtbD4uXG4gKlxuICoqL1xuaW1wb3J0IHsgTGF6eVF1ZXJ5UmVzdWx0IH0gZnJvbSAnLi9tb2RlbC9MYXp5UXVlcnlSZXN1bHQvTGF6eVF1ZXJ5UmVzdWx0J1xuXG5pbXBvcnQgX2dldCBmcm9tICdsb2Rhc2gvZ2V0J1xuaW1wb3J0IHsgU3RhcnR1cERhdGFTdG9yZSB9IGZyb20gJy4vbW9kZWwvU3RhcnR1cC9zdGFydHVwJ1xuXG5jb25zdCBfbWFwID0gT2JqZWN0LmtleXMoU3RhcnR1cERhdGFTdG9yZS5Db25maWd1cmF0aW9uLmdldEljb25Db25maWcoKSkucmVkdWNlKFxuICAodG90YWxJY29uTWFwLCBpY29uQ29uZmlnS2V5KSA9PiB7XG4gICAgY29uc3QgaWNvblByb3AgPVxuICAgICAgU3RhcnR1cERhdGFTdG9yZS5Db25maWd1cmF0aW9uLmdldEljb25Db25maWcoKVtpY29uQ29uZmlnS2V5XVxuICAgIHRvdGFsSWNvbk1hcFtpY29uQ29uZmlnS2V5XSA9IHtcbiAgICAgIGNsYXNzOiBpY29uUHJvcC5jbGFzc05hbWUsXG4gICAgICBzdHlsZToge1xuICAgICAgICBjb2RlOiBpY29uUHJvcC5jb2RlLFxuICAgICAgICBmb250OiBpY29uUHJvcC5mb250LFxuICAgICAgICBzaXplOiBpY29uUHJvcC5zaXplLFxuICAgICAgfSxcbiAgICB9XG4gICAgcmV0dXJuIHRvdGFsSWNvbk1hcFxuICB9LFxuICB7fSBhcyB7XG4gICAgW2tleTogc3RyaW5nXToge1xuICAgICAgY2xhc3M6IHN0cmluZ1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgY29kZTogc3RyaW5nXG4gICAgICAgIGZvbnQ6IHN0cmluZ1xuICAgICAgICBzaXplOiBzdHJpbmdcbiAgICAgIH1cbiAgICB9XG4gIH1cbilcblxuLyogTWFwcyB0b3AtbGV2ZWwgbWltZSB0eXBlIGNhdGVnb3J5IG5hbWVzIHRvIHRoZSBjbG9zZXN0IGljb24uICovXG5jb25zdCBfbWltZU1hcCA9IHtcbiAgYXBwbGljYXRpb246IF9tYXAuZG9jdW1lbnQsXG4gIGF1ZGlvOiBfbWFwLnNvdW5kLFxuICBleGFtcGxlOiBfbWFwLmRlZmF1bHQsXG4gIGZvbnQ6IF9tYXAuZG9jdW1lbnQsXG4gIGltYWdlOiBfbWFwLmltYWdlLFxuICBtZXNzYWdlOiBfbWFwLmRvY3VtZW50LFxuICBtb2RlbDogX21hcC5kYXRhc2V0LFxuICBtdWx0aXBhcnQ6IF9tYXAuY29sbGVjdGlvbixcbiAgdGV4dDogX21hcC50ZXh0LFxuICB2aWRlbzogX21hcC52aWRlbyxcbn1cblxuLyogIFRoaXMgaXMgdGhlIGRlZmF1bHQgaWNvbiB0aGF0IHdpbGwgYmUgdXNlZCBpZiBhIE1ldGFjYXJkIGNhbm5vdCBiZVxuICAgICAgICBtYXBwZWQgdG8gYW4gaWNvbi4gU2V0IGRlZmF1bHQgYXR0cmlidXRlcyB0byBlbXB0eSBzdHJpbmdzIGZvciBubyBpY29uLiAqL1xuY29uc3QgX2RlZmF1bHQgPSBfbWFwLmRlZmF1bHRcblxuLyogUmVtb3ZlIHJlc291cmNlIGtleXdvcmQgZnJvbSBkYXRhdHlwZSBhbmQgY292ZXJ0IHRvIGxvd2VyY2FzZS4gKi9cbmZ1bmN0aW9uIF9mb3JtYXRBdHRyaWJ1dGUoYXR0cjogc3RyaW5nKSB7XG4gIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXR0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJyByZXNvdXJjZScsICcnKVxuICB9XG4gIHJldHVybiBhdHRyXG59XG5cbi8qIENoZWNrcyBpZiB0aGUgYXR0cmlidXRlIHZhbHVlIGV4aXN0cyBpbiB0aGUgaWNvbiBtYXAuICovXG5mdW5jdGlvbiBfaWNvbkV4aXN0c0luTWFwKGF0dHI6IGFueSwgbWFwOiBhbnkpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXR0cikpIHtcbiAgICBhdHRyID0gYXR0clswXVxuICB9XG4gIGlmIChcbiAgICBhdHRyICE9PSB1bmRlZmluZWQgJiZcbiAgICBhdHRyLmxlbmd0aCA+IDAgJiZcbiAgICBtYXAuaGFzT3duUHJvcGVydHkoX2Zvcm1hdEF0dHJpYnV0ZShhdHRyKSlcbiAgKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKiBGaW5kIHRoZSBjb3JyZWN0IGljb24gYmFzZWQgb24gdmFyaW91cyBNZXRhY2FyZCBhdHRyaWJ1dGVzLiAqL1xuZnVuY3Rpb24gX2Rlcml2ZUljb25CeU1ldGFjYXJkT2JqZWN0KG1ldGFjYXJkOiBMYXp5UXVlcnlSZXN1bHRbJ3BsYWluJ10pIHtcbiAgbGV0IHByb3AsXG4gICAgZGF0YVR5cGVzLFxuICAgIG1ldGFjYXJkVHlwZSxcbiAgICBtaW1lVHlwZSxcbiAgICBjb250ZW50VHlwZSxcbiAgICBpY29uID0gX2RlZmF1bHRcblxuICBwcm9wID0gbWV0YWNhcmQubWV0YWNhcmQucHJvcGVydGllc1xuICBkYXRhVHlwZXMgPSBwcm9wLmRhdGF0eXBlXG4gIG1ldGFjYXJkVHlwZSA9IF9mb3JtYXRBdHRyaWJ1dGUocHJvcFsnbWV0YWNhcmQtdHlwZSddKVxuICBtaW1lVHlwZSA9IF9mb3JtYXRBdHRyaWJ1dGUocHJvcFsnbWVkaWEudHlwZSddKVxuICBjb250ZW50VHlwZSA9IF9mb3JtYXRBdHRyaWJ1dGUocHJvcFsnbWV0YWRhdGEtY29udGVudC10eXBlJ10pXG5cbiAgaWYgKG1pbWVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBtaW1lID0gbWltZVR5cGUuc3BsaXQoJy8nKVxuICAgIGlmIChtaW1lICYmIG1pbWUubGVuZ3RoID09PSAyKSB7XG4gICAgICBtaW1lVHlwZSA9IG1pbWVbMF1cbiAgICB9XG4gIH1cblxuICBpZiAoX2ljb25FeGlzdHNJbk1hcChkYXRhVHlwZXMsIF9tYXApKSB7XG4gICAgaWNvbiA9IF9nZXQoX21hcCwgX2Zvcm1hdEF0dHJpYnV0ZShkYXRhVHlwZXNbMF0pLCBfZGVmYXVsdClcbiAgfSBlbHNlIGlmIChfaWNvbkV4aXN0c0luTWFwKG1ldGFjYXJkVHlwZSwgX21hcCkpIHtcbiAgICBpY29uID0gX2dldChfbWFwLCBtZXRhY2FyZFR5cGUsIF9kZWZhdWx0KVxuICB9IGVsc2UgaWYgKF9pY29uRXhpc3RzSW5NYXAoY29udGVudFR5cGUsIF9tYXApKSB7XG4gICAgaWNvbiA9IF9nZXQoX21hcCwgY29udGVudFR5cGUsIF9kZWZhdWx0KVxuICB9IGVsc2UgaWYgKF9pY29uRXhpc3RzSW5NYXAobWltZVR5cGUsIF9taW1lTWFwKSkge1xuICAgIGljb24gPSBfZ2V0KF9taW1lTWFwLCBtaW1lVHlwZSwgX2RlZmF1bHQpXG4gIH1cbiAgaWYgKG1ldGFjYXJkVHlwZSA9PT0gJ21ldGFjYXJkLnF1ZXJ5Jykge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzczogJ2ZhIGZhLXNlYXJjaCcsXG4gICAgICBzdHlsZToge1xuICAgICAgICBjb2RlOiAnZjAwMicsXG4gICAgICAgIGZvbnQ6ICdGb250QXdlc29tZScsXG4gICAgICAgIHNpemU6ICcxMnB4JyxcbiAgICAgIH0sXG4gICAgfVxuICB9XG4gIGlmICghaWNvbikge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzczogJ2ZhIGZhLXF1ZXN0aW9uJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGNvZGU6ICdmMTI4JyxcbiAgICAgICAgZm9udDogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgc2l6ZTogJzEycHgnLFxuICAgICAgfSxcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGljb25cbn1cblxuLyogRmluZCB0aGUgY29ycmVjdCBpY29uIGJ5IGljb24gbmFtZS4gKi9cbmZ1bmN0aW9uIF9kZXJpdmVJY29uQnlOYW1lKG5hbWU6IHN0cmluZykge1xuICByZXR1cm4gX2dldChfbWFwLCBfZm9ybWF0QXR0cmlidXRlKG5hbWUpLCBfZGVmYXVsdClcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRDbGFzc0J5TWV0YWNhcmRPYmplY3QobWV0YWNhcmQ6IExhenlRdWVyeVJlc3VsdFsncGxhaW4nXSkge1xuICAgIGNvbnN0IGkgPSBfZGVyaXZlSWNvbkJ5TWV0YWNhcmRPYmplY3QobWV0YWNhcmQpXG4gICAgcmV0dXJuIF9nZXQoaSwgJ2NsYXNzJywgX2RlZmF1bHQuY2xhc3MpXG4gIH0sXG4gIGdldEZ1bGxCeU1ldGFjYXJkT2JqZWN0KG1ldGFjYXJkOiBMYXp5UXVlcnlSZXN1bHRbJ3BsYWluJ10pIHtcbiAgICBjb25zdCBpID0gX2Rlcml2ZUljb25CeU1ldGFjYXJkT2JqZWN0KG1ldGFjYXJkKVxuICAgIHJldHVybiBpICE9PSB1bmRlZmluZWQgPyBpIDogX2RlZmF1bHRcbiAgfSxcbiAgZ2V0Q2xhc3NCeU5hbWUobmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgaSA9IF9kZXJpdmVJY29uQnlOYW1lKG5hbWUpXG4gICAgcmV0dXJuIF9nZXQoaSwgJ2NsYXNzJywgX2RlZmF1bHQ/LmNsYXNzKVxuICB9LFxufVxuIl19