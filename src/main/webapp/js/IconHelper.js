import _get from 'lodash/get';
import { StartupDataStore } from './model/Startup/startup';
var _map = Object.keys(StartupDataStore.Configuration.getIconConfig()).reduce(function (totalIconMap, iconConfigKey) {
    var iconProp = StartupDataStore.Configuration.getIconConfig()[iconConfigKey];
    totalIconMap[iconConfigKey] = {
        class: iconProp.className,
        style: {
            code: iconProp.code,
            font: iconProp.font,
            size: iconProp.size,
        },
    };
    return totalIconMap;
}, {});
/* Maps top-level mime type category names to the closest icon. */
var _mimeMap = {
    application: _map.document,
    audio: _map.sound,
    example: _map.default,
    font: _map.document,
    image: _map.image,
    message: _map.document,
    model: _map.dataset,
    multipart: _map.collection,
    text: _map.text,
    video: _map.video,
};
/*  This is the default icon that will be used if a Metacard cannot be
        mapped to an icon. Set default attributes to empty strings for no icon. */
var _default = _map.default;
/* Remove resource keyword from datatype and covert to lowercase. */
function _formatAttribute(attr) {
    if (attr !== undefined) {
        return attr.toLowerCase().replace(' resource', '');
    }
    return attr;
}
/* Checks if the attribute value exists in the icon map. */
function _iconExistsInMap(attr, map) {
    if (Array.isArray(attr)) {
        attr = attr[0];
    }
    if (attr !== undefined &&
        attr.length > 0 &&
        map.hasOwnProperty(_formatAttribute(attr))) {
        return true;
    }
    else {
        return false;
    }
}
/* Find the correct icon based on various Metacard attributes. */
function _deriveIconByMetacardObject(metacard) {
    var prop, dataTypes, metacardType, mimeType, contentType, icon = _default;
    prop = metacard.metacard.properties;
    dataTypes = prop.datatype;
    metacardType = _formatAttribute(prop['metacard-type']);
    mimeType = _formatAttribute(prop['media.type']);
    contentType = _formatAttribute(prop['metadata-content-type']);
    if (mimeType !== undefined) {
        var mime_1 = mimeType.split('/');
        if (mime_1 && mime_1.length === 2) {
            mimeType = mime_1[0];
        }
    }
    if (_iconExistsInMap(dataTypes, _map)) {
        icon = _get(_map, _formatAttribute(dataTypes[0]), _default);
    }
    else if (_iconExistsInMap(metacardType, _map)) {
        icon = _get(_map, metacardType, _default);
    }
    else if (_iconExistsInMap(contentType, _map)) {
        icon = _get(_map, contentType, _default);
    }
    else if (_iconExistsInMap(mimeType, _mimeMap)) {
        icon = _get(_mimeMap, mimeType, _default);
    }
    if (metacardType === 'metacard.query') {
        return {
            class: 'fa fa-search',
            style: {
                code: 'f002',
                font: 'FontAwesome',
                size: '12px',
            },
        };
    }
    if (!icon) {
        return {
            class: 'fa fa-question',
            style: {
                code: 'f128',
                font: 'FontAwesome',
                size: '12px',
            },
        };
    }
    return icon;
}
/* Find the correct icon by icon name. */
function _deriveIconByName(name) {
    return _get(_map, _formatAttribute(name), _default);
}
export default {
    getClassByMetacardObject: function (metacard) {
        var i = _deriveIconByMetacardObject(metacard);
        return _get(i, 'class', _default.class);
    },
    getFullByMetacardObject: function (metacard) {
        var i = _deriveIconByMetacardObject(metacard);
        return i !== undefined ? i : _default;
    },
    getClassByName: function (name) {
        var i = _deriveIconByName(name);
        return _get(i, 'class', _default === null || _default === void 0 ? void 0 : _default.class);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWNvbkhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9qcy9JY29uSGVscGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQkEsT0FBTyxJQUFJLE1BQU0sWUFBWSxDQUFBO0FBQzdCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRTFELElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUM3RSxVQUFDLFlBQVksRUFBRSxhQUFhO0lBQzFCLElBQU0sUUFBUSxHQUNaLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUMvRCxZQUFZLENBQUMsYUFBYSxDQUFDLEdBQUc7UUFDNUIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxTQUFTO1FBQ3pCLEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtZQUNuQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7WUFDbkIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1NBQ3BCO0tBQ0YsQ0FBQTtJQUNELE9BQU8sWUFBWSxDQUFBO0FBQ3JCLENBQUMsRUFDRCxFQVNDLENBQ0YsQ0FBQTtBQUVELGtFQUFrRTtBQUNsRSxJQUFNLFFBQVEsR0FBRztJQUNmLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUTtJQUMxQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7SUFDakIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO0lBQ3JCLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUTtJQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7SUFDakIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO0lBQ3RCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTztJQUNuQixTQUFTLEVB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KGMpIENvZGljZSBGb3VuZGF0aW9uXG4gKlxuICogVGhpcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXRcbiAqIGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gQSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGlzIGRpc3RyaWJ1dGVkIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtIGFuZCBjYW4gYmUgZm91bmQgYXRcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvbGdwbC5odG1sPi5cbiAqXG4gKiovXG5pbXBvcnQgeyBMYXp5UXVlcnlSZXN1bHQgfSBmcm9tICcuL21vZGVsL0xhenlRdWVyeVJlc3VsdC9MYXp5UXVlcnlSZXN1bHQnXG5cbmltcG9ydCBfZ2V0IGZyb20gJ2xvZGFzaC9nZXQnXG5pbXBvcnQgeyBTdGFydHVwRGF0YVN0b3JlIH0gZnJvbSAnLi9tb2RlbC9TdGFydHVwL3N0YXJ0dXAnXG5cbmNvbnN0IF9tYXAgPSBPYmplY3Qua2V5cyhTdGFydHVwRGF0YVN0b3JlLkNvbmZpZ3VyYXRpb24uZ2V0SWNvbkNvbmZpZygpKS5yZWR1Y2UoXG4gICh0b3RhbEljb25NYXAsIGljb25Db25maWdLZXkpID0+IHtcbiAgICBjb25zdCBpY29uUHJvcCA9XG4gICAgICBTdGFydHVwRGF0YVN0b3JlLkNvbmZpZ3VyYXRpb24uZ2V0SWNvbkNvbmZpZygpW2ljb25Db25maWdLZXldXG4gICAgdG90YWxJY29uTWFwW2ljb25Db25maWdLZXldID0ge1xuICAgICAgY2xhc3M6IGljb25Qcm9wLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGNvZGU6IGljb25Qcm9wLmNvZGUsXG4gICAgICAgIGZvbnQ6IGljb25Qcm9wLmZvbnQsXG4gICAgICAgIHNpemU6IGljb25Qcm9wLnNpemUsXG4gICAgICB9LFxuICAgIH1cbiAgICByZXR1cm4gdG90YWxJY29uTWFwXG4gIH0sXG4gIHt9IGFzIHtcbiAgICBba2V5OiBzdHJpbmddOiB7XG4gICAgICBjbGFzczogc3RyaW5nXG4gICAgICBzdHlsZToge1xuICAgICAgICBjb2RlOiBzdHJpbmdcbiAgICAgICAgZm9udDogc3RyaW5nXG4gICAgICAgIHNpemU6IHN0cmluZ1xuICAgICAgfVxuICAgIH1cbiAgfVxuKVxuXG4vKiBNYXBzIHRvcC1sZXZlbCBtaW1lIHR5cGUgY2F0ZWdvcnkgbmFtZXMgdG8gdGhlIGNsb3Nlc3QgaWNvbi4gKi9cbmNvbnN0IF9taW1lTWFwID0ge1xuICBhcHBsaWNhdGlvbjogX21hcC5kb2N1bWVudCxcbiAgYXVkaW86IF9tYXAuc291bmQsXG4gIGV4YW1wbGU6IF9tYXAuZGVmYXVsdCxcbiAgZm9udDogX21hcC5kb2N1bWVudCxcbiAgaW1hZ2U6IF9tYXAuaW1hZ2UsXG4gIG1lc3NhZ2U6IF9tYXAuZG9jdW1lbnQsXG4gIG1vZGVsOiBfbWFwLmRhdGFzZXQsXG4gIG11bHRpcGFydDogX21hcC5jb2xsZWN0aW9uLFxuICB0ZXh0OiBfbWFwLnRleHQsXG4gIHZpZGVvOiBfbWFwLnZpZGVvLFxufVxuXG4vKiAgVGhpcyBpcyB0aGUgZGVmYXVsdCBpY29uIHRoYXQgd2lsbCBiZSB1c2VkIGlmIGEgTWV0YWNhcmQgY2Fubm90IGJlXG4gICAgICAgIG1hcHBlZCB0byBhbiBpY29uLiBTZXQgZGVmYXVsdCBhdHRyaWJ1dGVzIHRvIGVtcHR5IHN0cmluZ3MgZm9yIG5vIGljb24uICovXG5jb25zdCBfZGVmYXVsdCA9IF9tYXAuZGVmYXVsdFxuXG4vKiBSZW1vdmUgcmVzb3VyY2Uga2V5d29yZCBmcm9tIGRhdGF0eXBlIGFuZCBjb3ZlcnQgdG8gbG93ZXJjYXNlLiAqL1xuZnVuY3Rpb24gX2Zvcm1hdEF0dHJpYnV0ZShhdHRyOiBzdHJpbmcpIHtcbiAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhdHRyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnIHJlc291cmNlJywgJycpXG4gIH1cbiAgcmV0dXJuIGF0dHJcbn1cblxuLyogQ2hlY2tzIGlmIHRoZSBhdHRyaWJ1dGUgdmFsdWUgZXhpc3RzIGluIHRoZSBpY29uIG1hcC4gKi9cbmZ1bmN0aW9uIF9pY29uRXhpc3RzSW5NYXAoYXR0cjogYW55LCBtYXA6IGFueSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhdHRyKSkge1xuICAgIGF0dHIgPSBhdHRyWzBdXG4gIH1cbiAgaWYgKFxuICAgIGF0dHIgIT09IHVuZGVmaW5lZCAmJlxuICAgIGF0dHIubGVuZ3RoID4gMCAmJlxuICAgIG1hcC5oYXNPd25Qcm9wZXJ0eShfZm9ybWF0QXR0cmlidXRlKGF0dHIpKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qIEZpbmQgdGhlIGNvcnJlY3QgaWNvbiBiYXNlZCBvbiB2YXJpb3VzIE1ldGFjYXJkIGF0dHJpYnV0ZXMuICovXG5mdW5jdGlvbiBfZGVyaXZlSWNvbkJ5TWV0YWNhcmRPYmplY3QobWV0YWNhcmQ6IExhenlRdWVyeVJlc3VsdFsncGxhaW4nXSkge1xuICBsZXQgcHJvcCxcbiAgICBkYXRhVHlwZXMsXG4gICAgbWV0YWNhcmRUeXBlLFxuICAgIG1pbWVUeXBlLFxuICAgIGNvbnRlbnRUeXBlLFxuICAgIGljb24gPSBfZGVmYXVsdFxuXG4gIHByb3AgPSBtZXRhY2FyZC5tZXRhY2FyZC5wcm9wZXJ0aWVzXG4gIGRhdGFUeXBlcyA9IHByb3AuZGF0YXR5cGVcbiAgbWV0YWNhcmRUeXBlID0gX2Zvcm1hdEF0dHJpYnV0ZShwcm9wWydtZXRhY2FyZC10eXBlJ10pXG4gIG1pbWVUeXBlID0gX2Zvcm1hdEF0dHJpYnV0ZShwcm9wWydtZWRpYS50eXBlJ10pXG4gIGNvbnRlbnRUeXBlID0gX2Zvcm1hdEF0dHJpYnV0ZShwcm9wWydtZXRhZGF0YS1jb250ZW50LXR5cGUnXSlcblxuICBpZiAobWltZVR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IG1pbWUgPSBtaW1lVHlwZS5zcGxpdCgnLycpXG4gICAgaWYgKG1pbWUgJiYgbWltZS5sZW5ndGggPT09IDIpIHtcbiAgICAgIG1pbWVUeXBlID0gbWltZVswXVxuICAgIH1cbiAgfVxuXG4gIGlmIChfaWNvbkV4aXN0c0luTWFwKGRhdGFUeXBlcywgX21hcCkpIHtcbiAgICBpY29uID0gX2dldChfbWFwLCBfZm9ybWF0QXR0cmlidXRlKGRhdGFUeXBlc1swXSksIF9kZWZhdWx0KVxuICB9IGVsc2UgaWYgKF9pY29uRXhpc3RzSW5NYXAobWV0YWNhcmRUeXBlLCBfbWFwKSkge1xuICAgIGljb24gPSBfZ2V0KF9tYXAsIG1ldGFjYXJkVHlwZSwgX2RlZmF1bHQpXG4gIH0gZWxzZSBpZiAoX2ljb25FeGlzdHNJbk1hcChjb250ZW50VHlwZSwgX21hcCkpIHtcbiAgICBpY29uID0gX2dldChfbWFwLCBjb250ZW50VHlwZSwgX2RlZmF1bHQpXG4gIH0gZWxzZSBpZiAoX2ljb25FeGlzdHNJbk1hcChtaW1lVHlwZSwgX21pbWVNYXApKSB7XG4gICAgaWNvbiA9IF9nZXQoX21pbWVNYXAsIG1pbWVUeXBlLCBfZGVmYXVsdClcbiAgfVxuICBpZiAobWV0YWNhcmRUeXBlID09PSAnbWV0YWNhcmQucXVlcnknKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzOiAnZmEgZmEtc2VhcmNoJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGNvZGU6ICdmMDAyJyxcbiAgICAgICAgZm9udDogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgc2l6ZTogJzEycHgnLFxuICAgICAgfSxcbiAgICB9XG4gIH1cbiAgaWYgKCFpY29uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzOiAnZmEgZmEtcXVlc3Rpb24nLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgY29kZTogJ2YxMjgnLFxuICAgICAgICBmb250OiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICBzaXplOiAnMTJweCcsXG4gICAgICB9LFxuICAgIH1cbiAgfVxuICByZXR1cm4gaWNvblxufVxuXG4vKiBGaW5kIHRoZSBjb3JyZWN0IGljb24gYnkgaWNvbiBuYW1lLiAqL1xuZnVuY3Rpb24gX2Rlcml2ZUljb25CeU5hbWUobmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBfZ2V0KF9tYXAsIF9mb3JtYXRBdHRyaWJ1dGUobmFtZSksIF9kZWZhdWx0KVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldENsYXNzQnlNZXRhY2FyZE9iamVjdChtZXRhY2FyZDogTGF6eVF1ZXJ5UmVzdWx0WydwbGFpbiddKSB7XG4gICAgY29uc3QgaSA9IF9kZXJpdmVJY29uQnlNZXRhY2FyZE9iamVjdChtZXRhY2FyZClcbiAgICByZXR1cm4gX2dldChpLCAnY2xhc3MnLCBfZGVmYXVsdC5jbGFzcylcbiAgfSxcbiAgZ2V0RnVsbEJ5TWV0YWNhcmRPYmplY3QobWV0YWNhcmQ6IExhenlRdWVyeVJlc3VsdFsncGxhaW4nXSkge1xuICAgIGNvbnN0IGkgPSBfZGVyaXZlSWNvbkJ5TWV0YWNhcmRPYmplY3QobWV0YWNhcmQpXG4gICAgcmV0dXJuIGkgIT09IHVuZGVmaW5lZCA/IGkgOiBfZGVmYXVsdFxuICB9LFxuICBnZXRDbGFzc0J5TmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpID0gX2Rlcml2ZUljb25CeU5hbWUobmFtZSlcbiAgICByZXR1cm4gX2dldChpLCAnY2xhc3MnLCBfZGVmYXVsdD8uY2xhc3MpXG4gIH0sXG59XG4iXX0=