/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
/*jshint bitwise: false*/
var EARTH_MEAN_RADIUS_METERS = 6371008.7714;
var DEGREES_TO_RADIANS = Math.PI / 180;
var RADIANS_TO_DEGREES = 1 / DEGREES_TO_RADIANS;
var METERS_KILOMETERS = 1000;
var METERS_FEET = 0.3048;
var METERS_YARDS = 0.9144;
var METERS_MILES = 1609.344;
var METERS_NAUTICAL_MILES = 1852;
/* 6 Digits of precision used because it gives precision up to
0.11 meters, which was deemed precise enough for any use case
of application */
var DECIMAL_PRECISION = 6;
export var DistanceUtils = {
    distToDegrees: function (distanceInMeters) {
        return this.toDegrees(this.distToRadians(distanceInMeters));
    },
    distToRadians: function (distanceInMeters) {
        return distanceInMeters / EARTH_MEAN_RADIUS_METERS;
    },
    toDegrees: function (distanceInRadians) {
        return distanceInRadians * RADIANS_TO_DEGREES;
    },
    getDistanceInMeters: function (distance, units) {
        distance = distance || 0;
        switch (units) {
            case 'kilometers':
                return distance * METERS_KILOMETERS;
            case 'feet':
                return distance * METERS_FEET;
            case 'yards':
                return distance * METERS_YARDS;
            case 'miles':
                return distance * METERS_MILES;
            case 'nautical miles':
                return distance * METERS_NAUTICAL_MILES;
            case 'meters':
            default:
                return Number(distance);
        }
    },
    getDistanceFromMeters: function (distance, units) {
        distance = distance || 0;
        switch (units) {
            case 'kilometers':
                return distance / METERS_KILOMETERS;
            case 'feet':
                return distance / METERS_FEET;
            case 'yards':
                return distance / METERS_YARDS;
            case 'miles':
                return distance / METERS_MILES;
            case 'nautical miles':
                return distance / METERS_NAUTICAL_MILES;
            case 'meters':
            default:
                return distance;
        }
    },
    altitudeRound: function (value) {
        // round the value, don't need picometer precision.
        return Math.round(value);
    },
    coordinateRound: function (value) {
        return parseFloat(parseFloat(value.toString()).toFixed(DECIMAL_PRECISION));
    },
};
export default DistanceUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlzdGFuY2VVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9qcy9EaXN0YW5jZVV0aWxzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBRUoseUJBQXlCO0FBRXpCLElBQU0sd0JBQXdCLEdBQUcsWUFBWSxDQUFBO0FBRTdDLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUE7QUFDeEMsSUFBTSxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsa0JBQWtCLENBQUE7QUFFakQsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUE7QUFDOUIsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFBO0FBQzFCLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQTtBQUMzQixJQUFNLFlBQVksR0FBRyxRQUFRLENBQUE7QUFDN0IsSUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUE7QUFFbEM7O2lCQUVpQjtBQUNqQixJQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQTtBQVUzQixNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUc7SUFDM0IsYUFBYSxZQUFDLGdCQUF3QjtRQUNwQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUE7SUFDN0QsQ0FBQztJQUNELGFBQWEsWUFBQyxnQkFBd0I7UUFDcEMsT0FBTyxnQkFBZ0IsR0FBRyx3QkFBd0IsQ0FBQTtJQUNwRCxDQUFDO0lBQ0QsU0FBUyxZQUFDLGlCQUF5QjtRQUNqQyxPQUFPLGlCQUFpQixHQUFHLGtCQUFrQixDQUFBO0lBQy9DLENBQUM7SUFDRCxtQkFBbUIsWUFBQyxRQUFnQixFQUFFLEtBQWdCO1FBQ3BELFFBQVEsR0FBRyxRQUFRLElBQUksQ0FBQyxDQUFBO1FBQ3hCLFFBQVEsS0FBSyxFQUFFLENBQUM7WUFDZCxLQUFLLFlBQVk7Z0JBQ2YsT0FBTyxRQUFRLEdBQUcsaUJBQWlCLENBQUE7WUFDckMsS0FBSyxNQUFNO2dCQUNULE9BQU8sUUFBUSxHQUFHLFdBQVcsQ0FBQTtZQUMvQixLQUFLLE9BQU87Z0JBQ1YsT0FBTyxRQUFRLEdBQUcsWUFBWSxDQUFBO1lBQ2hDLEtBQUssT0FBTztnQkFDVixPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUE7WUFDaEMsS0FBSyxnQkFBZ0I7Z0JBQ25CLE9BQU8sUUFBUSxHQUFHLHFCQUFxQixDQUFBO1lBQ3pDLEtBQUssUUFBUSxDQUFDO1lBQ2Q7Z0JBQ0UsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDM0IsQ0FBQztJQUNILENBQUM7SUFDRCxxQkFBcUIsWUFBQyxRQUFnQixFQUFFLEtBQWdCO1FBQ3RELFFBQVEsR0FBRyxRQUFRLElBQUksQ0FBQyxDQUFBO1FBQ3hCLFFBQVEsS0FBSyxFQUFFLENBQUM7WUFDZCxLQUFLLFlBQVk7Z0JBQ2YsT0FBTyxRQUFRLEdBQUcsaUJBQWlCLENBQUE7WUFDckMsS0FBSyxNQUFNO2dCQUNULE9BQU8sUUFBUSxHQUFHLFdBQVcsQ0FBQTtZQUMvQixLQUFLLE9BQU87Z0JBQ1YsT0FBTyxRQUFRLEdBQUcsWUFBWSxDQUFBO1lBQ2hDLEtBQUssT0FBTztnQkFDVixPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUE7WUFDaEMsS0FBSyxnQkFBZ0I7Z0JBQ25CLE9BQU8sUUFBUSxHQUFHLHFCQUFxQixDQUFBO1lBQ3pDLEtBQUssUUFBUSxDQUFDO1lBQ2Q7Z0JBQ0UsT0FBTyxRQUFRLENBQUE7UUFDbkIsQ0FBQztJQUNILENBQUM7SUFDRCxhQUFhLFlBQUMsS0FBYTtRQUN6QixtREFBbUQ7UUFDbkQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzFCLENBQUM7SUFDRCxlQUFlLFlBQUMsS0FBc0I7UUFDcEMsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUE7SUFDNUUsQ0FBQztDQUNGLENBQUE7QUFFRCxlQUFlLGFBQWEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBDb2RpY2UgRm91bmRhdGlvblxuICpcbiAqIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXJcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlXG4gKiBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0XG4gKiBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuIEEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBpcyBkaXN0cmlidXRlZCBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbSBhbmQgY2FuIGJlIGZvdW5kIGF0XG4gKiA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2xncGwuaHRtbD4uXG4gKlxuICoqL1xuXG4vKmpzaGludCBiaXR3aXNlOiBmYWxzZSovXG5cbmNvbnN0IEVBUlRIX01FQU5fUkFESVVTX01FVEVSUyA9IDYzNzEwMDguNzcxNFxuXG5jb25zdCBERUdSRUVTX1RPX1JBRElBTlMgPSBNYXRoLlBJIC8gMTgwXG5jb25zdCBSQURJQU5TX1RPX0RFR1JFRVMgPSAxIC8gREVHUkVFU19UT19SQURJQU5TXG5cbmNvbnN0IE1FVEVSU19LSUxPTUVURVJTID0gMTAwMFxuY29uc3QgTUVURVJTX0ZFRVQgPSAwLjMwNDhcbmNvbnN0IE1FVEVSU19ZQVJEUyA9IDAuOTE0NFxuY29uc3QgTUVURVJTX01JTEVTID0gMTYwOS4zNDRcbmNvbnN0IE1FVEVSU19OQVVUSUNBTF9NSUxFUyA9IDE4NTJcblxuLyogNiBEaWdpdHMgb2YgcHJlY2lzaW9uIHVzZWQgYmVjYXVzZSBpdCBnaXZlcyBwcmVjaXNpb24gdXAgdG8gXG4wLjExIG1ldGVycywgd2hpY2ggd2FzIGRlZW1lZCBwcmVjaXNlIGVub3VnaCBmb3IgYW55IHVzZSBjYXNlIFxub2YgYXBwbGljYXRpb24gKi9cbmNvbnN0IERFQ0lNQUxfUFJFQ0lTSU9OID0gNlxuXG50eXBlIFVuaXRzVHlwZSA9XG4gIHwgJ2tpbG9tZXRlcnMnXG4gIHwgJ2ZlZXQnXG4gIHwgJ3lhcmRzJ1xuICB8ICdtaWxlcydcbiAgfCAnbmF1dGljYWwgbWlsZXMnXG4gIHwgJ21ldGVycydcblxuZXhwb3J0IGNvbnN0IERpc3RhbmNlVXRpbHMgPSB7XG4gIGRpc3RUb0RlZ3JlZXMoZGlzdGFuY2VJbk1ldGVyczogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMudG9EZWdyZWVzKHRoaXMuZGlzdFRvUmFkaWFucyhkaXN0YW5jZUluTWV0ZXJzKSlcbiAgfSxcbiAgZGlzdFRvUmFkaWFucyhkaXN0YW5jZUluTWV0ZXJzOiBudW1iZXIpIHtcbiAgICByZXR1cm4gZGlzdGFuY2VJbk1ldGVycyAvIEVBUlRIX01FQU5fUkFESVVTX01FVEVSU1xuICB9LFxuICB0b0RlZ3JlZXMoZGlzdGFuY2VJblJhZGlhbnM6IG51bWJlcikge1xuICAgIHJldHVybiBkaXN0YW5jZUluUmFkaWFucyAqIFJBRElBTlNfVE9fREVHUkVFU1xuICB9LFxuICBnZXREaXN0YW5jZUluTWV0ZXJzKGRpc3RhbmNlOiBudW1iZXIsIHVuaXRzOiBVbml0c1R5cGUpIHtcbiAgICBkaXN0YW5jZSA9IGRpc3RhbmNlIHx8IDBcbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICBjYXNlICdraWxvbWV0ZXJzJzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlICogTUVURVJTX0tJTE9NRVRFUlNcbiAgICAgIGNhc2UgJ2ZlZXQnOlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgKiBNRVRFUlNfRkVFVFxuICAgICAgY2FzZSAneWFyZHMnOlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgKiBNRVRFUlNfWUFSRFNcbiAgICAgIGNhc2UgJ21pbGVzJzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlICogTUVURVJTX01JTEVTXG4gICAgICBjYXNlICduYXV0aWNhbCBtaWxlcyc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZSAqIE1FVEVSU19OQVVUSUNBTF9NSUxFU1xuICAgICAgY2FzZSAnbWV0ZXJzJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBOdW1iZXIoZGlzdGFuY2UpXG4gICAgfVxuICB9LFxuICBnZXREaXN0YW5jZUZyb21NZXRlcnMoZGlzdGFuY2U6IG51bWJlciwgdW5pdHM6IFVuaXRzVHlwZSkge1xuICAgIGRpc3RhbmNlID0gZGlzdGFuY2UgfHwgMFxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgIGNhc2UgJ2tpbG9tZXRlcnMnOlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgLyBNRVRFUlNfS0lMT01FVEVSU1xuICAgICAgY2FzZSAnZmVldCc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZSAvIE1FVEVSU19GRUVUXG4gICAgICBjYXNlICd5YXJkcyc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZSAvIE1FVEVSU19ZQVJEU1xuICAgICAgY2FzZSAnbWlsZXMnOlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgLyBNRVRFUlNfTUlMRVNcbiAgICAgIGNhc2UgJ25hdXRpY2FsIG1pbGVzJzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlIC8gTUVURVJTX05BVVRJQ0FMX01JTEVTXG4gICAgICBjYXNlICdtZXRlcnMnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlXG4gICAgfVxuICB9LFxuICBhbHRpdHVkZVJvdW5kKHZhbHVlOiBudW1iZXIpIHtcbiAgICAvLyByb3VuZCB0aGUgdmFsdWUsIGRvbid0IG5lZWQgcGljb21ldGVyIHByZWNpc2lvbi5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSlcbiAgfSxcbiAgY29vcmRpbmF0ZVJvdW5kKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChwYXJzZUZsb2F0KHZhbHVlLnRvU3RyaW5nKCkpLnRvRml4ZWQoREVDSU1BTF9QUkVDSVNJT04pKVxuICB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCBEaXN0YW5jZVV0aWxzXG4iXX0=