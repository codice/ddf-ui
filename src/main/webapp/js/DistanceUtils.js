/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
/*jshint bitwise: false*/
var EARTH_MEAN_RADIUS_METERS = 6371008.7714;
var DEGREES_TO_RADIANS = Math.PI / 180;
var RADIANS_TO_DEGREES = 1 / DEGREES_TO_RADIANS;
var METERS_KILOMETERS = 1000;
var METERS_FEET = 0.3048;
var METERS_YARDS = 0.9144;
var METERS_MILES = 1609.344;
var METERS_NAUTICAL_MILES = 1852;
/* 6 Digits of precision used because it gives precision up to
0.11 meters, which was deemed precise enough for any use case
of application */
var DECIMAL_PRECISION = 6;
export var DistanceUtils = {
    distToDegrees: function (distanceInMeters) {
        return this.toDegrees(this.distToRadians(distanceInMeters));
    },
    distToRadians: function (distanceInMeters) {
        return distanceInMeters / EARTH_MEAN_RADIUS_METERS;
    },
    toDegrees: function (distanceInRadians) {
        return distanceInRadians * RADIANS_TO_DEGREES;
    },
    getDistanceInMeters: function (distance, units) {
        distance = distance || 0;
        switch (units) {
            case 'kilometers':
                return distance * METERS_KILOMETERS;
            case 'feet':
                return distance * METERS_FEET;
            case 'yards':
                return distance * METERS_YARDS;
            case 'miles':
                return distance * METERS_MILES;
            case 'nautical miles':
                return distance * METERS_NAUTICAL_MILES;
            case 'meters':
            default:
                return Number(distance);
        }
    },
    getDistanceFromMeters: function (distance, units) {
        distance = distance || 0;
        switch (units) {
            case 'kilometers':
                return distance / METERS_KILOMETERS;
            case 'feet':
                return distance / METERS_FEET;
            case 'yards':
                return distance / METERS_YARDS;
            case 'miles':
                return distance / METERS_MILES;
            case 'nautical miles':
                return distance / METERS_NAUTICAL_MILES;
            case 'meters':
            default:
                return distance;
        }
    },
    altitudeRound: function (value) {
        // round the value, don't need picometer precision.
        return Math.round(value);
    },
    coordinateRound: function (value) {
        return parseFloat(parseFloat(value.toString()).toFixed(DECIMAL_PRECISION));
    },
};
export default DistanceUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlzdGFuY2VVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9qcy9EaXN0YW5jZVV0aWxzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBRUoseUJBQXlCO0FBRXpCLElBQU0sd0JBQXdCLEdBQUcsWUFBWSxDQUFBO0FBRTdDLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUE7QUFDeEMsSUFBTSxrQkFBa0IsR0FBRyxDQUFDLEdBQUcsa0JBQWtCLENBQUE7QUFFakQsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUE7QUFDOUIsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFBO0FBQzFCLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQTtBQUMzQixJQUFNLFlBQVksR0FBRyxRQUFRLENBQUE7QUFDN0IsSUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUE7QUFFbEM7O2lCQUVpQjtBQUNqQixJQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQTtBQVUzQixNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUc7SUFDM0IsYUFBYSxZQUFDLGdCQUF3QjtRQUNwQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUE7SUFDN0QsQ0FBQztJQUNELGFBQWEsWUFBQyxnQkFBd0I7UUFDcEMsT0FBTyxnQkFBZ0IsR0FBRyx3QkFBd0IsQ0FBQTtJQUNwRCxDQUFDO0lBQ0QsU0FBUyxZQUFDLGlCQUF5QjtRQUNqQyxPQUFPLGlCQUFpQixHQUFHLGtCQUFrQixDQUFBO0lBQy9DLENBQUM7SUFDRCxtQkFBbUIsWUFBQyxRQUFnQixFQUFFLEtBQWdCO1FBQ3BELFFBQVEsR0FBRyxRQUFRLElBQUksQ0FBQyxDQUFBO1FBQ3hCLFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FBSyxZQUFZO2dCQUNmLE9BQU8sUUFBUSxHQUFHLGlCQUFpQixDQUFBO1lBQ3JDLEtBQUssTUFBTTtnQkFDVCxPQUFPLFFBQVEsR0FBRyxXQUFXLENBQUE7WUFDL0IsS0FBSyxPQUFPO2dCQUNWLE9BQU8sUUFBUSxHQUFHLFlBQVksQ0FBQTtZQUNoQyxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxRQUFRLEdBQUcsWUFBWSxDQUFBO1lBQ2hDLEtBQUssZ0JBQWdCO2dCQUNuQixPQUFPLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQTtZQUN6QyxLQUFLLFFBQVEsQ0FBQztZQUNkO2dCQUNFLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQzFCO0lBQ0gsQ0FBQztJQUNELHFCQUFxQixZQUFDLFFBQWdCLEVBQUUsS0FBZ0I7UUFDdEQsUUFBUSxHQUFHLFFBQVEsSUFBSSxDQUFDLENBQUE7UUFDeEIsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLFlBQVk7Z0JBQ2YsT0FBTyxRQUFRLEdBQUcsaUJBQWlCLENBQUE7WUFDckMsS0FBSyxNQUFNO2dCQUNULE9BQU8sUUFBUSxHQUFHLFdBQVcsQ0FBQTtZQUMvQixLQUFLLE9BQU87Z0JBQ1YsT0FBTyxRQUFRLEdBQUcsWUFBWSxDQUFBO1lBQ2hDLEtBQUssT0FBTztnQkFDVixPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUE7WUFDaEMsS0FBSyxnQkFBZ0I7Z0JBQ25CLE9BQU8sUUFBUSxHQUFHLHFCQUFxQixDQUFBO1lBQ3pDLEtBQUssUUFBUSxDQUFDO1lBQ2Q7Z0JBQ0UsT0FBTyxRQUFRLENBQUE7U0FDbEI7SUFDSCxDQUFDO0lBQ0QsYUFBYSxZQUFDLEtBQWE7UUFDekIsbURBQW1EO1FBQ25ELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUMxQixDQUFDO0lBQ0QsZUFBZSxZQUFDLEtBQXNCO1FBQ3BDLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFBO0lBQzVFLENBQUM7Q0FDRixDQUFBO0FBRUQsZUFBZSxhQUFhLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cblxuLypqc2hpbnQgYml0d2lzZTogZmFsc2UqL1xuXG5jb25zdCBFQVJUSF9NRUFOX1JBRElVU19NRVRFUlMgPSA2MzcxMDA4Ljc3MTRcblxuY29uc3QgREVHUkVFU19UT19SQURJQU5TID0gTWF0aC5QSSAvIDE4MFxuY29uc3QgUkFESUFOU19UT19ERUdSRUVTID0gMSAvIERFR1JFRVNfVE9fUkFESUFOU1xuXG5jb25zdCBNRVRFUlNfS0lMT01FVEVSUyA9IDEwMDBcbmNvbnN0IE1FVEVSU19GRUVUID0gMC4zMDQ4XG5jb25zdCBNRVRFUlNfWUFSRFMgPSAwLjkxNDRcbmNvbnN0IE1FVEVSU19NSUxFUyA9IDE2MDkuMzQ0XG5jb25zdCBNRVRFUlNfTkFVVElDQUxfTUlMRVMgPSAxODUyXG5cbi8qIDYgRGlnaXRzIG9mIHByZWNpc2lvbiB1c2VkIGJlY2F1c2UgaXQgZ2l2ZXMgcHJlY2lzaW9uIHVwIHRvIFxuMC4xMSBtZXRlcnMsIHdoaWNoIHdhcyBkZWVtZWQgcHJlY2lzZSBlbm91Z2ggZm9yIGFueSB1c2UgY2FzZSBcbm9mIGFwcGxpY2F0aW9uICovXG5jb25zdCBERUNJTUFMX1BSRUNJU0lPTiA9IDZcblxudHlwZSBVbml0c1R5cGUgPVxuICB8ICdraWxvbWV0ZXJzJ1xuICB8ICdmZWV0J1xuICB8ICd5YXJkcydcbiAgfCAnbWlsZXMnXG4gIHwgJ25hdXRpY2FsIG1pbGVzJ1xuICB8ICdtZXRlcnMnXG5cbmV4cG9ydCBjb25zdCBEaXN0YW5jZVV0aWxzID0ge1xuICBkaXN0VG9EZWdyZWVzKGRpc3RhbmNlSW5NZXRlcnM6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLnRvRGVncmVlcyh0aGlzLmRpc3RUb1JhZGlhbnMoZGlzdGFuY2VJbk1ldGVycykpXG4gIH0sXG4gIGRpc3RUb1JhZGlhbnMoZGlzdGFuY2VJbk1ldGVyczogbnVtYmVyKSB7XG4gICAgcmV0dXJuIGRpc3RhbmNlSW5NZXRlcnMgLyBFQVJUSF9NRUFOX1JBRElVU19NRVRFUlNcbiAgfSxcbiAgdG9EZWdyZWVzKGRpc3RhbmNlSW5SYWRpYW5zOiBudW1iZXIpIHtcbiAgICByZXR1cm4gZGlzdGFuY2VJblJhZGlhbnMgKiBSQURJQU5TX1RPX0RFR1JFRVNcbiAgfSxcbiAgZ2V0RGlzdGFuY2VJbk1ldGVycyhkaXN0YW5jZTogbnVtYmVyLCB1bml0czogVW5pdHNUeXBlKSB7XG4gICAgZGlzdGFuY2UgPSBkaXN0YW5jZSB8fCAwXG4gICAgc3dpdGNoICh1bml0cykge1xuICAgICAgY2FzZSAna2lsb21ldGVycyc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZSAqIE1FVEVSU19LSUxPTUVURVJTXG4gICAgICBjYXNlICdmZWV0JzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlICogTUVURVJTX0ZFRVRcbiAgICAgIGNhc2UgJ3lhcmRzJzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlICogTUVURVJTX1lBUkRTXG4gICAgICBjYXNlICdtaWxlcyc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZSAqIE1FVEVSU19NSUxFU1xuICAgICAgY2FzZSAnbmF1dGljYWwgbWlsZXMnOlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgKiBNRVRFUlNfTkFVVElDQUxfTUlMRVNcbiAgICAgIGNhc2UgJ21ldGVycyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gTnVtYmVyKGRpc3RhbmNlKVxuICAgIH1cbiAgfSxcbiAgZ2V0RGlzdGFuY2VGcm9tTWV0ZXJzKGRpc3RhbmNlOiBudW1iZXIsIHVuaXRzOiBVbml0c1R5cGUpIHtcbiAgICBkaXN0YW5jZSA9IGRpc3RhbmNlIHx8IDBcbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICBjYXNlICdraWxvbWV0ZXJzJzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlIC8gTUVURVJTX0tJTE9NRVRFUlNcbiAgICAgIGNhc2UgJ2ZlZXQnOlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgLyBNRVRFUlNfRkVFVFxuICAgICAgY2FzZSAneWFyZHMnOlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgLyBNRVRFUlNfWUFSRFNcbiAgICAgIGNhc2UgJ21pbGVzJzpcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlIC8gTUVURVJTX01JTEVTXG4gICAgICBjYXNlICduYXV0aWNhbCBtaWxlcyc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZSAvIE1FVEVSU19OQVVUSUNBTF9NSUxFU1xuICAgICAgY2FzZSAnbWV0ZXJzJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZVxuICAgIH1cbiAgfSxcbiAgYWx0aXR1ZGVSb3VuZCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgLy8gcm91bmQgdGhlIHZhbHVlLCBkb24ndCBuZWVkIHBpY29tZXRlciBwcmVjaXNpb24uXG4gICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUpXG4gIH0sXG4gIGNvb3JkaW5hdGVSb3VuZCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQocGFyc2VGbG9hdCh2YWx1ZS50b1N0cmluZygpKS50b0ZpeGVkKERFQ0lNQUxfUFJFQ0lTSU9OKSlcbiAgfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGlzdGFuY2VVdGlsc1xuIl19