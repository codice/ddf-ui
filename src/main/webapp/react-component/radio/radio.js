import { __makeTemplateObject } from "tslib";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import React from 'react';
import styled from 'styled-components';
import { readableColor, rgba } from 'polished';
// @ts-expect-error ts-migrate(7030) FIXME: Not all code paths return a value.
var foreground = function (props) {
    if (props.theme.backgroundDropdown !== undefined) {
        return readableColor(props.theme.backgroundDropdown);
    }
};
// @ts-expect-error ts-migrate(7030) FIXME: Not all code paths return a value.
var background = function (props, alpha) {
    if (alpha === void 0) { alpha = 0.4; }
    if (props.theme.backgroundDropdown !== undefined) {
        return rgba(readableColor(props.theme.backgroundDropdown), alpha);
    }
};
var Root = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  border-radius: ", ";\n  white-space: nowrap;\n  background-color: inherit;\n  border: 1px solid ", ";\n  display: inline-block;\n"], ["\n  border-radius: ", ";\n  white-space: nowrap;\n  background-color: inherit;\n  border: 1px solid ", ";\n  display: inline-block;\n"])), function (props) { return props.theme.borderRadius; }, background);
var Button = styled.button(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  vertical-align: top;\n  opacity: ", ";\n  min-width: ", ";\n  min-height: ", ";\n  border: none;\n  border-left: ", ";\n  background-color: inherit;\n  padding: 0px 10px;\n  cursor: pointer;\n  font-size: ", ";\n  color: ", ";\n  ", ";\n"], ["\n  vertical-align: top;\n  opacity: ", ";\n  min-width: ", ";\n  min-height: ", ";\n  border: none;\n  border-left: ", ";\n  background-color: inherit;\n  padding: 0px 10px;\n  cursor: pointer;\n  font-size: ", ";\n  color: ", ";\n  ", ";\n"])), function (props) { return props.theme.minimumOpacity; }, function (props) { return props.theme.minimumButtonSize; }, function (props) { return props.theme.minimumButtonSize; }, function (props) {
    return !props.first ? '1px solid ' + background(props) : 'none';
}, function (props) { return props.theme.minimumFontSize; }, foreground, function (props) {
    return props.selected
        ? "\n    opacity: 1;\n    font-weight: bolder;\n    background: ".concat(background(props, 0.1), ";\n  ")
        : '';
});
var Radio = function (props) {
    var value = props.value, children = props.children, onChange = props.onChange;
    var childrenWithProps = React.Children.map(children, function (child, i) {
        // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
        return React.cloneElement(child, {
            first: i === 0,
            selected: value === child.props.value,
            // @ts-expect-error ts-migrate(2722) FIXME: Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message
            onClick: function () { return onChange(child.props.value); },
        });
    });
    return React.createElement(Root, null, childrenWithProps);
};
var RadioItem = function (props) {
    // @ts-expect-error ts-migrate(2339) FIXME: Property 'first' does not exist on type 'RadioItem... Remove this comment to see the full error message
    var value = props.value, first = props.first, children = props.children, selected = props.selected, onClick = props.onClick;
    return (React.createElement(Button, { first: first, selected: selected, onClick: function () { return onClick(value); } }, children || value));
};
export { Radio, RadioItem };
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWFpbi93ZWJhcHAvcmVhY3QtY29tcG9uZW50L3JhZGlvL3JhZGlvLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7SUFhSTtBQUNKLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUN6QixPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQTtBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUM5Qyw4RUFBOEU7QUFDOUUsSUFBTSxVQUFVLEdBQUcsVUFBQyxLQUFVO0lBQzVCLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7UUFDaEQsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0tBQ3JEO0FBQ0gsQ0FBQyxDQUFBO0FBQ0QsOEVBQThFO0FBQzlFLElBQU0sVUFBVSxHQUFHLFVBQUMsS0FBVSxFQUFFLEtBQVc7SUFBWCxzQkFBQSxFQUFBLFdBQVc7SUFDekMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLGtCQUFrQixLQUFLLFNBQVMsRUFBRTtRQUNoRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0tBQ2xFO0FBQ0gsQ0FBQyxDQUFBO0FBQ0QsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsME1BQUEscUJBQ0osRUFBbUMsK0VBR2hDLEVBQVUsK0JBRS9CLEtBTGtCLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQXhCLENBQXdCLEVBR2hDLFVBQVUsQ0FFL0IsQ0FBQTtBQUNELElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLHNUQUF1Qyx1Q0FFdEQsRUFBcUMsa0JBQ25DLEVBQXdDLG1CQUN2QyxFQUF3QyxxQ0FFdkMsRUFDb0QsMEZBSXRELEVBQXNDLGNBQzFDLEVBQVUsT0FDakIsRUFPTSxLQUNULEtBbkJZLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQTFCLENBQTBCLEVBQ25DLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBN0IsQ0FBNkIsRUFDdkMsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUE3QixDQUE2QixFQUV2QyxVQUFDLEtBQUs7SUFDbkIsT0FBQSxDQUFFLEtBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07QUFBakUsQ0FBaUUsRUFJdEQsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBM0IsQ0FBMkIsRUFDMUMsVUFBVSxFQUNqQixVQUFDLEtBQUs7SUFDTixPQUFDLEtBQWEsQ0FBQyxRQUFRO1FBQ3JCLENBQUMsQ0FBQyx1RUFHVSxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxVQUNyQztRQUNHLENBQUMsQ0FBQyxFQUFFO0FBTk4sQ0FNTSxDQUNULENBQUE7QUFNRCxJQUFNLEtBQUssR0FBRyxVQUFDLEtBQWlCO0lBQ3RCLElBQUEsS0FBSyxHQUF5QixLQUFLLE1BQTlCLEVBQUUsUUFBUSxHQUFlLEtBQUssU0FBcEIsRUFBRSxRQUFRLEdBQUssS0FBSyxTQUFWLENBQVU7SUFDM0MsSUFBTSxpQkFBaUIsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBQyxLQUFLLEVBQUUsQ0FBQztRQUM5RCwwRUFBMEU7UUFDMUUsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRTtZQUMvQixLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDZCxRQUFRLEVBQUUsS0FBSyxLQUFNLEtBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSztZQUM5QyxtSkFBbUo7WUFDbkosT0FBTyxFQUFFLGNBQU0sT0FBQSxRQUFRLENBQUUsS0FBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBcEMsQ0FBb0M7U0FDcEQsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFDRixPQUFPLG9CQUFDLElBQUksUUFBRSxpQkFBaUIsQ0FBUSxDQUFBO0FBQ3pDLENBQUMsQ0FBQTtBQUtELElBQU0sU0FBUyxHQUFHLFVBQUMsS0FBcUI7SUFDdEMsbUpBQW1KO0lBQzNJLElBQUEsS0FBSyxHQUF5QyxLQUFLLE1BQTlDLEVBQUUsS0FBSyxHQUFrQyxLQUFLLE1BQXZDLEVBQUUsUUFBUSxHQUF3QixLQUFLLFNBQTdCLEVBQUUsUUFBUSxHQUFjLEtBQUssU0FBbkIsRUFBRSxPQUFPLEdBQUssS0FBSyxRQUFWLENBQVU7SUFDM0QsT0FBTyxDQUNMLG9CQUFDLE1BQU0sSUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLGNBQU0sT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQWQsQ0FBYyxJQUNwRSxRQUFRLElBQUksS0FBSyxDQUNYLENBQ1YsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyByZWFkYWJsZUNvbG9yLCByZ2JhIH0gZnJvbSAncG9saXNoZWQnXG4vLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoNzAzMCkgRklYTUU6IE5vdCBhbGwgY29kZSBwYXRocyByZXR1cm4gYSB2YWx1ZS5cbmNvbnN0IGZvcmVncm91bmQgPSAocHJvcHM6IGFueSkgPT4ge1xuICBpZiAocHJvcHMudGhlbWUuYmFja2dyb3VuZERyb3Bkb3duICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVhZGFibGVDb2xvcihwcm9wcy50aGVtZS5iYWNrZ3JvdW5kRHJvcGRvd24pXG4gIH1cbn1cbi8vIEB0cy1leHBlY3QtZXJyb3IgdHMtbWlncmF0ZSg3MDMwKSBGSVhNRTogTm90IGFsbCBjb2RlIHBhdGhzIHJldHVybiBhIHZhbHVlLlxuY29uc3QgYmFja2dyb3VuZCA9IChwcm9wczogYW55LCBhbHBoYSA9IDAuNCkgPT4ge1xuICBpZiAocHJvcHMudGhlbWUuYmFja2dyb3VuZERyb3Bkb3duICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmdiYShyZWFkYWJsZUNvbG9yKHByb3BzLnRoZW1lLmJhY2tncm91bmREcm9wZG93biksIGFscGhhKVxuICB9XG59XG5jb25zdCBSb290ID0gc3R5bGVkLmRpdmBcbiAgYm9yZGVyLXJhZGl1czogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmJvcmRlclJhZGl1c307XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7YmFja2dyb3VuZH07XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbmBcbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5idXR0b248eyBmaXJzdDogYm9vbGVhbjsgc2VsZWN0ZWQ6IGJvb2xlYW4gfT5gXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIG9wYWNpdHk6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5taW5pbXVtT3BhY2l0eX07XG4gIG1pbi13aWR0aDogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLm1pbmltdW1CdXR0b25TaXplfTtcbiAgbWluLWhlaWdodDogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLm1pbmltdW1CdXR0b25TaXplfTtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItbGVmdDogJHsocHJvcHMpID0+XG4gICAgIShwcm9wcyBhcyBhbnkpLmZpcnN0ID8gJzFweCBzb2xpZCAnICsgYmFja2dyb3VuZChwcm9wcykgOiAnbm9uZSd9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xuICBwYWRkaW5nOiAwcHggMTBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXNpemU6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5taW5pbXVtRm9udFNpemV9O1xuICBjb2xvcjogJHtmb3JlZ3JvdW5kfTtcbiAgJHsocHJvcHMpID0+XG4gICAgKHByb3BzIGFzIGFueSkuc2VsZWN0ZWRcbiAgICAgID8gYFxuICAgIG9wYWNpdHk6IDE7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgICBiYWNrZ3JvdW5kOiAke2JhY2tncm91bmQocHJvcHMsIDAuMSl9O1xuICBgXG4gICAgICA6ICcnfTtcbmBcbnR5cGUgUmFkaW9Qcm9wcyA9IHtcbiAgdmFsdWU/OiBzdHJpbmdcbiAgb25DaGFuZ2U/OiAoLi4uYXJnczogYW55W10pID0+IGFueVxuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZVxufVxuY29uc3QgUmFkaW8gPSAocHJvcHM6IFJhZGlvUHJvcHMpID0+IHtcbiAgY29uc3QgeyB2YWx1ZSwgY2hpbGRyZW4sIG9uQ2hhbmdlIH0gPSBwcm9wc1xuICBjb25zdCBjaGlsZHJlbldpdGhQcm9wcyA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBpKSA9PiB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDI3NjkpIEZJWE1FOiBObyBvdmVybG9hZCBtYXRjaGVzIHRoaXMgY2FsbC5cbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBmaXJzdDogaSA9PT0gMCxcbiAgICAgIHNlbGVjdGVkOiB2YWx1ZSA9PT0gKGNoaWxkIGFzIGFueSkucHJvcHMudmFsdWUsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjcyMikgRklYTUU6IENhbm5vdCBpbnZva2UgYW4gb2JqZWN0IHdoaWNoIGlzIHBvc3NpYmx5ICd1bmRlZmluLi4uIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG8gc2VlIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2VcbiAgICAgIG9uQ2xpY2s6ICgpID0+IG9uQ2hhbmdlKChjaGlsZCBhcyBhbnkpLnByb3BzLnZhbHVlKSxcbiAgICB9KVxuICB9KVxuICByZXR1cm4gPFJvb3Q+e2NoaWxkcmVuV2l0aFByb3BzfTwvUm9vdD5cbn1cbnR5cGUgUmFkaW9JdGVtUHJvcHMgPSB7XG4gIHZhbHVlPzogc3RyaW5nXG4gIGNoaWxkcmVuPzogYW55XG59XG5jb25zdCBSYWRpb0l0ZW0gPSAocHJvcHM6IFJhZGlvSXRlbVByb3BzKSA9PiB7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgdHMtbWlncmF0ZSgyMzM5KSBGSVhNRTogUHJvcGVydHkgJ2ZpcnN0JyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICdSYWRpb0l0ZW0uLi4gUmVtb3ZlIHRoaXMgY29tbWVudCB0byBzZWUgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZVxuICBjb25zdCB7IHZhbHVlLCBmaXJzdCwgY2hpbGRyZW4sIHNlbGVjdGVkLCBvbkNsaWNrIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxCdXR0b24gZmlyc3Q9e2ZpcnN0fSBzZWxlY3RlZD17c2VsZWN0ZWR9IG9uQ2xpY2s9eygpID0+IG9uQ2xpY2sodmFsdWUpfT5cbiAgICAgIHtjaGlsZHJlbiB8fCB2YWx1ZX1cbiAgICA8L0J1dHRvbj5cbiAgKVxufVxuZXhwb3J0IHsgUmFkaW8sIFJhZGlvSXRlbSB9XG4iXX0=