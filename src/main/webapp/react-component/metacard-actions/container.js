import { jsx as _jsx } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import _ from 'underscore';
import MetacardActionsPresentation from './presentation';
import { OverridableGetColumnOrder, aliasMap } from '../utils/export';
var MetacardActions = function (props) {
    var model = props.result;
    var exportActions = _.sortBy(model.getExportActions().map(function (action) { return ({
        url: action.url +
            "&columnOrder=".concat(OverridableGetColumnOrder.get()(), "&aliases=").concat(aliasMap),
        title: action.displayName,
    }); }), function (action) { return action.title.toLowerCase(); });
    var otherActions = _.sortBy(model.getOtherActions().map(function (action) { return ({
        url: action.url,
        title: action.title,
    }); }), function (action) { return action.title.toLowerCase(); });
    return (_jsx(MetacardActionsPresentation, { model: model, exportActions: exportActions, otherActions: otherActions }));
};
export default MetacardActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9tZXRhY2FyZC1hY3Rpb25zL2NvbnRhaW5lci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7QUFFSixPQUFPLENBQUMsTUFBTSxZQUFZLENBQUE7QUFDMUIsT0FBTywyQkFBMkIsTUFBTSxnQkFBZ0IsQ0FBQTtBQUV4RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFNckUsSUFBTSxlQUFlLEdBQUcsVUFBQyxLQUFZO0lBQ25DLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFFMUIsSUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FDNUIsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsQ0FBQztRQUN4QyxHQUFHLEVBQ0QsTUFBTSxDQUFDLEdBQUc7WUFDVix1QkFBZ0IseUJBQXlCLENBQUMsR0FBRyxFQUFFLEVBQUUsc0JBQVksUUFBUSxDQUFFO1FBQ3pFLEtBQUssRUFBRSxNQUFNLENBQUMsV0FBVztLQUMxQixDQUFDLEVBTHVDLENBS3ZDLENBQUMsRUFDSCxVQUFDLE1BQVcsSUFBSyxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQTFCLENBQTBCLENBQzVDLENBQUE7SUFDRCxJQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUMzQixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsQ0FBQztRQUN2QyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7UUFDZixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7S0FDcEIsQ0FBQyxFQUhzQyxDQUd0QyxDQUFDLEVBQ0gsVUFBQyxNQUFXLElBQUssT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUExQixDQUEwQixDQUM1QyxDQUFBO0lBRUQsT0FBTyxDQUNMLEtBQUMsMkJBQTJCLElBQzFCLEtBQUssRUFBRSxLQUFLLEVBQ1osYUFBYSxFQUFFLGFBQWEsRUFDNUIsWUFBWSxFQUFFLFlBQVksR0FDMUIsQ0FDSCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsZUFBZSxlQUFlLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cblxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSdcbmltcG9ydCBNZXRhY2FyZEFjdGlvbnNQcmVzZW50YXRpb24gZnJvbSAnLi9wcmVzZW50YXRpb24nXG5pbXBvcnQgeyBMYXp5UXVlcnlSZXN1bHQgfSBmcm9tICcuLi8uLi9qcy9tb2RlbC9MYXp5UXVlcnlSZXN1bHQvTGF6eVF1ZXJ5UmVzdWx0J1xuaW1wb3J0IHsgT3ZlcnJpZGFibGVHZXRDb2x1bW5PcmRlciwgYWxpYXNNYXAgfSBmcm9tICcuLi91dGlscy9leHBvcnQnXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJlc3VsdDogTGF6eVF1ZXJ5UmVzdWx0XG59XG5cbmNvbnN0IE1ldGFjYXJkQWN0aW9ucyA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgbW9kZWwgPSBwcm9wcy5yZXN1bHRcblxuICBjb25zdCBleHBvcnRBY3Rpb25zID0gXy5zb3J0QnkoXG4gICAgbW9kZWwuZ2V0RXhwb3J0QWN0aW9ucygpLm1hcCgoYWN0aW9uKSA9PiAoe1xuICAgICAgdXJsOlxuICAgICAgICBhY3Rpb24udXJsICtcbiAgICAgICAgYCZjb2x1bW5PcmRlcj0ke092ZXJyaWRhYmxlR2V0Q29sdW1uT3JkZXIuZ2V0KCkoKX0mYWxpYXNlcz0ke2FsaWFzTWFwfWAsXG4gICAgICB0aXRsZTogYWN0aW9uLmRpc3BsYXlOYW1lLFxuICAgIH0pKSxcbiAgICAoYWN0aW9uOiBhbnkpID0+IGFjdGlvbi50aXRsZS50b0xvd2VyQ2FzZSgpXG4gIClcbiAgY29uc3Qgb3RoZXJBY3Rpb25zID0gXy5zb3J0QnkoXG4gICAgbW9kZWwuZ2V0T3RoZXJBY3Rpb25zKCkubWFwKChhY3Rpb24pID0+ICh7XG4gICAgICB1cmw6IGFjdGlvbi51cmwsXG4gICAgICB0aXRsZTogYWN0aW9uLnRpdGxlLFxuICAgIH0pKSxcbiAgICAoYWN0aW9uOiBhbnkpID0+IGFjdGlvbi50aXRsZS50b0xvd2VyQ2FzZSgpXG4gIClcblxuICByZXR1cm4gKFxuICAgIDxNZXRhY2FyZEFjdGlvbnNQcmVzZW50YXRpb25cbiAgICAgIG1vZGVsPXttb2RlbH1cbiAgICAgIGV4cG9ydEFjdGlvbnM9e2V4cG9ydEFjdGlvbnN9XG4gICAgICBvdGhlckFjdGlvbnM9e290aGVyQWN0aW9uc31cbiAgICAvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1ldGFjYXJkQWN0aW9uc1xuIl19