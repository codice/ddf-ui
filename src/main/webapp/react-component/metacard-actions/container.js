/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import { hot } from 'react-hot-loader';
import * as React from 'react';
import _ from 'underscore';
import MetacardActionsPresentation from './presentation';
import { OverridableGetColumnOrder, aliasMap } from '../utils/export';
var MetacardActions = function (props) {
    var model = props.result;
    var exportActions = _.sortBy(model.getExportActions().map(function (action) { return ({
        url: action.url +
            "&columnOrder=".concat(OverridableGetColumnOrder.get()(), "&aliases=").concat(aliasMap),
        title: action.displayName,
    }); }), function (action) { return action.title.toLowerCase(); });
    var otherActions = _.sortBy(model.getOtherActions().map(function (action) { return ({
        url: action.url,
        title: action.title,
    }); }), function (action) { return action.title.toLowerCase(); });
    return (React.createElement(MetacardActionsPresentation, { model: model, exportActions: exportActions, otherActions: otherActions }));
};
export default hot(module)(MetacardActions);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9tZXRhY2FyZC1hY3Rpb25zL2NvbnRhaW5lci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7SUFhSTtBQUVKLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUN0QyxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUM5QixPQUFPLENBQUMsTUFBTSxZQUFZLENBQUE7QUFDMUIsT0FBTywyQkFBMkIsTUFBTSxnQkFBZ0IsQ0FBQTtBQUV4RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFNckUsSUFBTSxlQUFlLEdBQUcsVUFBQyxLQUFZO0lBQ25DLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFFMUIsSUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FDNUIsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsQ0FBQztRQUN4QyxHQUFHLEVBQ0QsTUFBTSxDQUFDLEdBQUc7WUFDVix1QkFBZ0IseUJBQXlCLENBQUMsR0FBRyxFQUFFLEVBQUUsc0JBQVksUUFBUSxDQUFFO1FBQ3pFLEtBQUssRUFBRSxNQUFNLENBQUMsV0FBVztLQUMxQixDQUFDLEVBTHVDLENBS3ZDLENBQUMsRUFDSCxVQUFDLE1BQVcsSUFBSyxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQTFCLENBQTBCLENBQzVDLENBQUE7SUFDRCxJQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUMzQixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsQ0FBQztRQUN2QyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7UUFDZixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7S0FDcEIsQ0FBQyxFQUhzQyxDQUd0QyxDQUFDLEVBQ0gsVUFBQyxNQUFXLElBQUssT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUExQixDQUEwQixDQUM1QyxDQUFBO0lBRUQsT0FBTyxDQUNMLG9CQUFDLDJCQUEyQixJQUMxQixLQUFLLEVBQUUsS0FBSyxFQUNaLGFBQWEsRUFBRSxhQUFhLEVBQzVCLFlBQVksRUFBRSxZQUFZLEdBQzFCLENBQ0gsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELGVBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIENvZGljZSBGb3VuZGF0aW9uXG4gKlxuICogVGhpcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXRcbiAqIGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gQSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGlzIGRpc3RyaWJ1dGVkIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtIGFuZCBjYW4gYmUgZm91bmQgYXRcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvbGdwbC5odG1sPi5cbiAqXG4gKiovXG5cbmltcG9ydCB7IGhvdCB9IGZyb20gJ3JlYWN0LWhvdC1sb2FkZXInXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnXG5pbXBvcnQgTWV0YWNhcmRBY3Rpb25zUHJlc2VudGF0aW9uIGZyb20gJy4vcHJlc2VudGF0aW9uJ1xuaW1wb3J0IHsgTGF6eVF1ZXJ5UmVzdWx0IH0gZnJvbSAnLi4vLi4vanMvbW9kZWwvTGF6eVF1ZXJ5UmVzdWx0L0xhenlRdWVyeVJlc3VsdCdcbmltcG9ydCB7IE92ZXJyaWRhYmxlR2V0Q29sdW1uT3JkZXIsIGFsaWFzTWFwIH0gZnJvbSAnLi4vdXRpbHMvZXhwb3J0J1xuXG50eXBlIFByb3BzID0ge1xuICByZXN1bHQ6IExhenlRdWVyeVJlc3VsdFxufVxuXG5jb25zdCBNZXRhY2FyZEFjdGlvbnMgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IG1vZGVsID0gcHJvcHMucmVzdWx0XG5cbiAgY29uc3QgZXhwb3J0QWN0aW9ucyA9IF8uc29ydEJ5KFxuICAgIG1vZGVsLmdldEV4cG9ydEFjdGlvbnMoKS5tYXAoKGFjdGlvbikgPT4gKHtcbiAgICAgIHVybDpcbiAgICAgICAgYWN0aW9uLnVybCArXG4gICAgICAgIGAmY29sdW1uT3JkZXI9JHtPdmVycmlkYWJsZUdldENvbHVtbk9yZGVyLmdldCgpKCl9JmFsaWFzZXM9JHthbGlhc01hcH1gLFxuICAgICAgdGl0bGU6IGFjdGlvbi5kaXNwbGF5TmFtZSxcbiAgICB9KSksXG4gICAgKGFjdGlvbjogYW55KSA9PiBhY3Rpb24udGl0bGUudG9Mb3dlckNhc2UoKVxuICApXG4gIGNvbnN0IG90aGVyQWN0aW9ucyA9IF8uc29ydEJ5KFxuICAgIG1vZGVsLmdldE90aGVyQWN0aW9ucygpLm1hcCgoYWN0aW9uKSA9PiAoe1xuICAgICAgdXJsOiBhY3Rpb24udXJsLFxuICAgICAgdGl0bGU6IGFjdGlvbi50aXRsZSxcbiAgICB9KSksXG4gICAgKGFjdGlvbjogYW55KSA9PiBhY3Rpb24udGl0bGUudG9Mb3dlckNhc2UoKVxuICApXG5cbiAgcmV0dXJuIChcbiAgICA8TWV0YWNhcmRBY3Rpb25zUHJlc2VudGF0aW9uXG4gICAgICBtb2RlbD17bW9kZWx9XG4gICAgICBleHBvcnRBY3Rpb25zPXtleHBvcnRBY3Rpb25zfVxuICAgICAgb3RoZXJBY3Rpb25zPXtvdGhlckFjdGlvbnN9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBob3QobW9kdWxlKShNZXRhY2FyZEFjdGlvbnMpXG4iXX0=