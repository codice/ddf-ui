import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import CloseIcon from '@mui/icons-material/Close';
import IconButton from '@mui/material/IconButton';
import { DmsLatitude, DmsLongitude, } from '../../component/location-new/geo-components/coordinates';
import DirectionInput from '../../component/location-new/geo-components/direction';
var DmsTextfield = function (_a) {
    var point = _a.point, setPoint = _a.setPoint, deletePoint = _a.deletePoint;
    return (_jsx("div", { children: _jsxs("div", { className: "flex flex-row items-center flex-nowrap", children: [_jsxs("div", { className: "flex flex-col space-y-2 flex-nowrap shrink w-full", children: [_jsx(DmsLatitude, { label: "Latitude", value: point.lat, onChange: function (value) {
                                setPoint(__assign(__assign({}, point), { lat: value }));
                            }, children: _jsx(DirectionInput
                            // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                            , { 
                                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                                options: ['N', 'S'], value: point.latDirection, onChange: function (value) {
                                    setPoint(__assign(__assign({}, point), { latDirection: value }));
                                } }) }), _jsx(DmsLongitude, { label: "Longitude", value: point.lon, onChange: function (value) {
                                setPoint(__assign(__assign({}, point), { lon: value }));
                            }, children: _jsx(DirectionInput
                            // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                            , { 
                                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
                                options: ['E', 'W'], value: point.lonDirection, onChange: function (value) {
                                    setPoint(__assign(__assign({}, point), { lonDirection: value }));
                                } }) })] }), _jsx("div", { className: "shrink-0 grow-0", children: _jsx(IconButton, { onClick: deletePoint, size: "large", children: _jsx(CloseIcon, {}) }) })] }) }));
};
export default DmsTextfield;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG1zLXRleHRmaWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9yZWFjdC1jb21wb25lbnQvbG9jYXRpb24vZG1zLXRleHRmaWVsZC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osT0FBTyxTQUFTLE1BQU0sMkJBQTJCLENBQUE7QUFDakQsT0FBTyxVQUFVLE1BQU0sMEJBQTBCLENBQUE7QUFDakQsT0FBTyxFQUNMLFdBQVcsRUFDWCxZQUFZLEdBQ2IsTUFBTSx5REFBeUQsQ0FBQTtBQUNoRSxPQUFPLGNBQWMsTUFBTSx1REFBdUQsQ0FBQTtBQVdsRixJQUFNLFlBQVksR0FBRyxVQUFDLEVBUXJCO1FBUEMsS0FBSyxXQUFBLEVBQ0wsUUFBUSxjQUFBLEVBQ1IsV0FBVyxpQkFBQTtJQU1YLE9BQU8sQ0FDTCx3QkFDRSxlQUFLLFNBQVMsRUFBQyx3Q0FBd0MsYUFDckQsZUFBSyxTQUFTLEVBQUMsbURBQW1ELGFBQ2hFLEtBQUMsV0FBVyxJQUNWLEtBQUssRUFBQyxVQUFVLEVBQ2hCLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxFQUNoQixRQUFRLEVBQUUsVUFBQyxLQUFhO2dDQUN0QixRQUFRLHVCQUNILEtBQUssS0FDUixHQUFHLEVBQUUsS0FBSyxJQUNWLENBQUE7NEJBQ0osQ0FBQyxZQUVELEtBQUMsY0FBYzs0QkFDYiwwRUFBMEU7O2dDQUExRSwwRUFBMEU7Z0NBQzFFLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFDbkIsS0FBSyxFQUFFLEtBQUssQ0FBQyxZQUFZLEVBQ3pCLFFBQVEsRUFBRSxVQUFDLEtBQVU7b0NBQ25CLFFBQVEsdUJBQ0gsS0FBSyxLQUNSLFlBQVksRUFBRSxLQUFLLElBQ25CLENBQUE7Z0NBQ0osQ0FBQyxHQUNELEdBQ1UsRUFDZCxLQUFDLFlBQVksSUFDWCxLQUFLLEVBQUMsV0FBVyxFQUNqQixLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFDaEIsUUFBUSxFQUFFLFVBQUMsS0FBYTtnQ0FDdEIsUUFBUSx1QkFDSCxLQUFLLEtBQ1IsR0FBRyxFQUFFLEtBQUssSUFDVixDQUFBOzRCQUNKLENBQUMsWUFFRCxLQUFDLGNBQWM7NEJBQ2IsMEVBQTBFOztnQ0FBMUUsMEVBQTBFO2dDQUMxRSxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ25CLEtBQUssRUFBRSxLQUFLLENBQUMsWUFBWSxFQUN6QixRQUFRLEVBQUUsVUFBQyxLQUFVO29DQUNuQixRQUFRLHVCQUNILEtBQUssS0FDUixZQUFZLEVBQUUsS0FBSyxJQUNuQixDQUFBO2dDQUNKLENBQUMsR0FDRCxHQUNXLElBQ1gsRUFDTixjQUFLLFNBQVMsRUFBQyxpQkFBaUIsWUFDOUIsS0FBQyxVQUFVLElBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUMsT0FBTyxZQUM1QyxLQUFDLFNBQVMsS0FBRyxHQUNGLEdBQ1QsSUFDRixHQUNGLENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELGVBQWUsWUFBWSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIENvZGljZSBGb3VuZGF0aW9uXG4gKlxuICogVGhpcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXRcbiAqIGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gQSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGlzIGRpc3RyaWJ1dGVkIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtIGFuZCBjYW4gYmUgZm91bmQgYXRcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvbGdwbC5odG1sPi5cbiAqXG4gKiovXG5pbXBvcnQgQ2xvc2VJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvQ2xvc2UnXG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAbXVpL21hdGVyaWFsL0ljb25CdXR0b24nXG5pbXBvcnQge1xuICBEbXNMYXRpdHVkZSxcbiAgRG1zTG9uZ2l0dWRlLFxufSBmcm9tICcuLi8uLi9jb21wb25lbnQvbG9jYXRpb24tbmV3L2dlby1jb21wb25lbnRzL2Nvb3JkaW5hdGVzJ1xuaW1wb3J0IERpcmVjdGlvbklucHV0IGZyb20gJy4uLy4uL2NvbXBvbmVudC9sb2NhdGlvbi1uZXcvZ2VvLWNvbXBvbmVudHMvZGlyZWN0aW9uJ1xuXG50eXBlIERpcmVjdGlvbiA9ICdOJyB8ICdTJyB8ICdFJyB8ICdXJ1xuXG50eXBlIFBvaW50ID0ge1xuICBsYXREaXJlY3Rpb246IERpcmVjdGlvblxuICBsb25EaXJlY3Rpb246IERpcmVjdGlvblxuICBsYXQ6IHN0cmluZ1xuICBsb246IHN0cmluZ1xufVxuXG5jb25zdCBEbXNUZXh0ZmllbGQgPSAoe1xuICBwb2ludCxcbiAgc2V0UG9pbnQsXG4gIGRlbGV0ZVBvaW50LFxufToge1xuICBwb2ludDogUG9pbnRcbiAgc2V0UG9pbnQ6IChwb2ludDogUG9pbnQpID0+IHZvaWRcbiAgZGVsZXRlUG9pbnQ6ICgpID0+IHZvaWRcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciBmbGV4LW5vd3JhcFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgc3BhY2UteS0yIGZsZXgtbm93cmFwIHNocmluayB3LWZ1bGxcIj5cbiAgICAgICAgICA8RG1zTGF0aXR1ZGVcbiAgICAgICAgICAgIGxhYmVsPVwiTGF0aXR1ZGVcIlxuICAgICAgICAgICAgdmFsdWU9e3BvaW50LmxhdH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICBzZXRQb2ludCh7XG4gICAgICAgICAgICAgICAgLi4ucG9pbnQsXG4gICAgICAgICAgICAgICAgbGF0OiB2YWx1ZSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPERpcmVjdGlvbklucHV0XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHMtbWlncmF0ZSgyNzY5KSBGSVhNRTogTm8gb3ZlcmxvYWQgbWF0Y2hlcyB0aGlzIGNhbGwuXG4gICAgICAgICAgICAgIG9wdGlvbnM9e1snTicsICdTJ119XG4gICAgICAgICAgICAgIHZhbHVlPXtwb2ludC5sYXREaXJlY3Rpb259XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFBvaW50KHtcbiAgICAgICAgICAgICAgICAgIC4uLnBvaW50LFxuICAgICAgICAgICAgICAgICAgbGF0RGlyZWN0aW9uOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0Rtc0xhdGl0dWRlPlxuICAgICAgICAgIDxEbXNMb25naXR1ZGVcbiAgICAgICAgICAgIGxhYmVsPVwiTG9uZ2l0dWRlXCJcbiAgICAgICAgICAgIHZhbHVlPXtwb2ludC5sb259XG4gICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgc2V0UG9pbnQoe1xuICAgICAgICAgICAgICAgIC4uLnBvaW50LFxuICAgICAgICAgICAgICAgIGxvbjogdmFsdWUsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxEaXJlY3Rpb25JbnB1dFxuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjc2OSkgRklYTUU6IE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICAgICAgICAgICAgICBvcHRpb25zPXtbJ0UnLCAnVyddfVxuICAgICAgICAgICAgICB2YWx1ZT17cG9pbnQubG9uRGlyZWN0aW9ufVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRQb2ludCh7XG4gICAgICAgICAgICAgICAgICAuLi5wb2ludCxcbiAgICAgICAgICAgICAgICAgIGxvbkRpcmVjdGlvbjogdmFsdWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EbXNMb25naXR1ZGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNocmluay0wIGdyb3ctMFwiPlxuICAgICAgICAgIDxJY29uQnV0dG9uIG9uQ2xpY2s9e2RlbGV0ZVBvaW50fSBzaXplPVwibGFyZ2VcIj5cbiAgICAgICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRG1zVGV4dGZpZWxkXG4iXX0=