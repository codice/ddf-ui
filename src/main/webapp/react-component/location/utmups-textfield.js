import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import IconButton from '@mui/material/IconButton';
import CloseIcon from '@mui/icons-material/Close';
import TextField from '../text-field';
import { Zone, Hemisphere } from './common';
var UtmupsTextfield = function (_a) {
    var point = _a.point, setPoint = _a.setPoint, deletePoint = _a.deletePoint;
    return (_jsx("div", { children: _jsxs("div", { className: "flex flex-row items-center flex-nowrap", children: [_jsxs("div", { className: "flex flex-col space-y-2 flex-nowrap shrink w-full", children: [_jsx(TextField, { label: "Easting", 
                            // @ts-expect-error ts-migrate(2322) FIXME: Type 'number' is not assignable to type 'string | ... Remove this comment to see the full error message
                            value: point.easting, onChange: function (value) {
                                setPoint(__assign(__assign({}, point), { easting: value }));
                            }, addon: "m" }), _jsx(TextField, { label: "Northing", 
                            // @ts-expect-error ts-migrate(2322) FIXME: Type 'number' is not assignable to type 'string | ... Remove this comment to see the full error message
                            value: point.northing, onChange: function (value) {
                                setPoint(__assign(__assign({}, point), { northing: value }));
                            }, addon: "m" }), _jsx(Zone, { value: point.zoneNumber, onChange: function (value) {
                                setPoint(__assign(__assign({}, point), { zoneNumber: value }));
                            } }), _jsx(Hemisphere, { value: point.hemisphere, onChange: function (value) {
                                setPoint(__assign(__assign({}, point), { hemisphere: value }));
                            } })] }), _jsx("div", { className: "shrink-0 grow-0", children: _jsx(IconButton, { onClick: deletePoint, size: "large", children: _jsx(CloseIcon, {}) }) })] }) }));
};
export default UtmupsTextfield;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRtdXBzLXRleHRmaWVsZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9yZWFjdC1jb21wb25lbnQvbG9jYXRpb24vdXRtdXBzLXRleHRmaWVsZC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osT0FBTyxVQUFVLE1BQU0sMEJBQTBCLENBQUE7QUFDakQsT0FBTyxTQUFTLE1BQU0sMkJBQTJCLENBQUE7QUFDakQsT0FBTyxTQUFTLE1BQU0sZUFBZSxDQUFBO0FBQ3JDLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBUzNDLElBQU0sZUFBZSxHQUFHLFVBQUMsRUFReEI7UUFQQyxLQUFLLFdBQUEsRUFDTCxRQUFRLGNBQUEsRUFDUixXQUFXLGlCQUFBO0lBTVgsT0FBTyxDQUNMLHdCQUNFLGVBQUssU0FBUyxFQUFDLHdDQUF3QyxhQUNyRCxlQUFLLFNBQVMsRUFBQyxtREFBbUQsYUFDaEUsS0FBQyxTQUFTLElBQ1IsS0FBSyxFQUFDLFNBQVM7NEJBQ2YsbUpBQW1KOzRCQUNuSixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFDcEIsUUFBUSxFQUFFLFVBQUMsS0FBYTtnQ0FDdEIsUUFBUSx1QkFDSCxLQUFLLEtBQ1IsT0FBTyxFQUFFLEtBQUssSUFDZCxDQUFBOzRCQUNKLENBQUMsRUFDRCxLQUFLLEVBQUMsR0FBRyxHQUNULEVBQ0YsS0FBQyxTQUFTLElBQ1IsS0FBSyxFQUFDLFVBQVU7NEJBQ2hCLG1KQUFtSjs0QkFDbkosS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQ3JCLFFBQVEsRUFBRSxVQUFDLEtBQWE7Z0NBQ3RCLFFBQVEsdUJBQ0gsS0FBSyxLQUNSLFFBQVEsRUFBRSxLQUFLLElBQ2YsQ0FBQTs0QkFDSixDQUFDLEVBQ0QsS0FBSyxFQUFDLEdBQUcsR0FDVCxFQUNGLEtBQUMsSUFBSSxJQUNILEtBQUssRUFBRSxLQUFLLENBQUMsVUFBVSxFQUN2QixRQUFRLEVBQUUsVUFBQyxLQUFhO2dDQUN0QixRQUFRLHVCQUNILEtBQUssS0FDUixVQUFVLEVBQUUsS0FBSyxJQUNqQixDQUFBOzRCQUNKLENBQUMsR0FDRCxFQUNGLEtBQUMsVUFBVSxJQUNULEtBQUssRUFBRSxLQUFLLENBQUMsVUFBVSxFQUN2QixRQUFRLEVBQUUsVUFBQyxLQUE4QjtnQ0FDdkMsUUFBUSx1QkFDSCxLQUFLLEtBQ1IsVUFBVSxFQUFFLEtBQUssSUFDakIsQ0FBQTs0QkFDSixDQUFDLEdBQ0QsSUFDRSxFQUNOLGNBQUssU0FBUyxFQUFDLGlCQUFpQixZQUM5QixLQUFDLFVBQVUsSUFBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBQyxPQUFPLFlBQzVDLEtBQUMsU0FBUyxLQUFHLEdBQ0YsR0FDVCxJQUNGLEdBQ0YsQ0FDUCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsZUFBZSxlQUFlLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbidcbmltcG9ydCBDbG9zZUljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9DbG9zZSdcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnLi4vdGV4dC1maWVsZCdcbmltcG9ydCB7IFpvbmUsIEhlbWlzcGhlcmUgfSBmcm9tICcuL2NvbW1vbidcblxudHlwZSBVdG1VcHNQb2ludCA9IHtcbiAgZWFzdGluZzogbnVtYmVyXG4gIG5vcnRoaW5nOiBudW1iZXJcbiAgem9uZU51bWJlcjogbnVtYmVyXG4gIGhlbWlzcGhlcmU6ICdOb3J0aGVybicgfCAnU291dGhlcm4nXG59XG5cbmNvbnN0IFV0bXVwc1RleHRmaWVsZCA9ICh7XG4gIHBvaW50LFxuICBzZXRQb2ludCxcbiAgZGVsZXRlUG9pbnQsXG59OiB7XG4gIHBvaW50OiBVdG1VcHNQb2ludFxuICBzZXRQb2ludDogKHBvaW50OiBVdG1VcHNQb2ludCkgPT4gdm9pZFxuICBkZWxldGVQb2ludDogKCkgPT4gdm9pZFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIGZsZXgtbm93cmFwXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBzcGFjZS15LTIgZmxleC1ub3dyYXAgc2hyaW5rIHctZnVsbFwiPlxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIGxhYmVsPVwiRWFzdGluZ1wiXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjMyMikgRklYTUU6IFR5cGUgJ251bWJlcicgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnc3RyaW5nIHwgLi4uIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG8gc2VlIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgIHZhbHVlPXtwb2ludC5lYXN0aW5nfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgIHNldFBvaW50KHtcbiAgICAgICAgICAgICAgICAuLi5wb2ludCxcbiAgICAgICAgICAgICAgICBlYXN0aW5nOiB2YWx1ZSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBhZGRvbj1cIm1cIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgbGFiZWw9XCJOb3J0aGluZ1wiXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjMyMikgRklYTUU6IFR5cGUgJ251bWJlcicgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnc3RyaW5nIHwgLi4uIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG8gc2VlIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgIHZhbHVlPXtwb2ludC5ub3J0aGluZ31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWU6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICBzZXRQb2ludCh7XG4gICAgICAgICAgICAgICAgLi4ucG9pbnQsXG4gICAgICAgICAgICAgICAgbm9ydGhpbmc6IHZhbHVlLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGFkZG9uPVwibVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8Wm9uZVxuICAgICAgICAgICAgdmFsdWU9e3BvaW50LnpvbmVOdW1iZXJ9XG4gICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgc2V0UG9pbnQoe1xuICAgICAgICAgICAgICAgIC4uLnBvaW50LFxuICAgICAgICAgICAgICAgIHpvbmVOdW1iZXI6IHZhbHVlLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZW1pc3BoZXJlXG4gICAgICAgICAgICB2YWx1ZT17cG9pbnQuaGVtaXNwaGVyZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWU6ICdOb3J0aGVybicgfCAnU291dGhlcm4nKSA9PiB7XG4gICAgICAgICAgICAgIHNldFBvaW50KHtcbiAgICAgICAgICAgICAgICAuLi5wb2ludCxcbiAgICAgICAgICAgICAgICBoZW1pc3BoZXJlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2hyaW5rLTAgZ3Jvdy0wXCI+XG4gICAgICAgICAgPEljb25CdXR0b24gb25DbGljaz17ZGVsZXRlUG9pbnR9IHNpemU9XCJsYXJnZVwiPlxuICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBVdG11cHNUZXh0ZmllbGRcbiJdfQ==