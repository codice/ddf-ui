import { __assign, __read } from "tslib";
import * as React from 'react';
import { hot } from 'react-hot-loader';
import Autocomplete from '@mui/material/Autocomplete';
import TextField from '@mui/material/TextField';
var timeFormats = [
    {
        label: 'ISO 8601',
        value: 'ISO',
    },
    {
        label: '24 Hour Standard',
        value: '24',
    },
    {
        label: '12 Hour Standard',
        value: '12',
    },
];
var TimeFormatSelector = function (props) {
    var initState = timeFormats.find(function (tf) { return tf.value === props.timeFormat; });
    var _a = __read(React.useState(initState), 2), currentTimeFormat = _a[0], setCurrentTimeFormat = _a[1];
    return (React.createElement("div", null,
        React.createElement(Autocomplete, { id: "time-format-picker", disableClearable: true, autoComplete: true, size: 'small', onChange: function (_event, newTimeFormat) {
                props.handleTimeFormatUpdate(newTimeFormat);
                setCurrentTimeFormat(newTimeFormat);
            }, isOptionEqualToValue: function (option, value) {
                return option.value === value.value;
            }, options: timeFormats, getOptionLabel: function (format) { return format.label; }, style: { width: '100%', paddingTop: '2em' }, renderInput: function (params) { return (React.createElement(TextField, __assign({}, params, { label: "Time Format", variant: "outlined" }))); }, value: currentTimeFormat })));
};
export default hot(module)(TimeFormatSelector);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1mb3JtYXQtcGlja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC90aW1lLXNldHRpbmdzL3RpbWUtZm9ybWF0LXBpY2tlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQzlCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUN0QyxPQUFPLFlBQVksTUFBTSw0QkFBNEIsQ0FBQTtBQUNyRCxPQUFPLFNBQVMsTUFBTSx5QkFBeUIsQ0FBQTtBQVEvQyxJQUFNLFdBQVcsR0FBRztJQUNsQjtRQUNFLEtBQUssRUFBRSxVQUFVO1FBQ2pCLEtBQUssRUFBRSxLQUFLO0tBQ2I7SUFDRDtRQUNFLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsS0FBSyxFQUFFLElBQUk7S0FDWjtJQUNEO1FBQ0UsS0FBSyxFQUFFLGtCQUFrQjtRQUN6QixLQUFLLEVBQUUsSUFBSTtLQUNaO0NBQ2MsQ0FBQTtBQUVqQixJQUFNLGtCQUFrQixHQUFHLFVBQUMsS0FBWTtJQUN0QyxJQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsRUFBRSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsVUFBVSxFQUE3QixDQUE2QixDQUFDLENBQUE7SUFFbkUsSUFBQSxLQUFBLE9BQTRDLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUEsRUFBcEUsaUJBQWlCLFFBQUEsRUFBRSxvQkFBb0IsUUFBNkIsQ0FBQTtJQUUzRSxPQUFPLENBQ0w7UUFDRSxvQkFBQyxZQUFZLElBQ1gsRUFBRSxFQUFDLG9CQUFvQixFQUN2QixnQkFBZ0IsRUFBRSxJQUFJLEVBQ3RCLFlBQVksRUFBRSxJQUFJLEVBQ2xCLElBQUksRUFBRSxPQUFPLEVBQ2IsUUFBUSxFQUFFLFVBQUMsTUFBVyxFQUFFLGFBQXlCO2dCQUMvQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLENBQUE7Z0JBQzNDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFBO1lBQ3JDLENBQUMsRUFDRCxvQkFBb0IsRUFBRSxVQUFDLE1BQWtCLEVBQUUsS0FBaUI7Z0JBQzFELE9BQU8sTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFBO1lBQ3JDLENBQUMsRUFDRCxPQUFPLEVBQUUsV0FBVyxFQUNwQixjQUFjLEVBQUUsVUFBQyxNQUFNLElBQUssT0FBQSxNQUFNLENBQUMsS0FBSyxFQUFaLENBQVksRUFDeEMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQzNDLFdBQVcsRUFBRSxVQUFDLE1BQU0sSUFBSyxPQUFBLENBQ3ZCLG9CQUFDLFNBQVMsZUFBSyxNQUFNLElBQUUsS0FBSyxFQUFDLGFBQWEsRUFBQyxPQUFPLEVBQUMsVUFBVSxJQUFHLENBQ2pFLEVBRndCLENBRXhCLEVBQ0QsS0FBSyxFQUFFLGlCQUFpQixHQUN4QixDQUNFLENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELGVBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGhvdCB9IGZyb20gJ3JlYWN0LWhvdC1sb2FkZXInXG5pbXBvcnQgQXV0b2NvbXBsZXRlIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQXV0b2NvbXBsZXRlJ1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbXVpL21hdGVyaWFsL1RleHRGaWVsZCdcbmltcG9ydCB7IFRpbWVGb3JtYXQgfSBmcm9tICcuL3R5cGVzJ1xuXG50eXBlIFByb3BzID0ge1xuICB0aW1lRm9ybWF0OiBzdHJpbmdcbiAgaGFuZGxlVGltZUZvcm1hdFVwZGF0ZTogKHRpbWVGb3JtYXQ6IFRpbWVGb3JtYXQpID0+IGFueVxufVxuXG5jb25zdCB0aW1lRm9ybWF0cyA9IFtcbiAge1xuICAgIGxhYmVsOiAnSVNPIDg2MDEnLFxuICAgIHZhbHVlOiAnSVNPJyxcbiAgfSxcbiAge1xuICAgIGxhYmVsOiAnMjQgSG91ciBTdGFuZGFyZCcsXG4gICAgdmFsdWU6ICcyNCcsXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogJzEyIEhvdXIgU3RhbmRhcmQnLFxuICAgIHZhbHVlOiAnMTInLFxuICB9LFxuXSBhcyBUaW1lRm9ybWF0W11cblxuY29uc3QgVGltZUZvcm1hdFNlbGVjdG9yID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCBpbml0U3RhdGUgPSB0aW1lRm9ybWF0cy5maW5kKCh0ZikgPT4gdGYudmFsdWUgPT09IHByb3BzLnRpbWVGb3JtYXQpXG5cbiAgY29uc3QgW2N1cnJlbnRUaW1lRm9ybWF0LCBzZXRDdXJyZW50VGltZUZvcm1hdF0gPSBSZWFjdC51c2VTdGF0ZShpbml0U3RhdGUpXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEF1dG9jb21wbGV0ZVxuICAgICAgICBpZD1cInRpbWUtZm9ybWF0LXBpY2tlclwiXG4gICAgICAgIGRpc2FibGVDbGVhcmFibGU9e3RydWV9XG4gICAgICAgIGF1dG9Db21wbGV0ZT17dHJ1ZX1cbiAgICAgICAgc2l6ZT17J3NtYWxsJ31cbiAgICAgICAgb25DaGFuZ2U9eyhfZXZlbnQ6IGFueSwgbmV3VGltZUZvcm1hdDogVGltZUZvcm1hdCkgPT4ge1xuICAgICAgICAgIHByb3BzLmhhbmRsZVRpbWVGb3JtYXRVcGRhdGUobmV3VGltZUZvcm1hdClcbiAgICAgICAgICBzZXRDdXJyZW50VGltZUZvcm1hdChuZXdUaW1lRm9ybWF0KVxuICAgICAgICB9fVxuICAgICAgICBpc09wdGlvbkVxdWFsVG9WYWx1ZT17KG9wdGlvbjogVGltZUZvcm1hdCwgdmFsdWU6IFRpbWVGb3JtYXQpID0+IHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9uLnZhbHVlID09PSB2YWx1ZS52YWx1ZVxuICAgICAgICB9fVxuICAgICAgICBvcHRpb25zPXt0aW1lRm9ybWF0c31cbiAgICAgICAgZ2V0T3B0aW9uTGFiZWw9eyhmb3JtYXQpID0+IGZvcm1hdC5sYWJlbH1cbiAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJywgcGFkZGluZ1RvcDogJzJlbScgfX1cbiAgICAgICAgcmVuZGVySW5wdXQ9eyhwYXJhbXMpID0+IChcbiAgICAgICAgICA8VGV4dEZpZWxkIHsuLi5wYXJhbXN9IGxhYmVsPVwiVGltZSBGb3JtYXRcIiB2YXJpYW50PVwib3V0bGluZWRcIiAvPlxuICAgICAgICApfVxuICAgICAgICB2YWx1ZT17Y3VycmVudFRpbWVGb3JtYXR9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGhvdChtb2R1bGUpKFRpbWVGb3JtYXRTZWxlY3RvcilcbiJdfQ==