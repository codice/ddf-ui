import { __assign, __read } from "tslib";
import * as React from 'react';
import { hot } from 'react-hot-loader';
import Autocomplete from '@mui/material/Autocomplete';
import TextField from '@mui/material/TextField';
var TimeZoneSelector = function (props) {
    var getDefaultTimeZone = function (timeZoneName) {
        return props.timeZones.find(function (zone) { return zone.zoneName === timeZoneName; });
    };
    var _a = __read(React.useState(getDefaultTimeZone(props.timeZone)), 2), currentTimeZone = _a[0], setCurrentTimeZone = _a[1];
    return (React.createElement("div", null,
        React.createElement(Autocomplete, { id: "time-zone-picker", disableClearable: true, autoComplete: true, size: 'small', onChange: function (_event, newTimeZone) {
                props.handleTimeZoneUpdate(newTimeZone);
                setCurrentTimeZone(newTimeZone);
            }, isOptionEqualToValue: function (oldZone, newZone) {
                return oldZone.zoneName === newZone.zoneName;
            }, options: props.timeZones, getOptionLabel: function (zone) {
                return "".concat(zone.zoneName, ", ").concat(zone.abbr, ", ").concat(zone.offsetAsString);
            }, style: { width: '100%' }, renderInput: function (params) { return (React.createElement(TextField, __assign({}, params, { label: "Time Zone", variant: "outlined" }))); }, value: currentTimeZone })));
};
export default hot(module)(TimeZoneSelector);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS16b25lLXBpY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9yZWFjdC1jb21wb25lbnQvdGltZS1zZXR0aW5ncy90aW1lLXpvbmUtcGlja2VyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ3RDLE9BQU8sWUFBWSxNQUFNLDRCQUE0QixDQUFBO0FBQ3JELE9BQU8sU0FBUyxNQUFNLHlCQUF5QixDQUFBO0FBUy9DLElBQU0sZ0JBQWdCLEdBQUcsVUFBQyxLQUFZO0lBQ3BDLElBQU0sa0JBQWtCLEdBQUcsVUFBQyxZQUFvQjtRQUM5QyxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxDQUFDLFFBQVEsS0FBSyxZQUFZLEVBQTlCLENBQThCLENBQUMsQ0FBQTtJQUN2RSxDQUFDLENBQUE7SUFFRyxJQUFBLEtBQUEsT0FBd0MsS0FBSyxDQUFDLFFBQVEsQ0FDeEQsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUNuQyxJQUFBLEVBRkksZUFBZSxRQUFBLEVBQUUsa0JBQWtCLFFBRXZDLENBQUE7SUFFRCxPQUFPLENBQ0w7UUFDRSxvQkFBQyxZQUFZLElBQ1gsRUFBRSxFQUFDLGtCQUFrQixFQUNyQixnQkFBZ0IsRUFBRSxJQUFJLEVBQ3RCLFlBQVksRUFBRSxJQUFJLEVBQ2xCLElBQUksRUFBRSxPQUFPLEVBQ2IsUUFBUSxFQUFFLFVBQUMsTUFBVyxFQUFFLFdBQXFCO2dCQUMzQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUE7Z0JBQ3ZDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQ2pDLENBQUMsRUFDRCxvQkFBb0IsRUFBRSxVQUFDLE9BQWlCLEVBQUUsT0FBaUI7Z0JBQ3pELE9BQU8sT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsUUFBUSxDQUFBO1lBQzlDLENBQUMsRUFDRCxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFDeEIsY0FBYyxFQUFFLFVBQUMsSUFBSTtnQkFDbkIsT0FBQSxVQUFHLElBQUksQ0FBQyxRQUFRLGVBQUssSUFBSSxDQUFDLElBQUksZUFBSyxJQUFJLENBQUMsY0FBYyxDQUFFO1lBQXhELENBQXdELEVBRTFELEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFDeEIsV0FBVyxFQUFFLFVBQUMsTUFBTSxJQUFLLE9BQUEsQ0FDdkIsb0JBQUMsU0FBUyxlQUFLLE1BQU0sSUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFDLE9BQU8sRUFBQyxVQUFVLElBQUcsQ0FDL0QsRUFGd0IsQ0FFeEIsRUFDRCxLQUFLLEVBQUUsZUFBZSxHQUN0QixDQUNFLENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELGVBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGhvdCB9IGZyb20gJ3JlYWN0LWhvdC1sb2FkZXInXG5pbXBvcnQgQXV0b2NvbXBsZXRlIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQXV0b2NvbXBsZXRlJ1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbXVpL21hdGVyaWFsL1RleHRGaWVsZCdcbmltcG9ydCB7IFRpbWVab25lIH0gZnJvbSAnLi90eXBlcydcblxudHlwZSBQcm9wcyA9IHtcbiAgdGltZVpvbmU6IHN0cmluZ1xuICB0aW1lWm9uZXM6IFRpbWVab25lW11cbiAgaGFuZGxlVGltZVpvbmVVcGRhdGU6ICh0aW1lWm9uZTogVGltZVpvbmUpID0+IGFueVxufVxuXG5jb25zdCBUaW1lWm9uZVNlbGVjdG9yID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCBnZXREZWZhdWx0VGltZVpvbmUgPSAodGltZVpvbmVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gcHJvcHMudGltZVpvbmVzLmZpbmQoKHpvbmUpID0+IHpvbmUuem9uZU5hbWUgPT09IHRpbWVab25lTmFtZSlcbiAgfVxuXG4gIGxldCBbY3VycmVudFRpbWVab25lLCBzZXRDdXJyZW50VGltZVpvbmVdID0gUmVhY3QudXNlU3RhdGUoXG4gICAgZ2V0RGVmYXVsdFRpbWVab25lKHByb3BzLnRpbWVab25lKVxuICApXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEF1dG9jb21wbGV0ZVxuICAgICAgICBpZD1cInRpbWUtem9uZS1waWNrZXJcIlxuICAgICAgICBkaXNhYmxlQ2xlYXJhYmxlPXt0cnVlfVxuICAgICAgICBhdXRvQ29tcGxldGU9e3RydWV9XG4gICAgICAgIHNpemU9eydzbWFsbCd9XG4gICAgICAgIG9uQ2hhbmdlPXsoX2V2ZW50OiBhbnksIG5ld1RpbWVab25lOiBUaW1lWm9uZSkgPT4ge1xuICAgICAgICAgIHByb3BzLmhhbmRsZVRpbWVab25lVXBkYXRlKG5ld1RpbWVab25lKVxuICAgICAgICAgIHNldEN1cnJlbnRUaW1lWm9uZShuZXdUaW1lWm9uZSlcbiAgICAgICAgfX1cbiAgICAgICAgaXNPcHRpb25FcXVhbFRvVmFsdWU9eyhvbGRab25lOiBUaW1lWm9uZSwgbmV3Wm9uZTogVGltZVpvbmUpID0+IHtcbiAgICAgICAgICByZXR1cm4gb2xkWm9uZS56b25lTmFtZSA9PT0gbmV3Wm9uZS56b25lTmFtZVxuICAgICAgICB9fVxuICAgICAgICBvcHRpb25zPXtwcm9wcy50aW1lWm9uZXN9XG4gICAgICAgIGdldE9wdGlvbkxhYmVsPXsoem9uZSkgPT5cbiAgICAgICAgICBgJHt6b25lLnpvbmVOYW1lfSwgJHt6b25lLmFiYnJ9LCAke3pvbmUub2Zmc2V0QXNTdHJpbmd9YFxuICAgICAgICB9XG4gICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX1cbiAgICAgICAgcmVuZGVySW5wdXQ9eyhwYXJhbXMpID0+IChcbiAgICAgICAgICA8VGV4dEZpZWxkIHsuLi5wYXJhbXN9IGxhYmVsPVwiVGltZSBab25lXCIgdmFyaWFudD1cIm91dGxpbmVkXCIgLz5cbiAgICAgICAgKX1cbiAgICAgICAgdmFsdWU9e2N1cnJlbnRUaW1lWm9uZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgaG90KG1vZHVsZSkoVGltZVpvbmVTZWxlY3RvcilcbiJdfQ==