import { __assign, __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import ResultsExport from '../results-export';
import { MetacardInteraction } from './metacard-interactions';
import { getExportResults } from '../utils/export/export';
import { useDialogState } from '../../component/hooks/useDialogState';
import Button from '@mui/material/Button';
import Divider from '@mui/material/Divider';
import { Dialog, DialogActions, DialogTitle } from '@mui/material';
export var ExportActions = function (props) {
    var _a = __read(React.useState(false), 2), exportSuccessful = _a[0], setExportSuccessful = _a[1];
    var _b = __read(React.useState(false), 2), loading = _b[0], setLoading = _b[1];
    var exportDialogState = useDialogState();
    if (!props.model || props.model.length <= 0) {
        return null;
    }
    if (!props.model[0].parent) {
        return null;
    }
    return (_jsxs(_Fragment, { children: [_jsxs(exportDialogState.MuiDialogComponents.Dialog, __assign({}, exportDialogState.MuiDialogProps, { disableEscapeKeyDown: true, onClose: function (event, reason) {
                    if (reason === 'backdropClick') {
                        return;
                    }
                    exportDialogState.MuiDialogProps.onClose(event, reason);
                }, children: [_jsx(exportDialogState.MuiDialogComponents.DialogTitle, { children: _jsx("div", { className: "flex flex-row items-center justify-between flex-nowrap w-full", children: "Export" }) }), _jsx(Divider, {}), _jsx(ResultsExport, { results: getExportResults(props.model), lazyQueryResults: props.model[0].parent, setExportSuccessful: setExportSuccessful, exportSuccessful: exportSuccessful, setLoading: setLoading, loading: loading, onClose: function () {
                            exportDialogState.handleClose();
                        } })] })), exportSuccessful && (_jsxs(Dialog, { open: exportSuccessful, children: [_jsx(DialogTitle, { children: _jsx("div", { className: "flex flex-row items-center justify-between flex-nowrap w-full", children: "Export Successful!" }) }), _jsx(Divider, {}), _jsx(DialogActions, { children: _jsx("div", { className: "pt-2", style: { display: 'flex', justifyContent: 'flex-end' }, children: _jsx(Button, { color: "primary", onClick: function () { return setExportSuccessful(false); }, children: "Close" }) }) })] })), _jsx(MetacardInteraction, { onClick: function () {
                    props.onClose();
                    exportDialogState.handleClick();
                }, icon: "fa fa-share", text: "Export as", help: "Starts the export process for the selected results." })] }));
};
export default ExportActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LWludGVyYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9tZXRhY2FyZC1pbnRlcmFjdGlvbnMvZXhwb3J0LWludGVyYWN0aW9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7QUFDSixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUM5QixPQUFPLGFBQWEsTUFBTSxtQkFBbUIsQ0FBQTtBQUU3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUU3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUE7QUFDckUsT0FBTyxNQUFNLE1BQU0sc0JBQXNCLENBQUE7QUFDekMsT0FBTyxPQUFPLE1BQU0sdUJBQXVCLENBQUE7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRWxFLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxVQUFDLEtBQStCO0lBQ3JELElBQUEsS0FBQSxPQUEwQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFBLEVBQTlELGdCQUFnQixRQUFBLEVBQUUsbUJBQW1CLFFBQXlCLENBQUE7SUFDL0QsSUFBQSxLQUFBLE9BQXdCLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUEsRUFBNUMsT0FBTyxRQUFBLEVBQUUsVUFBVSxRQUF5QixDQUFBO0lBQ25ELElBQU0saUJBQWlCLEdBQUcsY0FBYyxFQUFFLENBQUE7SUFFMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDM0IsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBQ0QsT0FBTyxDQUNMLDhCQUNFLE1BQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsTUFBTSxlQUN2QyxpQkFBaUIsQ0FBQyxjQUFjLElBQ3BDLG9CQUFvQixRQUNwQixPQUFPLEVBQUUsVUFBQyxLQUFLLEVBQUUsTUFBTTtvQkFDckIsSUFBSSxNQUFNLEtBQUssZUFBZSxFQUFFLENBQUM7d0JBQy9CLE9BQU07b0JBQ1IsQ0FBQztvQkFDRCxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtnQkFDekQsQ0FBQyxhQUVELEtBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsV0FBVyxjQUNoRCxjQUFLLFNBQVMsRUFBQywrREFBK0QsdUJBRXhFLEdBQzRDLEVBQ3BELEtBQUMsT0FBTyxLQUFXLEVBQ25CLEtBQUMsYUFBYSxJQUNaLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQ3RDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUN2QyxtQkFBbUIsRUFBRSxtQkFBbUIsRUFDeEMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQ2xDLFVBQVUsRUFBRSxVQUFVLEVBQ3RCLE9BQU8sRUFBRSxPQUFPLEVBQ2hCLE9BQU8sRUFBRTs0QkFDUCxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQTt3QkFDakMsQ0FBQyxHQUNELEtBQzJDLEVBRTlDLGdCQUFnQixJQUFJLENBQ25CLE1BQUMsTUFBTSxJQUFDLElBQUksRUFBRSxnQkFBZ0IsYUFDNUIsS0FBQyxXQUFXLGNBQ1YsY0FBSyxTQUFTLEVBQUMsK0RBQStELG1DQUV4RSxHQUNNLEVBQ2QsS0FBQyxPQUFPLEtBQUcsRUFDWCxLQUFDLGFBQWEsY0FDWixjQUNFLFNBQVMsRUFBQyxNQUFNLEVBQ2hCLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxZQUV0RCxLQUFDLE1BQU0sSUFDTCxLQUFLLEVBQUMsU0FBUyxFQUNmLE9BQU8sRUFBRSxjQUFNLE9BQUEsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQTFCLENBQTBCLHNCQUdsQyxHQUNMLEdBQ1EsSUFDVCxDQUNWLEVBRUQsS0FBQyxtQkFBbUIsSUFDbEIsT0FBTyxFQUFFO29CQUNQLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQTtvQkFDZixpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtnQkFDakMsQ0FBQyxFQUNELElBQUksRUFBQyxhQUFhLEVBQ2xCLElBQUksRUFBQyxXQUFXLEVBQ2hCLElBQUksRUFBQyxxREFBcUQsR0FDMUQsSUFDRCxDQUNKLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxlQUFlLGFBQWEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBDb2RpY2UgRm91bmRhdGlvblxuICpcbiAqIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXJcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlXG4gKiBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0XG4gKiBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuIEEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBpcyBkaXN0cmlidXRlZCBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbSBhbmQgY2FuIGJlIGZvdW5kIGF0XG4gKiA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2xncGwuaHRtbD4uXG4gKlxuICoqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUmVzdWx0c0V4cG9ydCBmcm9tICcuLi9yZXN1bHRzLWV4cG9ydCdcbmltcG9ydCB7IE1ldGFjYXJkSW50ZXJhY3Rpb25Qcm9wcyB9IGZyb20gJy4nXG5pbXBvcnQgeyBNZXRhY2FyZEludGVyYWN0aW9uIH0gZnJvbSAnLi9tZXRhY2FyZC1pbnRlcmFjdGlvbnMnXG5cbmltcG9ydCB7IGdldEV4cG9ydFJlc3VsdHMgfSBmcm9tICcuLi91dGlscy9leHBvcnQvZXhwb3J0J1xuaW1wb3J0IHsgdXNlRGlhbG9nU3RhdGUgfSBmcm9tICcuLi8uLi9jb21wb25lbnQvaG9va3MvdXNlRGlhbG9nU3RhdGUnXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJ1xuaW1wb3J0IERpdmlkZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9EaXZpZGVyJ1xuaW1wb3J0IHsgRGlhbG9nLCBEaWFsb2dBY3Rpb25zLCBEaWFsb2dUaXRsZSB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5cbmV4cG9ydCBjb25zdCBFeHBvcnRBY3Rpb25zID0gKHByb3BzOiBNZXRhY2FyZEludGVyYWN0aW9uUHJvcHMpID0+IHtcbiAgY29uc3QgW2V4cG9ydFN1Y2Nlc3NmdWwsIHNldEV4cG9ydFN1Y2Nlc3NmdWxdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBleHBvcnREaWFsb2dTdGF0ZSA9IHVzZURpYWxvZ1N0YXRlKClcblxuICBpZiAoIXByb3BzLm1vZGVsIHx8IHByb3BzLm1vZGVsLmxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBpZiAoIXByb3BzLm1vZGVsWzBdLnBhcmVudCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGV4cG9ydERpYWxvZ1N0YXRlLk11aURpYWxvZ0NvbXBvbmVudHMuRGlhbG9nXG4gICAgICAgIHsuLi5leHBvcnREaWFsb2dTdGF0ZS5NdWlEaWFsb2dQcm9wc31cbiAgICAgICAgZGlzYWJsZUVzY2FwZUtleURvd25cbiAgICAgICAgb25DbG9zZT17KGV2ZW50LCByZWFzb24pID0+IHtcbiAgICAgICAgICBpZiAocmVhc29uID09PSAnYmFja2Ryb3BDbGljaycpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBleHBvcnREaWFsb2dTdGF0ZS5NdWlEaWFsb2dQcm9wcy5vbkNsb3NlKGV2ZW50LCByZWFzb24pXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxleHBvcnREaWFsb2dTdGF0ZS5NdWlEaWFsb2dDb21wb25lbnRzLkRpYWxvZ1RpdGxlPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIGZsZXgtbm93cmFwIHctZnVsbFwiPlxuICAgICAgICAgICAgRXhwb3J0XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZXhwb3J0RGlhbG9nU3RhdGUuTXVpRGlhbG9nQ29tcG9uZW50cy5EaWFsb2dUaXRsZT5cbiAgICAgICAgPERpdmlkZXI+PC9EaXZpZGVyPlxuICAgICAgICA8UmVzdWx0c0V4cG9ydFxuICAgICAgICAgIHJlc3VsdHM9e2dldEV4cG9ydFJlc3VsdHMocHJvcHMubW9kZWwpfVxuICAgICAgICAgIGxhenlRdWVyeVJlc3VsdHM9e3Byb3BzLm1vZGVsWzBdLnBhcmVudH1cbiAgICAgICAgICBzZXRFeHBvcnRTdWNjZXNzZnVsPXtzZXRFeHBvcnRTdWNjZXNzZnVsfVxuICAgICAgICAgIGV4cG9ydFN1Y2Nlc3NmdWw9e2V4cG9ydFN1Y2Nlc3NmdWx9XG4gICAgICAgICAgc2V0TG9hZGluZz17c2V0TG9hZGluZ31cbiAgICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHtcbiAgICAgICAgICAgIGV4cG9ydERpYWxvZ1N0YXRlLmhhbmRsZUNsb3NlKClcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9leHBvcnREaWFsb2dTdGF0ZS5NdWlEaWFsb2dDb21wb25lbnRzLkRpYWxvZz5cblxuICAgICAge2V4cG9ydFN1Y2Nlc3NmdWwgJiYgKFxuICAgICAgICA8RGlhbG9nIG9wZW49e2V4cG9ydFN1Y2Nlc3NmdWx9PlxuICAgICAgICAgIDxEaWFsb2dUaXRsZT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIGZsZXgtbm93cmFwIHctZnVsbFwiPlxuICAgICAgICAgICAgICBFeHBvcnQgU3VjY2Vzc2Z1bCFcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvRGlhbG9nVGl0bGU+XG4gICAgICAgICAgPERpdmlkZXIgLz5cbiAgICAgICAgICA8RGlhbG9nQWN0aW9ucz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicHQtMlwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JywganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0RXhwb3J0U3VjY2Vzc2Z1bChmYWxzZSl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBDbG9zZVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvRGlhbG9nQWN0aW9ucz5cbiAgICAgICAgPC9EaWFsb2c+XG4gICAgICApfVxuXG4gICAgICA8TWV0YWNhcmRJbnRlcmFjdGlvblxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgcHJvcHMub25DbG9zZSgpXG4gICAgICAgICAgZXhwb3J0RGlhbG9nU3RhdGUuaGFuZGxlQ2xpY2soKVxuICAgICAgICB9fVxuICAgICAgICBpY29uPVwiZmEgZmEtc2hhcmVcIlxuICAgICAgICB0ZXh0PVwiRXhwb3J0IGFzXCJcbiAgICAgICAgaGVscD1cIlN0YXJ0cyB0aGUgZXhwb3J0IHByb2Nlc3MgZm9yIHRoZSBzZWxlY3RlZCByZXN1bHRzLlwiXG4gICAgICAvPlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cG9ydEFjdGlvbnNcbiJdfQ==