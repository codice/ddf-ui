import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import Button from '@mui/material/Button';
import { DarkDivider } from '../../component/dark-divider/dark-divider';
import PersonIcon from '@mui/icons-material/Person';
import user from '../../component/singletons/user-instance';
import FormControlLabel from '@mui/material/FormControlLabel';
import Switch from '@mui/material/Switch';
import Typography from '@mui/material/Typography';
import ExtensionPoints from '../../extension-points/extension-points';
import { postSimpleAuditLog } from '../../react-component/utils/audit/audit-endpoint';
import { useDialog } from '../../component/dialog';
import DialogTitle from '@mui/material/DialogTitle';
import DialogContentText from '@mui/material/DialogContentText';
import CircularProgress from '@mui/material/CircularProgress';
import DialogContent from '@mui/material/DialogContent';
import { getIsUsingElevatedRights, setIsUsingElevatedRights, } from '../../component/elevated-rights/elevated-rights';
export var EnhancedRolesContext = React.createContext({
    enhancedRoles: [],
});
var useEnhancedRoles = function () {
    var enhancedRoles = React.useContext(EnhancedRolesContext).enhancedRoles;
    return enhancedRoles;
};
export var RoleDisplay = function () {
    var isUsingElevatedRights = getIsUsingElevatedRights();
    var enhancedRoles = useEnhancedRoles();
    if (isUsingElevatedRights && enhancedRoles.length > 0) {
        return _jsx(_Fragment, { children: "Advanced" });
    }
    return null;
};
var RolesToggle = function () {
    var isUsingElevatedRights = getIsUsingElevatedRights();
    var enhancedRoles = useEnhancedRoles();
    var dialogContext = useDialog();
    if (!enhancedRoles || enhancedRoles.length === 0) {
        return null;
    }
    return (_jsxs("div", { className: "ml-1 pt-4", children: [_jsx("div", { className: "font-normal text-lg", children: "Role" }), _jsx(FormControlLabel, { className: "pb-4", label: _jsx(Typography, { variant: "body2", children: "Advanced" }), control: _jsx(Switch, { color: "primary", checked: isUsingElevatedRights, onChange: function (e) {
                        setIsUsingElevatedRights(e.target.checked);
                        postSimpleAuditLog({
                            action: 'ROLE_CHANGE',
                            component: e.target.checked
                                ? 'user enabled advanced_mode, roles: [' + enhancedRoles + ']'
                                : 'user disabled advanced_mode',
                        });
                        dialogContext.setProps({
                            open: true,
                            onClose: function () { },
                            children: (_jsxs(_Fragment, { children: [_jsx(DialogTitle, { children: _jsx(Typography, { variant: "h5", children: "Switching Role" }) }), _jsxs(DialogContent, { className: "overflow-hidden", children: [_jsx(DialogContentText, { variant: "subtitle1", children: "The page will refresh to complete the role change." }), _jsx("div", { className: "flex justify-center py-5", children: _jsx(CircularProgress, { size: 80 }) })] })] })),
                        });
                        setTimeout(function () {
                            window.location.reload();
                        }, 1000);
                    } }) }), _jsxs("div", { className: "".concat(isUsingElevatedRights ? '' : 'opacity-50'), children: [_jsx("div", { className: "pb-1 font-normal italic", children: "My Advanced Roles" }), enhancedRoles.map(function (role) {
                        return _jsx("div", { className: "text-sm", children: role });
                    })] })] }));
};
var UserComponent = function () {
    var username = user.getUserName();
    var email = user.getEmail();
    var signOut = function () {
        window.location.href =
            '../../logout?service=' + encodeURIComponent(window.location.href);
    };
    return (_jsxs("div", { className: "w-full h-full flex flex-col", children: [_jsxs("div", { className: "shrink-1 overflow-auto p-2", children: [_jsxs("div", { className: "flex flex-row items-center flex-nowrap", children: [_jsx("div", { className: "pr-2", children: _jsx(PersonIcon, {}) }), _jsxs("div", { children: [_jsx("div", { "data-id": "profile-username", className: "info-username is-large-font is-bold", children: username }), _jsx("div", { "data-id": "profile-email", className: "info-email is-medium-font", children: email })] })] }), _jsx(RolesToggle, {}), _jsx(ExtensionPoints.userInformation, {})] }), _jsx(DarkDivider, { className: "my-2 shrink-0" }), _jsx("div", { className: "text-right p-2 shrink-0", children: _jsx(Button, { "data-id": "profile-signout-button", color: "primary", variant: "contained", onClick: signOut, children: "Sign Out" }) })] }));
};
export default UserComponent;
//# sourceMappingURL=data:application/json;base64,