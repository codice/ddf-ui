import { __makeTemplateObject } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import styled from 'styled-components';
import LinearProgress from '@mui/material/LinearProgress';
var Header = styled.h4(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  text-align: left;\n  padding: ", ";\n"], ["\n  text-align: left;\n  padding: ", ";\n"])), function (props) { return props.theme.minimumSpacing; });
var Root = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  overflow: auto;\n\n  table {\n    width: 100%;\n    text-align: center;\n    margin-bottom: 40px;\n  }\n\n  th {\n    width: 33%;\n    text-align: center;\n  }\n\n  tr:nth-of-type(even) {\n    background: rgba(0, 0, 0, 0.1);\n  }\n\n  th,\n  td {\n    padding: 10px;\n  }\n\n  td + td {\n    border-left: 1px solid rgba(100, 100, 100, 0.3);\n  }\n\n  tbody {\n    border-top: 1px solid rgba(100, 100, 100, 0.3);\n  }\n"], ["\n  overflow: auto;\n\n  table {\n    width: 100%;\n    text-align: center;\n    margin-bottom: 40px;\n  }\n\n  th {\n    width: 33%;\n    text-align: center;\n  }\n\n  tr:nth-of-type(even) {\n    background: rgba(0, 0, 0, 0.1);\n  }\n\n  th,\n  td {\n    padding: 10px;\n  }\n\n  td + td {\n    border-left: 1px solid rgba(100, 100, 100, 0.3);\n  }\n\n  tbody {\n    border-top: 1px solid rgba(100, 100, 100, 0.3);\n  }\n"])));
var MetacardValidation = function (props) {
    var metacardValidation = props.metacardValidation;
    return (_jsxs(_Fragment, { children: [_jsx(Header, { children: "Metacard Validation Issues" }), _jsxs("table", { children: [_jsxs("thead", { children: [_jsx("th", { children: "Attribute" }), _jsx("th", { children: "Severity" }), _jsx("th", { children: "Message" })] }), _jsx("tbody", { children: metacardValidation.map(function (validation, i) {
                            return (_jsxs("tr", { "data-id": "metacard-validation-issue-container", children: [_jsx("td", { "data-id": "attribute-value", children: validation.attributes.map(function (attribute, j) {
                                            return _jsx("div", { children: attribute }, attribute + j);
                                        }) }), _jsx("td", { "data-id": "severity-value", children: validation.severity }), validation.duplicate ? (_jsxs("td", { "data-id": "message-value", children: [validation.duplicate.message[0], validation.duplicate.ids.map(function (id, index) {
                                                return (_jsxs(React.Fragment, { children: [_jsx("a", { href: "#metacards/".concat(id), children: id }), index !== validation.duplicate.ids.length - 1
                                                            ? ', '
                                                            : ''] }, id));
                                            }), validation.duplicate.message[1]] })) : (_jsx("td", { "data-id": "message-value", children: validation.message }))] }, i));
                        }) })] })] }));
};
var AttributeValidation = function (props) {
    var attributeValidation = props.attributeValidation;
    return (_jsxs(_Fragment, { children: [_jsx(Header, { children: "Attribute Validation Issues" }), _jsxs("table", { children: [_jsxs("thead", { children: [_jsx("th", { children: "Attribute" }), _jsx("th", { children: "Warnings" }), _jsx("th", { children: "Errors" })] }), _jsx("tbody", { children: attributeValidation.map(function (validation, i) {
                            return (_jsxs("tr", { "data-id": "attribute-validation-issue-container", children: [_jsx("td", { "data-id": "attribute-value", children: validation.attribute }), _jsx("td", { "data-id": "warnings-value", children: validation.warnings.map(function (warning, j) {
                                            return _jsx("div", { children: warning }, warning + j);
                                        }) }), _jsx("td", { "data-id": "errors-value", children: validation.errors.map(function (error, j) {
                                            return _jsx("div", { children: error }, error + j);
                                        }) })] }, i));
                        }) })] })] }));
};
var render = function (props) {
    var metacardValidation = props.metacardValidation, attributeValidation = props.attributeValidation, loading = props.loading;
    return loading ? (_jsx(_Fragment, { children: _jsx(LinearProgress, { className: "w-full h-2" }) })) : (_jsx(_Fragment, { children: _jsxs(Root, { children: [metacardValidation.length > 0 ? (_jsx(MetacardValidation, { metacardValidation: metacardValidation })) : (_jsx(Header, { children: "No Metacard Validation Issues to Report" })), attributeValidation.length > 0 ? (_jsx(AttributeValidation, { attributeValidation: attributeValidation })) : (_jsx(Header, { children: "No Attribute Validation Issues to Report" }))] }) }));
};
export default render;
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,