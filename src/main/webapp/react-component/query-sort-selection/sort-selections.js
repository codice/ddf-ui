import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
import Typography from '@mui/material/Typography';
import AddIcon from '@mui/icons-material/Add';
import SortItem from './sort-item';
import { getLabel, getNextAttribute, getSortAttributeOptions, getSortDirectionOptions, } from './sort-selection-helpers';
var getCollectionAsJson = function (collection) {
    var items = collection.map(function (sort) {
        return {
            attribute: {
                label: getLabel(sort.attribute),
                value: sort.attribute,
            },
            direction: sort.direction,
        };
    });
    return items;
};
var SortSelections = function (_a) {
    var _b = _a.value, value = _b === void 0 ? [] : _b, onChange = _a.onChange;
    if (!value.length) {
        value.push({
            attribute: 'title',
            direction: 'ascending',
        });
        onChange(value.slice(0));
    }
    var collectionJson = getCollectionAsJson(value);
    var sortAttributeOptions = getSortAttributeOptions(collectionJson.map(function (item) { return item.attribute.value; }));
    var updateAttribute = function (index) { return function (attribute) {
        value[index].attribute = attribute;
        onChange(value.slice(0));
    }; };
    var updateDirection = function (index) { return function (direction) {
        value[index].direction = direction;
        onChange(value.slice(0));
    }; };
    var removeItem = function (index) { return function () {
        value.splice(index, 1);
        onChange(value.slice(0));
    }; };
    var addSort = function () {
        value.push({
            attribute: getNextAttribute(collectionJson, sortAttributeOptions),
            direction: 'descending',
        });
        onChange(value.slice(0));
    };
    return (_jsxs("div", { "data-id": "root-sort-container", children: [_jsx(Typography, { "data-id": "Sort-changed", className: "pb-2", children: "Sort" }), collectionJson.map(function (sortItem, index) {
                return (_jsx("div", { "data-id": "sort-container", className: index > 0 ? 'pt-2' : '', children: _jsx(SortItem, { sortItem: sortItem, attributeOptions: sortAttributeOptions, directionOptions: getSortDirectionOptions(sortItem.attribute.value), updateAttribute: updateAttribute(index), updateDirection: updateDirection(index), onRemove: removeItem(index), showRemove: index !== 0 }) }, sortItem.attribute.value));
            }), _jsx("div", { className: "pt-2", children: _jsx(Button, { "data-id": "add-sort-button", color: "primary", fullWidth: true, onClick: addSort, children: _jsxs(Grid, { container: true, direction: "row", alignItems: "center", wrap: "nowrap", children: [_jsx(Grid, { item: true, children: _jsx(AddIcon, { className: "Mui-text-text-primary" }) }), _jsx(Grid, { item: true, children: "Sort" })] }) }) })] }));
};
export default SortSelections;
//# sourceMappingURL=data:application/json;base64,