import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import { isDirectionalSort } from './sort-selection-helpers';
import TextField from '@mui/material/TextField';
import Autocomplete from '@mui/material/Autocomplete';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import Swath from '../../component/swath/swath';
var SortItem = function (_a) {
    var sortItem = _a.sortItem, attributeOptions = _a.attributeOptions, directionOptions = _a.directionOptions, updateAttribute = _a.updateAttribute, updateDirection = _a.updateDirection, onRemove = _a.onRemove, showRemove = _a.showRemove;
    return (_jsx(_Fragment, { children: _jsxs("div", { children: [_jsxs(Grid, { container: true, direction: "row", wrap: "nowrap", alignItems: "center", children: [_jsx(Grid, { item: true, className: "w-full", children: _jsx(Autocomplete, { "data-id": "sort-type-autocomplete", size: "small", fullWidth: true, options: attributeOptions, getOptionLabel: function (option) { return option.label; }, isOptionEqualToValue: function (option, value) {
                                    return option.value === value.value;
                                }, onChange: function (_e, newValue) {
                                    var newProperty = newValue.value;
                                    updateAttribute(newProperty);
                                }, disableClearable: true, value: sortItem.attribute, renderInput: function (params) { return (_jsx(TextField, __assign({}, params, { variant: "outlined" }))); } }) }), showRemove ? (_jsx(Grid, { item: true, className: "pl-2", children: _jsx(Button, { "data-id": "remove-sort-button", onClick: onRemove, variant: "text", color: "primary", children: "Remove" }) })) : null] }), isDirectionalSort(sortItem.attribute.value) ? (_jsxs(Grid, { container: true, alignItems: "stretch", direction: "row", wrap: "nowrap", className: "pt-2", children: [_jsx(Grid, { item: true, children: _jsx(Swath, { className: "w-1 h-full" }) }), _jsx(Grid, { item: true, className: "w-full pl-2", children: _jsx(Autocomplete, { "data-id": "sort-order-autocomplete", size: "small", fullWidth: true, options: directionOptions, getOptionLabel: function (option) { return option.label; }, isOptionEqualToValue: function (option, value) {
                                    return option.value === value.value;
                                }, onChange: function (_e, newValue) {
                                    var newProperty = newValue.value;
                                    updateDirection(newProperty);
                                }, disableClearable: true, value: directionOptions.find(function (option) { return option.value === sortItem.direction; }), renderInput: function (params) { return (_jsx(TextField, __assign({}, params, { variant: "outlined" }))); } }) })] })) : null] }) }));
};
export default SortItem;
//# sourceMappingURL=data:application/json;base64,