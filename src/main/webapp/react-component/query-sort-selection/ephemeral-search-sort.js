import { __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import SortSelections from './sort-selections';
import { useBackbone } from '../../component/selection-checkbox/useBackbone.hook';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import user from '../../component/singletons/user-instance';
var getResultSort = function () {
    return user.get('user').get('preferences').get('resultSort') || [];
};
var PermanentSearchSort = function (_a) {
    var closeDropdown = _a.closeDropdown;
    var _b = __read(React.useState(getResultSort()), 2), sorts = _b[0], setSorts = _b[1];
    var _c = __read(React.useState(sorts.length > 0), 2), hasSort = _c[0], setHasSort = _c[1];
    var listenTo = useBackbone().listenTo;
    React.useEffect(function () {
        listenTo(user.get('user').get('preferences'), 'change:resultSort', function () {
            var resultSort = getResultSort();
            setHasSort(resultSort !== undefined && resultSort.length > 0);
            setSorts(resultSort);
        });
    }, []);
    var removeSort = function () {
        user.get('user').get('preferences').set('resultSort', '');
        user.get('user').get('preferences').savePreferences();
        closeDropdown();
    };
    var saveSort = function () {
        user
            .get('user')
            .get('preferences')
            .set('resultSort', sorts.length === 0 ? undefined : sorts);
        user.get('user').get('preferences').savePreferences();
        closeDropdown();
        // once again, something is weird with arrays and backbone?
        user.get('user').get('preferences').trigger('change:resultSort');
    };
    return (_jsxs("div", { "data-id": "results-sort-container", className: "min-w-120", children: [_jsx("div", { className: "pb-2", children: _jsx(SortSelections, { value: sorts, onChange: function (newVal) {
                        setSorts(newVal);
                    } }) }), _jsxs(Grid, { container: true, direction: "row", alignItems: "center", wrap: "nowrap", children: [hasSort ? (_jsx(Grid, { item: true, className: "w-full", children: _jsx(Button, { "data-id": "remove-all-results-sorts-button", fullWidth: true, onClick: removeSort, variant: "text", color: "secondary", children: "Remove Sort" }) })) : null, _jsx(Grid, { item: true, className: "w-full", children: _jsx(Button, { "data-id": "save-results-sorts-button", fullWidth: true, onClick: saveSort, variant: "contained", color: "primary", children: "Save Sort" }) })] })] }));
};
export default PermanentSearchSort;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXBoZW1lcmFsLXNlYXJjaC1zb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9xdWVyeS1zb3J0LXNlbGVjdGlvbi9lcGhlbWVyYWwtc2VhcmNoLXNvcnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFFOUIsT0FBTyxjQUFjLE1BQU0sbUJBQW1CLENBQUE7QUFDOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFEQUFxRCxDQUFBO0FBQ2pGLE9BQU8sSUFBSSxNQUFNLG9CQUFvQixDQUFBO0FBQ3JDLE9BQU8sTUFBTSxNQUFNLHNCQUFzQixDQUFBO0FBQ3pDLE9BQU8sSUFBSSxNQUFNLDBDQUEwQyxDQUFBO0FBRTNELElBQU0sYUFBYSxHQUFHO0lBQ3BCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUNwRSxDQUFDLENBQUE7QUFNRCxJQUFNLG1CQUFtQixHQUFHLFVBQUMsRUFBd0I7UUFBdEIsYUFBYSxtQkFBQTtJQUNwQyxJQUFBLEtBQUEsT0FBb0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFBLEVBQWxELEtBQUssUUFBQSxFQUFFLFFBQVEsUUFBbUMsQ0FBQTtJQUNuRCxJQUFBLEtBQUEsT0FBd0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFBLEVBQXZELE9BQU8sUUFBQSxFQUFFLFVBQVUsUUFBb0MsQ0FBQTtJQUN0RCxJQUFBLFFBQVEsR0FBSyxXQUFXLEVBQUUsU0FBbEIsQ0FBa0I7SUFFbEMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxtQkFBbUIsRUFBRTtZQUNqRSxJQUFNLFVBQVUsR0FBRyxhQUFhLEVBQUUsQ0FBQTtZQUNsQyxVQUFVLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQzdELFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN0QixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNOLElBQU0sVUFBVSxHQUFHO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDekQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7UUFDckQsYUFBYSxFQUFFLENBQUE7SUFDakIsQ0FBQyxDQUFBO0lBQ0QsSUFBTSxRQUFRLEdBQUc7UUFDZixJQUFJO2FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQzthQUNYLEdBQUcsQ0FBQyxhQUFhLENBQUM7YUFDbEIsR0FBRyxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUU1RCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUNyRCxhQUFhLEVBQUUsQ0FBQTtRQUNmLDJEQUEyRDtRQUMzRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtJQUNsRSxDQUFDLENBQUE7SUFDRCxPQUFPLENBQ0wsMEJBQWEsd0JBQXdCLEVBQUMsU0FBUyxFQUFDLFdBQVcsYUFDekQsY0FBSyxTQUFTLEVBQUMsTUFBTSxZQUNuQixLQUFDLGNBQWMsSUFDYixLQUFLLEVBQUUsS0FBSyxFQUNaLFFBQVEsRUFBRSxVQUFDLE1BQU07d0JBQ2YsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO29CQUNsQixDQUFDLEdBQ0QsR0FDRSxFQUNOLE1BQUMsSUFBSSxJQUFDLFNBQVMsUUFBQyxTQUFTLEVBQUMsS0FBSyxFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsSUFBSSxFQUFDLFFBQVEsYUFDOUQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUNULEtBQUMsSUFBSSxJQUFDLElBQUksUUFBQyxTQUFTLEVBQUMsUUFBUSxZQUMzQixLQUFDLE1BQU0sZUFDRyxpQ0FBaUMsRUFDekMsU0FBUyxRQUNULE9BQU8sRUFBRSxVQUFVLEVBQ25CLE9BQU8sRUFBQyxNQUFNLEVBQ2QsS0FBSyxFQUFDLFdBQVcsNEJBR1YsR0FDSixDQUNSLENBQUMsQ0FBQyxDQUFDLElBQUksRUFDUixLQUFDLElBQUksSUFBQyxJQUFJLFFBQUMsU0FBUyxFQUFDLFFBQVEsWUFDM0IsS0FBQyxNQUFNLGVBQ0csMkJBQTJCLEVBQ25DLFNBQVMsUUFDVCxPQUFPLEVBQUUsUUFBUSxFQUNqQixPQUFPLEVBQUMsV0FBVyxFQUNuQixLQUFLLEVBQUMsU0FBUywwQkFHUixHQUNKLElBQ0YsSUFDSCxDQUNQLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxlQUFlLG1CQUFtQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBTb3J0U2VsZWN0aW9ucyBmcm9tICcuL3NvcnQtc2VsZWN0aW9ucydcbmltcG9ydCB7IHVzZUJhY2tib25lIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50L3NlbGVjdGlvbi1jaGVja2JveC91c2VCYWNrYm9uZS5ob29rJ1xuaW1wb3J0IEdyaWQgZnJvbSAnQG11aS9tYXRlcmlhbC9HcmlkJ1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbXVpL21hdGVyaWFsL0J1dHRvbidcbmltcG9ydCB1c2VyIGZyb20gJy4uLy4uL2NvbXBvbmVudC9zaW5nbGV0b25zL3VzZXItaW5zdGFuY2UnXG5cbmNvbnN0IGdldFJlc3VsdFNvcnQgPSAoKSA9PiB7XG4gIHJldHVybiB1c2VyLmdldCgndXNlcicpLmdldCgncHJlZmVyZW5jZXMnKS5nZXQoJ3Jlc3VsdFNvcnQnKSB8fCBbXVxufVxuXG50eXBlIFByb3BzID0ge1xuICBjbG9zZURyb3Bkb3duOiAoKSA9PiB2b2lkXG59XG5cbmNvbnN0IFBlcm1hbmVudFNlYXJjaFNvcnQgPSAoeyBjbG9zZURyb3Bkb3duIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IFtzb3J0cywgc2V0U29ydHNdID0gUmVhY3QudXNlU3RhdGUoZ2V0UmVzdWx0U29ydCgpKVxuICBjb25zdCBbaGFzU29ydCwgc2V0SGFzU29ydF0gPSBSZWFjdC51c2VTdGF0ZShzb3J0cy5sZW5ndGggPiAwKVxuICBjb25zdCB7IGxpc3RlblRvIH0gPSB1c2VCYWNrYm9uZSgpXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsaXN0ZW5Ubyh1c2VyLmdldCgndXNlcicpLmdldCgncHJlZmVyZW5jZXMnKSwgJ2NoYW5nZTpyZXN1bHRTb3J0JywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0U29ydCA9IGdldFJlc3VsdFNvcnQoKVxuICAgICAgc2V0SGFzU29ydChyZXN1bHRTb3J0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0U29ydC5sZW5ndGggPiAwKVxuICAgICAgc2V0U29ydHMocmVzdWx0U29ydClcbiAgICB9KVxuICB9LCBbXSlcbiAgY29uc3QgcmVtb3ZlU29ydCA9ICgpID0+IHtcbiAgICB1c2VyLmdldCgndXNlcicpLmdldCgncHJlZmVyZW5jZXMnKS5zZXQoJ3Jlc3VsdFNvcnQnLCAnJylcbiAgICB1c2VyLmdldCgndXNlcicpLmdldCgncHJlZmVyZW5jZXMnKS5zYXZlUHJlZmVyZW5jZXMoKVxuICAgIGNsb3NlRHJvcGRvd24oKVxuICB9XG4gIGNvbnN0IHNhdmVTb3J0ID0gKCkgPT4ge1xuICAgIHVzZXJcbiAgICAgIC5nZXQoJ3VzZXInKVxuICAgICAgLmdldCgncHJlZmVyZW5jZXMnKVxuICAgICAgLnNldCgncmVzdWx0U29ydCcsIHNvcnRzLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHNvcnRzKVxuXG4gICAgdXNlci5nZXQoJ3VzZXInKS5nZXQoJ3ByZWZlcmVuY2VzJykuc2F2ZVByZWZlcmVuY2VzKClcbiAgICBjbG9zZURyb3Bkb3duKClcbiAgICAvLyBvbmNlIGFnYWluLCBzb21ldGhpbmcgaXMgd2VpcmQgd2l0aCBhcnJheXMgYW5kIGJhY2tib25lP1xuICAgIHVzZXIuZ2V0KCd1c2VyJykuZ2V0KCdwcmVmZXJlbmNlcycpLnRyaWdnZXIoJ2NoYW5nZTpyZXN1bHRTb3J0JylcbiAgfVxuICByZXR1cm4gKFxuICAgIDxkaXYgZGF0YS1pZD1cInJlc3VsdHMtc29ydC1jb250YWluZXJcIiBjbGFzc05hbWU9XCJtaW4tdy0xMjBcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGItMlwiPlxuICAgICAgICA8U29ydFNlbGVjdGlvbnNcbiAgICAgICAgICB2YWx1ZT17c29ydHN9XG4gICAgICAgICAgb25DaGFuZ2U9eyhuZXdWYWwpID0+IHtcbiAgICAgICAgICAgIHNldFNvcnRzKG5ld1ZhbClcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8R3JpZCBjb250YWluZXIgZGlyZWN0aW9uPVwicm93XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHdyYXA9XCJub3dyYXBcIj5cbiAgICAgICAge2hhc1NvcnQgPyAoXG4gICAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9XCJ3LWZ1bGxcIj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZGF0YS1pZD1cInJlbW92ZS1hbGwtcmVzdWx0cy1zb3J0cy1idXR0b25cIlxuICAgICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgICAgb25DbGljaz17cmVtb3ZlU29ydH1cbiAgICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJlbW92ZSBTb3J0XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInctZnVsbFwiPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGRhdGEtaWQ9XCJzYXZlLXJlc3VsdHMtc29ydHMtYnV0dG9uXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgb25DbGljaz17c2F2ZVNvcnR9XG4gICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgU2F2ZSBTb3J0XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgIDwvR3JpZD5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBQZXJtYW5lbnRTZWFyY2hTb3J0XG4iXX0=