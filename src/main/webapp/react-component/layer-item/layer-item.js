import { __assign, __read } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import { Box, Button, Slider } from '@mui/material';
import { useListenTo } from '../../component/selection-checkbox/useBackbone.hook';
var LayerName = function (props) {
    var _a = props.layerInfo.name, name = _a === void 0 ? 'Untitled' : _a;
    var show = props.visibility.show;
    return (_jsx(Box, { title: name, className: "overflow-hidden text-ellipsis leading-[40px] ".concat(!show && 'opacity-50 cursor-text'), children: name }));
};
var LayerAlpha = function (props) {
    var _a = props.visibility, show = _a.show, alpha = _a.alpha;
    var updateLayerAlpha = props.actions.updateLayerAlpha;
    return (_jsx(Slider, { "data-id": "alpha-slider", onChange: updateLayerAlpha, value: alpha, min: 0, max: 1, step: 0.01, disabled: !show, className: "inline-block align-middle" }));
};
var LayerInteractions = function (props) {
    var _a = props.layerInfo, isRemovable = _a.isRemovable, _b = _a.warning, warning = _b === void 0 ? '' : _b;
    var _c = props.actions, updateLayerShow = _c.updateLayerShow, onRemove = _c.onRemove;
    var show = props.visibility.show;
    return (_jsxs(Box, { className: "text-right", children: [warning !== '' && (_jsx(Button, { "data-id": "view-warnings-button", title: warning, className: "w-[40px] h-[40px] align-top text-warning", children: _jsx("span", { className: "fa fa-warning" }) })), isRemovable && (_jsx(Button, { "data-id": "remove-layer-button", title: "Remove map layer from user preferences.", onClick: onRemove, className: "w-[40px] h-[40px] align-top", children: _jsx("span", { className: "fa fa-minus" }) })), _jsx(Button, { "data-id": "visibility-button", title: "Toggle layer visibility.", onClick: updateLayerShow, className: "w-[40px] h-[40px] align-middle relative inline-block", children: _jsx("span", { className: "fa ".concat(show ? 'fa-eye' : 'fa-eye-slash', " absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2") }) })] }));
};
var LayerRearrange = function (props) {
    var upRef = React.useRef(null);
    var downRef = React.useRef(null);
    var _a = props.order, isTop = _a.isTop, isBottom = _a.isBottom;
    var _b = props.actions, moveUp = _b.moveUp, moveDown = _b.moveDown;
    var id = props.layerInfo.id;
    var focusModel = props.options.focusModel;
    React.useEffect(function () {
        if (focusModel.id === id) {
            var focusRef_1 = focusModel.isUp() ? upRef : downRef;
            focusRef_1 = isTop ? downRef : focusRef_1;
            focusRef_1 = isBottom ? upRef : focusRef_1;
            setTimeout(function () { var _a; return (_a = focusRef_1.current) === null || _a === void 0 ? void 0 : _a.focus(); }, 0);
        }
    }, []);
    return (_jsxs("div", { className: "relative grow-0 shrink-0 w-[40px]", children: [!isTop && (_jsx(Button, { ref: upRef, onClick: moveUp, className: "absolute z-10 top-0 h-[20px] w-full leading-[20px] opacity-0 focus:opacity-100 hover:opacity-100", children: _jsx("span", { className: "fa fa-angle-up absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2" }) })), !isBottom && (_jsx(Button, { ref: downRef, onClick: moveDown, className: "absolute z-10 bottom-0 h-[20px] w-full leading-[20px] opacity-0 focus:opacity-100 hover:opacity-100", children: _jsx("span", { className: "fa fa-angle-down absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2" }) })), _jsx(Button, { "data-id": "layer-rearrange-button", className: "layer-rearrange w-full h-full cursor-grab active:cursor-grabbing relative z-0", children: _jsx("span", { className: "fa fa-arrows-v" }) })] }));
};
var mapPropsToState = function (props) {
    var layer = props.layer;
    var show = layer.get('show');
    var alpha = layer.get('alpha');
    var order = layer.get('order');
    var isBottom = layer.collection.last().id === layer.id;
    var isTop = layer.collection.first().id === layer.id;
    return {
        order: { order: order, isBottom: isBottom, isTop: isTop },
        visibility: { show: show, alpha: alpha },
    };
};
var LayerItem = function (props) {
    var _a = __read(React.useState(mapPropsToState(props)), 2), state = _a[0], setState = _a[1];
    useListenTo(props.layer, 'change:show change:alpha change:order', function () {
        setState(mapPropsToState(props));
    });
    useListenTo(props.layer.collection, 'sort remove add', function () {
        setState(mapPropsToState(props));
    });
    var layer = props.layer;
    var id = layer.get('id');
    var layerInfo = {
        name: layer.get('name'),
        warning: layer.get('warning'),
        isRemovable: layer.has('userRemovable'),
        id: id,
    };
    var actions = {
        updateLayerShow: function () {
            var show = state.visibility.show;
            props.layer.set('show', !show);
        },
        updateLayerAlpha: function (e) {
            props.layer.set('alpha', e.target.value);
        },
        moveDown: function () {
            var focusModel = props.focusModel, layer = props.layer, sortable = props.sortable, updateOrdering = props.updateOrdering;
            var ordering = sortable.toArray();
            var currentIndex = ordering.indexOf(layer.id);
            ordering.splice(currentIndex, 1);
            ordering.splice(currentIndex + 1, 0, layer.id);
            sortable.sort(ordering);
            focusModel.setDown(layer.id);
            updateOrdering();
        },
        moveUp: function () {
            var layer = props.layer, sortable = props.sortable, focusModel = props.focusModel, updateOrdering = props.updateOrdering;
            var ordering = sortable.toArray();
            var currentIndex = ordering.indexOf(layer.id);
            ordering.splice(currentIndex - 1, 0, layer.id);
            ordering.splice(currentIndex + 1, 1);
            sortable.sort(ordering);
            focusModel.setUp(layer.id);
            updateOrdering();
        },
        onRemove: function () {
            var layer = props.layer;
            layer.collection.remove(layer);
        },
    };
    var presProps = __assign(__assign({}, state), { layerInfo: layerInfo, actions: actions, options: { focusModel: props.focusModel } });
    return (_jsx("div", { className: "layer-item", "data-id": id, "layer-id": id, children: _jsxs("div", { className: "flex flex-row items-stretch whitespace-nowrap w-full overflow-hidden relative border-2 border-white/10 ".concat(!state.order.isTop && 'border-t-0', " min-w-[400px]"), children: [_jsx(LayerRearrange, __assign({}, presProps)), _jsxs(Box, { className: "inline-block align-middle px-4 w-full border-l-2 border-white/10 grow shrink", children: [_jsx(LayerName, __assign({}, presProps)), _jsx(LayerAlpha, __assign({}, presProps)), _jsx(LayerInteractions, __assign({}, presProps))] })] }) }));
};
export default LayerItem;
//# sourceMappingURL=data:application/json;base64,