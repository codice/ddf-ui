import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
// @ts-nocheck FIXME: Property 'collection' does not exist on type 'Intr
import SortSelections from '../query-sort-selection/sort-selections';
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
var render = function (_a) {
    var removeSort = _a.removeSort, saveSort = _a.saveSort, hasSort = _a.hasSort, collection = _a.collection;
    return (_jsxs("div", { className: "min-w-120", children: [_jsx(SortSelections, { collection: collection }), _jsxs(Grid, { container: true, direction: "row", alignItems: "center", wrap: "nowrap", children: [hasSort ? (_jsx(Grid, { item: true, className: "w-full", children: _jsx(Button, { fullWidth: true, onClick: removeSort, variant: "text", color: "secondary", children: "Remove Sort" }) })) : null, _jsx(Grid, { item: true, className: "w-full", children: _jsx(Button, { fullWidth: true, onClick: saveSort, variant: "contained", color: "primary", children: "Save Sort" }) })] })] }));
};
export default render;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VudGF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9yZXN1bHQtc29ydC9wcmVzZW50YXRpb24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBQ0osd0VBQXdFO0FBRXhFLE9BQU8sY0FBYyxNQUFNLHlDQUF5QyxDQUFBO0FBQ3BFLE9BQU8sTUFBTSxNQUFNLHNCQUFzQixDQUFBO0FBQ3pDLE9BQU8sSUFBSSxNQUFNLG9CQUFvQixDQUFBO0FBU3JDLElBQU0sTUFBTSxHQUFHLFVBQUMsRUFBb0Q7UUFBbEQsVUFBVSxnQkFBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLE9BQU8sYUFBQSxFQUFFLFVBQVUsZ0JBQUE7SUFDekQsT0FBTyxDQUNMLGVBQUssU0FBUyxFQUFDLFdBQVcsYUFDeEIsS0FBQyxjQUFjLElBQUMsVUFBVSxFQUFFLFVBQVUsR0FBSSxFQUMxQyxNQUFDLElBQUksSUFBQyxTQUFTLFFBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLElBQUksRUFBQyxRQUFRLGFBQzlELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDVCxLQUFDLElBQUksSUFBQyxJQUFJLFFBQUMsU0FBUyxFQUFDLFFBQVEsWUFDM0IsS0FBQyxNQUFNLElBQ0wsU0FBUyxRQUNULE9BQU8sRUFBRSxVQUFVLEVBQ25CLE9BQU8sRUFBQyxNQUFNLEVBQ2QsS0FBSyxFQUFDLFdBQVcsNEJBR1YsR0FDSixDQUNSLENBQUMsQ0FBQyxDQUFDLElBQUksRUFDUixLQUFDLElBQUksSUFBQyxJQUFJLFFBQUMsU0FBUyxFQUFDLFFBQVEsWUFDM0IsS0FBQyxNQUFNLElBQ0wsU0FBUyxRQUNULE9BQU8sRUFBRSxRQUFRLEVBQ2pCLE9BQU8sRUFBQyxXQUFXLEVBQ25CLEtBQUssRUFBQyxTQUFTLDBCQUdSLEdBQ0osSUFDRixJQUNILENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELGVBQWUsTUFBTSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIENvZGljZSBGb3VuZGF0aW9uXG4gKlxuICogVGhpcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXRcbiAqIGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gQSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGlzIGRpc3RyaWJ1dGVkIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtIGFuZCBjYW4gYmUgZm91bmQgYXRcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvbGdwbC5odG1sPi5cbiAqXG4gKiovXG4vLyBAdHMtbm9jaGVjayBGSVhNRTogUHJvcGVydHkgJ2NvbGxlY3Rpb24nIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ0ludHJcblxuaW1wb3J0IFNvcnRTZWxlY3Rpb25zIGZyb20gJy4uL3F1ZXJ5LXNvcnQtc2VsZWN0aW9uL3NvcnQtc2VsZWN0aW9ucydcbmltcG9ydCBCdXR0b24gZnJvbSAnQG11aS9tYXRlcmlhbC9CdXR0b24nXG5pbXBvcnQgR3JpZCBmcm9tICdAbXVpL21hdGVyaWFsL0dyaWQnXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJlbW92ZVNvcnQ6ICgpID0+IHZvaWRcbiAgc2F2ZVNvcnQ6ICgpID0+IHZvaWRcbiAgaGFzU29ydDogQm9vbGVhblxuICBjb2xsZWN0aW9uOiBCYWNrYm9uZS5Db2xsZWN0aW9uPEJhY2tib25lLk1vZGVsPlxufVxuXG5jb25zdCByZW5kZXIgPSAoeyByZW1vdmVTb3J0LCBzYXZlU29ydCwgaGFzU29ydCwgY29sbGVjdGlvbiB9OiBQcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWluLXctMTIwXCI+XG4gICAgICA8U29ydFNlbGVjdGlvbnMgY29sbGVjdGlvbj17Y29sbGVjdGlvbn0gLz5cbiAgICAgIDxHcmlkIGNvbnRhaW5lciBkaXJlY3Rpb249XCJyb3dcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgd3JhcD1cIm5vd3JhcFwiPlxuICAgICAgICB7aGFzU29ydCA/IChcbiAgICAgICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInctZnVsbFwiPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgICAgb25DbGljaz17cmVtb3ZlU29ydH1cbiAgICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJlbW92ZSBTb3J0XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInctZnVsbFwiPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgb25DbGljaz17c2F2ZVNvcnR9XG4gICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgU2F2ZSBTb3J0XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgIDwvR3JpZD5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCByZW5kZXJcbiJdfQ==