/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
// @ts-nocheck FIXME: Property 'collection' does not exist on type 'Intr
import { hot } from 'react-hot-loader';
import * as React from 'react';
import SortSelections from '../query-sort-selection/sort-selections';
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';
var render = function (_a) {
    var removeSort = _a.removeSort, saveSort = _a.saveSort, hasSort = _a.hasSort, collection = _a.collection;
    return (React.createElement("div", { className: "min-w-120" },
        React.createElement(SortSelections, { collection: collection }),
        React.createElement(Grid, { container: true, direction: "row", alignItems: "center", wrap: "nowrap" },
            hasSort ? (React.createElement(Grid, { item: true, className: "w-full" },
                React.createElement(Button, { fullWidth: true, onClick: removeSort, variant: "text", color: "secondary" }, "Remove Sort"))) : null,
            React.createElement(Grid, { item: true, className: "w-full" },
                React.createElement(Button, { fullWidth: true, onClick: saveSort, variant: "contained", color: "primary" }, "Save Sort")))));
};
export default hot(module)(render);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VudGF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9yZXN1bHQtc29ydC9wcmVzZW50YXRpb24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7QUFDSix3RUFBd0U7QUFDeEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ3RDLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQzlCLE9BQU8sY0FBYyxNQUFNLHlDQUF5QyxDQUFBO0FBQ3BFLE9BQU8sTUFBTSxNQUFNLHNCQUFzQixDQUFBO0FBQ3pDLE9BQU8sSUFBSSxNQUFNLG9CQUFvQixDQUFBO0FBU3JDLElBQU0sTUFBTSxHQUFHLFVBQUMsRUFBb0Q7UUFBbEQsVUFBVSxnQkFBQSxFQUFFLFFBQVEsY0FBQSxFQUFFLE9BQU8sYUFBQSxFQUFFLFVBQVUsZ0JBQUE7SUFDekQsT0FBTyxDQUNMLDZCQUFLLFNBQVMsRUFBQyxXQUFXO1FBQ3hCLG9CQUFDLGNBQWMsSUFBQyxVQUFVLEVBQUUsVUFBVSxHQUFJO1FBQzFDLG9CQUFDLElBQUksSUFBQyxTQUFTLFFBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLElBQUksRUFBQyxRQUFRO1lBQzlELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDVCxvQkFBQyxJQUFJLElBQUMsSUFBSSxRQUFDLFNBQVMsRUFBQyxRQUFRO2dCQUMzQixvQkFBQyxNQUFNLElBQ0wsU0FBUyxRQUNULE9BQU8sRUFBRSxVQUFVLEVBQ25CLE9BQU8sRUFBQyxNQUFNLEVBQ2QsS0FBSyxFQUFDLFdBQVcsa0JBR1YsQ0FDSixDQUNSLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDUixvQkFBQyxJQUFJLElBQUMsSUFBSSxRQUFDLFNBQVMsRUFBQyxRQUFRO2dCQUMzQixvQkFBQyxNQUFNLElBQ0wsU0FBUyxRQUNULE9BQU8sRUFBRSxRQUFRLEVBQ2pCLE9BQU8sRUFBQyxXQUFXLEVBQ25CLEtBQUssRUFBQyxTQUFTLGdCQUdSLENBQ0osQ0FDRixDQUNILENBQ1AsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELGVBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIENvZGljZSBGb3VuZGF0aW9uXG4gKlxuICogVGhpcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXRcbiAqIGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gQSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGlzIGRpc3RyaWJ1dGVkIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtIGFuZCBjYW4gYmUgZm91bmQgYXRcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvbGdwbC5odG1sPi5cbiAqXG4gKiovXG4vLyBAdHMtbm9jaGVjayBGSVhNRTogUHJvcGVydHkgJ2NvbGxlY3Rpb24nIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ0ludHJcbmltcG9ydCB7IGhvdCB9IGZyb20gJ3JlYWN0LWhvdC1sb2FkZXInXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBTb3J0U2VsZWN0aW9ucyBmcm9tICcuLi9xdWVyeS1zb3J0LXNlbGVjdGlvbi9zb3J0LXNlbGVjdGlvbnMnXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJ1xuaW1wb3J0IEdyaWQgZnJvbSAnQG11aS9tYXRlcmlhbC9HcmlkJ1xuXG50eXBlIFByb3BzID0ge1xuICByZW1vdmVTb3J0OiAoKSA9PiB2b2lkXG4gIHNhdmVTb3J0OiAoKSA9PiB2b2lkXG4gIGhhc1NvcnQ6IEJvb2xlYW5cbiAgY29sbGVjdGlvbjogQmFja2JvbmUuQ29sbGVjdGlvbjxCYWNrYm9uZS5Nb2RlbD5cbn1cblxuY29uc3QgcmVuZGVyID0gKHsgcmVtb3ZlU29ydCwgc2F2ZVNvcnQsIGhhc1NvcnQsIGNvbGxlY3Rpb24gfTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi13LTEyMFwiPlxuICAgICAgPFNvcnRTZWxlY3Rpb25zIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IC8+XG4gICAgICA8R3JpZCBjb250YWluZXIgZGlyZWN0aW9uPVwicm93XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHdyYXA9XCJub3dyYXBcIj5cbiAgICAgICAge2hhc1NvcnQgPyAoXG4gICAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9XCJ3LWZ1bGxcIj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3JlbW92ZVNvcnR9XG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBSZW1vdmUgU29ydFxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9HcmlkPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9XCJ3LWZ1bGxcIj5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIG9uQ2xpY2s9e3NhdmVTb3J0fVxuICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIFNhdmUgU29ydFxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L0dyaWQ+XG4gICAgICA8L0dyaWQ+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgaG90KG1vZHVsZSkocmVuZGVyKVxuIl19