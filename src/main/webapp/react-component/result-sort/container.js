/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import { __read } from "tslib";
import { hot } from 'react-hot-loader';
import * as React from 'react';
import ResultSortPresentation from './presentation';
import { useBackbone } from '../../component/selection-checkbox/useBackbone.hook';
import Backbone from 'backbone';
import user from '../../component/singletons/user-instance';
var getResultSort = function () {
    return user.get('user').get('preferences').get('resultSort');
};
var ResultSortContainer = function (_a) {
    var closeDropdown = _a.closeDropdown;
    var _b = __read(React.useState(new Backbone.Collection(getResultSort())), 2), collection = _b[0], setCollection = _b[1];
    var _c = __read(React.useState(collection.length > 0), 2), hasSort = _c[0], setHasSort = _c[1];
    var listenTo = useBackbone().listenTo;
    React.useEffect(function () {
        listenTo(user.get('user').get('preferences'), 'change:resultSort', function () {
            var resultSort = getResultSort();
            setHasSort(resultSort !== undefined && resultSort.length > 0);
            setCollection(new Backbone.Collection(resultSort));
        });
    }, []);
    var removeSort = function () {
        user.get('user').get('preferences').set('resultSort', undefined);
        user.get('user').get('preferences').savePreferences();
        closeDropdown();
    };
    var saveSort = function () {
        var sorting = collection.toJSON();
        user
            .get('user')
            .get('preferences')
            .set('resultSort', sorting.length === 0 ? undefined : sorting);
        user.get('user').get('preferences').savePreferences();
        closeDropdown();
    };
    return (React.createElement(ResultSortPresentation, { key: Math.random(), saveSort: saveSort, removeSort: removeSort, collection: collection, hasSort: hasSort }));
};
export default hot(module)(ResultSortContainer);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9yZXN1bHQtc29ydC9jb250YWluZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7O0FBRUosT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ3RDLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQzlCLE9BQU8sc0JBQXNCLE1BQU0sZ0JBQWdCLENBQUE7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFEQUFxRCxDQUFBO0FBRWpGLE9BQU8sUUFBUSxNQUFNLFVBQVUsQ0FBQTtBQUMvQixPQUFPLElBQUksTUFBTSwwQ0FBMEMsQ0FBQTtBQU0zRCxJQUFNLGFBQWEsR0FBRztJQUNwQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUM5RCxDQUFDLENBQUE7QUFFRCxJQUFNLG1CQUFtQixHQUFHLFVBQUMsRUFBd0I7UUFBdEIsYUFBYSxtQkFBQTtJQUNwQyxJQUFBLEtBQUEsT0FBOEIsS0FBSyxDQUFDLFFBQVEsQ0FDaEQsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQ3pDLElBQUEsRUFGTSxVQUFVLFFBQUEsRUFBRSxhQUFhLFFBRS9CLENBQUE7SUFDSyxJQUFBLEtBQUEsT0FBd0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFBLEVBQTVELE9BQU8sUUFBQSxFQUFFLFVBQVUsUUFBeUMsQ0FBQTtJQUMzRCxJQUFBLFFBQVEsR0FBSyxXQUFXLEVBQUUsU0FBbEIsQ0FBa0I7SUFDbEMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxtQkFBbUIsRUFBRTtZQUNqRSxJQUFNLFVBQVUsR0FBRyxhQUFhLEVBQUUsQ0FBQTtZQUNsQyxVQUFVLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQzdELGFBQWEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUNwRCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNOLElBQU0sVUFBVSxHQUFHO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDaEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7UUFDckQsYUFBYSxFQUFFLENBQUE7SUFDakIsQ0FBQyxDQUFBO0lBQ0QsSUFBTSxRQUFRLEdBQUc7UUFDZixJQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDbkMsSUFBSTthQUNELEdBQUcsQ0FBQyxNQUFNLENBQUM7YUFDWCxHQUFHLENBQUMsYUFBYSxDQUFDO2FBQ2xCLEdBQUcsQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDaEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7UUFDckQsYUFBYSxFQUFFLENBQUE7SUFDakIsQ0FBQyxDQUFBO0lBQ0QsT0FBTyxDQUNMLG9CQUFDLHNCQUFzQixJQUNyQixHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUNsQixRQUFRLEVBQUUsUUFBUSxFQUNsQixVQUFVLEVBQUUsVUFBVSxFQUN0QixVQUFVLEVBQUUsVUFBVSxFQUN0QixPQUFPLEVBQUUsT0FBTyxHQUNoQixDQUNILENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxlQUFlLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIENvZGljZSBGb3VuZGF0aW9uXG4gKlxuICogVGhpcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXRcbiAqIGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gQSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGlzIGRpc3RyaWJ1dGVkIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtIGFuZCBjYW4gYmUgZm91bmQgYXRcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvbGdwbC5odG1sPi5cbiAqXG4gKiovXG5cbmltcG9ydCB7IGhvdCB9IGZyb20gJ3JlYWN0LWhvdC1sb2FkZXInXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBSZXN1bHRTb3J0UHJlc2VudGF0aW9uIGZyb20gJy4vcHJlc2VudGF0aW9uJ1xuaW1wb3J0IHsgdXNlQmFja2JvbmUgfSBmcm9tICcuLi8uLi9jb21wb25lbnQvc2VsZWN0aW9uLWNoZWNrYm94L3VzZUJhY2tib25lLmhvb2snXG5cbmltcG9ydCBCYWNrYm9uZSBmcm9tICdiYWNrYm9uZSdcbmltcG9ydCB1c2VyIGZyb20gJy4uLy4uL2NvbXBvbmVudC9zaW5nbGV0b25zL3VzZXItaW5zdGFuY2UnXG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNsb3NlRHJvcGRvd246IGFueVxufVxuXG5jb25zdCBnZXRSZXN1bHRTb3J0ID0gKCkgPT4ge1xuICByZXR1cm4gdXNlci5nZXQoJ3VzZXInKS5nZXQoJ3ByZWZlcmVuY2VzJykuZ2V0KCdyZXN1bHRTb3J0Jylcbn1cblxuY29uc3QgUmVzdWx0U29ydENvbnRhaW5lciA9ICh7IGNsb3NlRHJvcGRvd24gfTogUHJvcHMpID0+IHtcbiAgY29uc3QgW2NvbGxlY3Rpb24sIHNldENvbGxlY3Rpb25dID0gUmVhY3QudXNlU3RhdGUoXG4gICAgbmV3IEJhY2tib25lLkNvbGxlY3Rpb24oZ2V0UmVzdWx0U29ydCgpKVxuICApXG4gIGNvbnN0IFtoYXNTb3J0LCBzZXRIYXNTb3J0XSA9IFJlYWN0LnVzZVN0YXRlKGNvbGxlY3Rpb24ubGVuZ3RoID4gMClcbiAgY29uc3QgeyBsaXN0ZW5UbyB9ID0gdXNlQmFja2JvbmUoKVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxpc3RlblRvKHVzZXIuZ2V0KCd1c2VyJykuZ2V0KCdwcmVmZXJlbmNlcycpLCAnY2hhbmdlOnJlc3VsdFNvcnQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHRTb3J0ID0gZ2V0UmVzdWx0U29ydCgpXG4gICAgICBzZXRIYXNTb3J0KHJlc3VsdFNvcnQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHRTb3J0Lmxlbmd0aCA+IDApXG4gICAgICBzZXRDb2xsZWN0aW9uKG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uKHJlc3VsdFNvcnQpKVxuICAgIH0pXG4gIH0sIFtdKVxuICBjb25zdCByZW1vdmVTb3J0ID0gKCkgPT4ge1xuICAgIHVzZXIuZ2V0KCd1c2VyJykuZ2V0KCdwcmVmZXJlbmNlcycpLnNldCgncmVzdWx0U29ydCcsIHVuZGVmaW5lZClcbiAgICB1c2VyLmdldCgndXNlcicpLmdldCgncHJlZmVyZW5jZXMnKS5zYXZlUHJlZmVyZW5jZXMoKVxuICAgIGNsb3NlRHJvcGRvd24oKVxuICB9XG4gIGNvbnN0IHNhdmVTb3J0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHNvcnRpbmcgPSBjb2xsZWN0aW9uLnRvSlNPTigpXG4gICAgdXNlclxuICAgICAgLmdldCgndXNlcicpXG4gICAgICAuZ2V0KCdwcmVmZXJlbmNlcycpXG4gICAgICAuc2V0KCdyZXN1bHRTb3J0Jywgc29ydGluZy5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBzb3J0aW5nKVxuICAgIHVzZXIuZ2V0KCd1c2VyJykuZ2V0KCdwcmVmZXJlbmNlcycpLnNhdmVQcmVmZXJlbmNlcygpXG4gICAgY2xvc2VEcm9wZG93bigpXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8UmVzdWx0U29ydFByZXNlbnRhdGlvblxuICAgICAga2V5PXtNYXRoLnJhbmRvbSgpfVxuICAgICAgc2F2ZVNvcnQ9e3NhdmVTb3J0fVxuICAgICAgcmVtb3ZlU29ydD17cmVtb3ZlU29ydH1cbiAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICBoYXNTb3J0PXtoYXNTb3J0fVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgaG90KG1vZHVsZSkoUmVzdWx0U29ydENvbnRhaW5lcilcbiJdfQ==