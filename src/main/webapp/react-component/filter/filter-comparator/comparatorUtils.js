import { __read } from "tslib";
import { getAttributeType } from '../filterHelper';
import React from 'react';
// verified
export var dateComparators = [
    {
        value: 'BEFORE',
        label: 'BEFORE',
    },
    {
        value: 'AFTER',
        label: 'AFTER',
    },
    {
        value: 'RELATIVE',
        label: 'WITHIN THE LAST',
    },
    {
        value: 'DURING',
        label: 'BETWEEN',
    },
    {
        value: 'IS NULL',
        label: 'IS EMPTY',
    },
    {
        value: 'AROUND',
        label: 'AROUND',
    },
];
// verified
export var geometryComparators = [
    {
        value: 'GEOMETRY',
        label: 'INTERSECTS',
    },
    {
        value: 'IS NULL',
        label: 'IS EMPTY',
    },
];
// verified
export var stringComparators = [
    {
        value: 'ILIKE',
        label: 'CONTAINS',
    },
    {
        value: 'LIKE',
        label: 'MATCHCASE',
    },
    {
        value: '=',
        label: '=',
    },
    {
        value: 'FILTER FUNCTION proximity',
        label: 'NEAR',
    },
    {
        value: 'BOOLEAN_TEXT_SEARCH',
        label: 'BOOLEAN',
    },
    {
        value: 'IS NULL',
        label: 'IS EMPTY',
    },
];
// verified
export var numberComparators = [
    {
        value: '>',
        label: '>',
    },
    {
        value: '<',
        label: '<',
    },
    {
        value: '=',
        label: '=',
    },
    {
        value: '>=',
        label: '>=',
    },
    {
        value: '<=',
        label: '<=',
    },
    {
        value: 'BETWEEN',
        label: 'RANGE',
    },
    {
        value: 'IS NULL',
        label: 'IS EMPTY',
    },
];
// verified
export var booleanComparators = [
    {
        value: '=',
        label: '=',
    },
    {
        value: 'IS NULL',
        label: 'IS EMPTY',
    },
];
export var TypeToComparators = {
    STRING: stringComparators,
    DATE: dateComparators,
    LONG: numberComparators,
    DOUBLE: numberComparators,
    FLOAT: numberComparators,
    INTEGER: numberComparators,
    SHORT: numberComparators,
    LOCATION: geometryComparators,
    GEOMETRY: geometryComparators,
    BOOLEAN: booleanComparators,
    XML: [],
    OBJECT: [],
    BINARY: [],
};
export var getComparators = function (attribute) {
    var comparators = TypeToComparators[getAttributeType(attribute)] || [];
    // IS NULL checks do not work on these
    if (attribute === 'anyGeo' || attribute === 'anyText') {
        comparators = comparators.filter(function (comparator) { return comparator.value !== 'IS NULL'; });
    }
    return comparators;
};
export var ComparatorContext = React.createContext({
    getComparators: getComparators,
});
export function DefaultComparatorProvider(_a) {
    var children = _a.children;
    return (React.createElement(ComparatorContext.Provider, { value: { getComparators: getComparators } }, children));
}
export function useComparators() {
    return React.useContext(ComparatorContext);
}
export function useGetComparators() {
    return useComparators().getComparators;
}
export function useComparatorsForAttribute(attribute) {
    var comparators = useGetComparators();
    var _a = __read(React.useState(comparators(attribute)), 2), comparatorList = _a[0], setComparatorList = _a[1];
    React.useEffect(function () {
        setComparatorList(comparators(attribute));
    }, [attribute, comparators]);
    return comparatorList;
}
//# sourceMappingURL=data:application/json;base64,