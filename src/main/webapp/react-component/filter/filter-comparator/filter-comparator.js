import { __assign } from "tslib";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import React, { useEffect } from 'react';
import MenuItem from '@mui/material/MenuItem';
import TextField from '@mui/material/TextField';
import { FilterClass, isBasicDatatypeClass, } from '../../../component/filter-builder/filter.structure';
import { useComparatorsForAttribute } from './comparatorUtils';
var FilterComparator = function (_a) {
    var filter = _a.filter, setFilter = _a.setFilter, textFieldProps = _a.textFieldProps;
    var comparators = useComparatorsForAttribute(filter.property);
    useEffect(function () {
        var _a;
        if (!comparators.map(function (comparator) { return comparator.value; }).includes(filter.type)) {
            setFilter(new FilterClass(__assign(__assign({}, filter), { type: (_a = comparators[0]) === null || _a === void 0 ? void 0 : _a.value })));
        }
    }, [filter, setFilter, comparators]);
    if (isBasicDatatypeClass(filter)) {
        return null;
    }
    return (React.createElement(TextField, __assign({ "data-id": "filter-comparator-select", fullWidth: true, variant: "outlined", select: true, value: filter.type, onChange: function (e) {
            var newType = e.target.value;
            setFilter(new FilterClass(__assign(__assign({}, filter), { type: newType })));
        }, size: "small" }, textFieldProps), comparators.map(function (comparator) { return (React.createElement(MenuItem, { value: comparator.value, key: comparator.label }, comparator.label)); })));
};
export default FilterComparator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvbXBhcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWFpbi93ZWJhcHAvcmVhY3QtY29tcG9uZW50L2ZpbHRlci9maWx0ZXItY29tcGFyYXRvci9maWx0ZXItY29tcGFyYXRvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7QUFDSixPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQTtBQUN4QyxPQUFPLFFBQVEsTUFBTSx3QkFBd0IsQ0FBQTtBQUM3QyxPQUFPLFNBQTZCLE1BQU0seUJBQXlCLENBQUE7QUFDbkUsT0FBTyxFQUNMLFdBQVcsRUFDWCxvQkFBb0IsR0FDckIsTUFBTSxvREFBb0QsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQVE5RCxJQUFNLGdCQUFnQixHQUFHLFVBQUMsRUFBNEM7UUFBMUMsTUFBTSxZQUFBLEVBQUUsU0FBUyxlQUFBLEVBQUUsY0FBYyxvQkFBQTtJQUMzRCxJQUFNLFdBQVcsR0FBRywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDL0QsU0FBUyxDQUFDOztRQUNSLElBQ0UsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQUMsVUFBVSxJQUFLLE9BQUEsVUFBVSxDQUFDLEtBQUssRUFBaEIsQ0FBZ0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQ3hFO1lBQ0EsU0FBUyxDQUNQLElBQUksV0FBVyx1QkFDVixNQUFNLEtBQ1QsSUFBSSxFQUFFLE1BQUEsV0FBVyxDQUFDLENBQUMsQ0FBQywwQ0FBRSxLQUE0QixJQUNsRCxDQUNILENBQUE7U0FDRjtJQUNILENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQTtJQUVwQyxJQUFJLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2hDLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFFRCxPQUFPLENBQ0wsb0JBQUMsU0FBUyx3QkFDQSwwQkFBMEIsRUFDbEMsU0FBUyxRQUNULE9BQU8sRUFBQyxVQUFVLEVBQ2xCLE1BQU0sUUFDTixLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksRUFDbEIsUUFBUSxFQUFFLFVBQUMsQ0FBQztZQUNWLElBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBNEIsQ0FBQTtZQUNyRCxTQUFTLENBQ1AsSUFBSSxXQUFXLHVCQUNWLE1BQU0sS0FDVCxJQUFJLEVBQUUsT0FBTyxJQUNiLENBQ0gsQ0FBQTtRQUNILENBQUMsRUFDRCxJQUFJLEVBQUMsT0FBTyxJQUNSLGNBQWMsR0FFakIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFDLFVBQVUsSUFBSyxPQUFBLENBQy9CLG9CQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEtBQUssSUFDckQsVUFBVSxDQUFDLEtBQUssQ0FDUixDQUNaLEVBSmdDLENBSWhDLENBQUMsQ0FDUSxDQUNiLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxlQUFlLGdCQUFnQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIENvZGljZSBGb3VuZGF0aW9uXG4gKlxuICogVGhpcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlclxuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXRcbiAqIGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gQSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGlzIGRpc3RyaWJ1dGVkIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtIGFuZCBjYW4gYmUgZm91bmQgYXRcbiAqIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvbGdwbC5odG1sPi5cbiAqXG4gKiovXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnQG11aS9tYXRlcmlhbC9NZW51SXRlbSdcbmltcG9ydCBUZXh0RmllbGQsIHsgVGV4dEZpZWxkUHJvcHMgfSBmcm9tICdAbXVpL21hdGVyaWFsL1RleHRGaWVsZCdcbmltcG9ydCB7XG4gIEZpbHRlckNsYXNzLFxuICBpc0Jhc2ljRGF0YXR5cGVDbGFzcyxcbn0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50L2ZpbHRlci1idWlsZGVyL2ZpbHRlci5zdHJ1Y3R1cmUnXG5pbXBvcnQgeyB1c2VDb21wYXJhdG9yc0ZvckF0dHJpYnV0ZSB9IGZyb20gJy4vY29tcGFyYXRvclV0aWxzJ1xuXG50eXBlIFByb3BzID0ge1xuICBmaWx0ZXI6IEZpbHRlckNsYXNzXG4gIHNldEZpbHRlcjogKGZpbHRlcjogRmlsdGVyQ2xhc3MpID0+IHZvaWRcbiAgdGV4dEZpZWxkUHJvcHM/OiBUZXh0RmllbGRQcm9wc1xufVxuXG5jb25zdCBGaWx0ZXJDb21wYXJhdG9yID0gKHsgZmlsdGVyLCBzZXRGaWx0ZXIsIHRleHRGaWVsZFByb3BzIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGNvbXBhcmF0b3JzID0gdXNlQ29tcGFyYXRvcnNGb3JBdHRyaWJ1dGUoZmlsdGVyLnByb3BlcnR5KVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgICFjb21wYXJhdG9ycy5tYXAoKGNvbXBhcmF0b3IpID0+IGNvbXBhcmF0b3IudmFsdWUpLmluY2x1ZGVzKGZpbHRlci50eXBlKVxuICAgICkge1xuICAgICAgc2V0RmlsdGVyKFxuICAgICAgICBuZXcgRmlsdGVyQ2xhc3Moe1xuICAgICAgICAgIC4uLmZpbHRlcixcbiAgICAgICAgICB0eXBlOiBjb21wYXJhdG9yc1swXT8udmFsdWUgYXMgRmlsdGVyQ2xhc3NbJ3R5cGUnXSxcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG4gIH0sIFtmaWx0ZXIsIHNldEZpbHRlciwgY29tcGFyYXRvcnNdKVxuXG4gIGlmIChpc0Jhc2ljRGF0YXR5cGVDbGFzcyhmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFRleHRGaWVsZFxuICAgICAgZGF0YS1pZD1cImZpbHRlci1jb21wYXJhdG9yLXNlbGVjdFwiXG4gICAgICBmdWxsV2lkdGhcbiAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICBzZWxlY3RcbiAgICAgIHZhbHVlPXtmaWx0ZXIudHlwZX1cbiAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdUeXBlID0gZS50YXJnZXQudmFsdWUgYXMgRmlsdGVyQ2xhc3NbJ3R5cGUnXVxuICAgICAgICBzZXRGaWx0ZXIoXG4gICAgICAgICAgbmV3IEZpbHRlckNsYXNzKHtcbiAgICAgICAgICAgIC4uLmZpbHRlcixcbiAgICAgICAgICAgIHR5cGU6IG5ld1R5cGUsXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfX1cbiAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICB7Li4udGV4dEZpZWxkUHJvcHN9XG4gICAgPlxuICAgICAge2NvbXBhcmF0b3JzLm1hcCgoY29tcGFyYXRvcikgPT4gKFxuICAgICAgICA8TWVudUl0ZW0gdmFsdWU9e2NvbXBhcmF0b3IudmFsdWV9IGtleT17Y29tcGFyYXRvci5sYWJlbH0+XG4gICAgICAgICAge2NvbXBhcmF0b3IubGFiZWx9XG4gICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICApKX1cbiAgICA8L1RleHRGaWVsZD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJDb21wYXJhdG9yXG4iXX0=