/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import FilterComparator from './filter-comparator';
import FilterInput from './filter-input';
import Grid from '@mui/material/Grid';
import { hot } from 'react-hot-loader';
import { FilterProperty } from './filter-property';
import { DefaultComparatorProvider } from './filter-comparator/comparatorUtils';
import { DefaultFilterInputProvider } from './filter-input/filter-input';
export var FilterContext = React.createContext({
    limitedAttributeList: undefined,
});
var Filter = function (_a) {
    var filter = _a.filter, setFilter = _a.setFilter, errorListener = _a.errorListener;
    return (React.createElement(Grid, { container: true, direction: "column", alignItems: "center", className: "w-full" },
        React.createElement(Grid, { item: true, className: "w-full pb-2" },
            React.createElement(FilterProperty, { filter: filter, setFilter: setFilter, errorListener: errorListener })),
        React.createElement(Grid, { item: true, className: "w-full pb-2" },
            React.createElement(DefaultComparatorProvider, null,
                React.createElement(FilterComparator, { filter: filter, setFilter: setFilter }))),
        React.createElement(Grid, { "data-id": "filter-input", item: true, className: "w-full" },
            React.createElement(DefaultFilterInputProvider, null,
                React.createElement(FilterInput, { filter: filter, setFilter: setFilter, errorListener: errorListener })))));
};
export default hot(module)(Filter);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9maWx0ZXIvZmlsdGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztJQWFJO0FBRUosT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFFOUIsT0FBTyxnQkFBZ0IsTUFBTSxxQkFBcUIsQ0FBQTtBQUNsRCxPQUFPLFdBQVcsTUFBTSxnQkFBZ0IsQ0FBQTtBQUV4QyxPQUFPLElBQUksTUFBTSxvQkFBb0IsQ0FBQTtBQUVyQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQ2xELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFBO0FBQy9FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBVXhFLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO0lBQy9DLG9CQUFvQixFQUFFLFNBQW9DO0NBQzNELENBQUMsQ0FBQTtBQUNGLElBQU0sTUFBTSxHQUFHLFVBQUMsRUFBMkM7UUFBekMsTUFBTSxZQUFBLEVBQUUsU0FBUyxlQUFBLEVBQUUsYUFBYSxtQkFBQTtJQUNoRCxPQUFPLENBQ0wsb0JBQUMsSUFBSSxJQUFDLFNBQVMsUUFBQyxTQUFTLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsU0FBUyxFQUFDLFFBQVE7UUFDdkUsb0JBQUMsSUFBSSxJQUFDLElBQUksUUFBQyxTQUFTLEVBQUMsYUFBYTtZQUNoQyxvQkFBQyxjQUFjLElBQ2IsTUFBTSxFQUFFLE1BQU0sRUFDZCxTQUFTLEVBQUUsU0FBUyxFQUNwQixhQUFhLEVBQUUsYUFBYSxHQUM1QixDQUNHO1FBQ1Asb0JBQUMsSUFBSSxJQUFDLElBQUksUUFBQyxTQUFTLEVBQUMsYUFBYTtZQUNoQyxvQkFBQyx5QkFBeUI7Z0JBQ3hCLG9CQUFDLGdCQUFnQixJQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsR0FBSSxDQUNoQyxDQUN2QjtRQUNQLG9CQUFDLElBQUksZUFBUyxjQUFjLEVBQUMsSUFBSSxRQUFDLFNBQVMsRUFBQyxRQUFRO1lBQ2xELG9CQUFDLDBCQUEwQjtnQkFDekIsb0JBQUMsV0FBVyxJQUNWLE1BQU0sRUFBRSxNQUFNLEVBQ2QsU0FBUyxFQUFFLFNBQVMsRUFDcEIsYUFBYSxFQUFFLGFBQWEsR0FDNUIsQ0FDeUIsQ0FDeEIsQ0FDRixDQUNSLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxlQUFlLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBDb2RpY2UgRm91bmRhdGlvblxuICpcbiAqIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXJcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlXG4gKiBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0XG4gKiBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuIEEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBpcyBkaXN0cmlidXRlZCBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbSBhbmQgY2FuIGJlIGZvdW5kIGF0XG4gKiA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2xncGwuaHRtbD4uXG4gKlxuICoqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IEZpbHRlckNvbXBhcmF0b3IgZnJvbSAnLi9maWx0ZXItY29tcGFyYXRvcidcbmltcG9ydCBGaWx0ZXJJbnB1dCBmcm9tICcuL2ZpbHRlci1pbnB1dCdcbmltcG9ydCB7IEF0dHJpYnV0ZSB9IGZyb20gJy4vZmlsdGVySGVscGVyJ1xuaW1wb3J0IEdyaWQgZnJvbSAnQG11aS9tYXRlcmlhbC9HcmlkJ1xuXG5pbXBvcnQgeyBob3QgfSBmcm9tICdyZWFjdC1ob3QtbG9hZGVyJ1xuaW1wb3J0IHsgRmlsdGVyQ2xhc3MgfSBmcm9tICcuLi8uLi9jb21wb25lbnQvZmlsdGVyLWJ1aWxkZXIvZmlsdGVyLnN0cnVjdHVyZSdcbmltcG9ydCB7IFZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICcuLi9sb2NhdGlvbi92YWxpZGF0b3JzJ1xuaW1wb3J0IHsgRmlsdGVyUHJvcGVydHkgfSBmcm9tICcuL2ZpbHRlci1wcm9wZXJ0eSdcbmltcG9ydCB7IERlZmF1bHRDb21wYXJhdG9yUHJvdmlkZXIgfSBmcm9tICcuL2ZpbHRlci1jb21wYXJhdG9yL2NvbXBhcmF0b3JVdGlscydcbmltcG9ydCB7IERlZmF1bHRGaWx0ZXJJbnB1dFByb3ZpZGVyIH0gZnJvbSAnLi9maWx0ZXItaW5wdXQvZmlsdGVyLWlucHV0J1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgZmlsdGVyOiBGaWx0ZXJDbGFzc1xuICBzZXRGaWx0ZXI6IChmaWx0ZXI6IEZpbHRlckNsYXNzKSA9PiB2b2lkXG4gIGVycm9yTGlzdGVuZXI/OiAodmFsaWRhdGlvblJlc3VsdHM6IHtcbiAgICBba2V5OiBzdHJpbmddOiBWYWxpZGF0aW9uUmVzdWx0IHwgdW5kZWZpbmVkXG4gIH0pID0+IHZvaWRcbn1cblxuZXhwb3J0IGNvbnN0IEZpbHRlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgbGltaXRlZEF0dHJpYnV0ZUxpc3Q6IHVuZGVmaW5lZCBhcyB1bmRlZmluZWQgfCBBdHRyaWJ1dGVbXSxcbn0pXG5jb25zdCBGaWx0ZXIgPSAoeyBmaWx0ZXIsIHNldEZpbHRlciwgZXJyb3JMaXN0ZW5lciB9OiBQcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxHcmlkIGNvbnRhaW5lciBkaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgY2xhc3NOYW1lPVwidy1mdWxsXCI+XG4gICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInctZnVsbCBwYi0yXCI+XG4gICAgICAgIDxGaWx0ZXJQcm9wZXJ0eVxuICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgIHNldEZpbHRlcj17c2V0RmlsdGVyfVxuICAgICAgICAgIGVycm9yTGlzdGVuZXI9e2Vycm9yTGlzdGVuZXJ9XG4gICAgICAgIC8+XG4gICAgICA8L0dyaWQ+XG4gICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInctZnVsbCBwYi0yXCI+XG4gICAgICAgIDxEZWZhdWx0Q29tcGFyYXRvclByb3ZpZGVyPlxuICAgICAgICAgIDxGaWx0ZXJDb21wYXJhdG9yIGZpbHRlcj17ZmlsdGVyfSBzZXRGaWx0ZXI9e3NldEZpbHRlcn0gLz5cbiAgICAgICAgPC9EZWZhdWx0Q29tcGFyYXRvclByb3ZpZGVyPlxuICAgICAgPC9HcmlkPlxuICAgICAgPEdyaWQgZGF0YS1pZD1cImZpbHRlci1pbnB1dFwiIGl0ZW0gY2xhc3NOYW1lPVwidy1mdWxsXCI+XG4gICAgICAgIDxEZWZhdWx0RmlsdGVySW5wdXRQcm92aWRlcj5cbiAgICAgICAgICA8RmlsdGVySW5wdXRcbiAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgICAgc2V0RmlsdGVyPXtzZXRGaWx0ZXJ9XG4gICAgICAgICAgICBlcnJvckxpc3RlbmVyPXtlcnJvckxpc3RlbmVyfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRGVmYXVsdEZpbHRlcklucHV0UHJvdmlkZXI+XG4gICAgICA8L0dyaWQ+XG4gICAgPC9HcmlkPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGhvdChtb2R1bGUpKEZpbHRlcilcbiJdfQ==