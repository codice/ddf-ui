import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import * as React from 'react';
import FilterComparator from './filter-comparator';
import FilterInput from './filter-input';
import Grid from '@mui/material/Grid';
import { FilterProperty } from './filter-property';
import { DefaultComparatorProvider } from './filter-comparator/comparatorUtils';
import { DefaultFilterInputProvider } from './filter-input/filter-input';
export var FilterContext = React.createContext({
    limitedAttributeList: undefined,
});
var Filter = function (_a) {
    var filter = _a.filter, setFilter = _a.setFilter, errorListener = _a.errorListener;
    return (_jsxs(Grid, { container: true, direction: "column", alignItems: "center", className: "w-full", children: [_jsx(Grid, { item: true, className: "w-full pb-2", children: _jsx(FilterProperty, { filter: filter, setFilter: setFilter, errorListener: errorListener }) }), _jsx(Grid, { item: true, className: "w-full pb-2", children: _jsx(DefaultComparatorProvider, { children: _jsx(FilterComparator, { filter: filter, setFilter: setFilter }) }) }), _jsx(Grid, { "data-id": "filter-input", item: true, className: "w-full", children: _jsx(DefaultFilterInputProvider, { children: _jsx(FilterInput, { filter: filter, setFilter: setFilter, errorListener: errorListener }) }) })] }));
};
export default Filter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL3JlYWN0LWNvbXBvbmVudC9maWx0ZXIvZmlsdGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7SUFhSTtBQUVKLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBRTlCLE9BQU8sZ0JBQWdCLE1BQU0scUJBQXFCLENBQUE7QUFDbEQsT0FBTyxXQUFXLE1BQU0sZ0JBQWdCLENBQUE7QUFFeEMsT0FBTyxJQUFJLE1BQU0sb0JBQW9CLENBQUE7QUFJckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQ2xELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFBO0FBQy9FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBVXhFLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO0lBQy9DLG9CQUFvQixFQUFFLFNBQW9DO0NBQzNELENBQUMsQ0FBQTtBQUNGLElBQU0sTUFBTSxHQUFHLFVBQUMsRUFBMkM7UUFBekMsTUFBTSxZQUFBLEVBQUUsU0FBUyxlQUFBLEVBQUUsYUFBYSxtQkFBQTtJQUNoRCxPQUFPLENBQ0wsTUFBQyxJQUFJLElBQUMsU0FBUyxRQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxTQUFTLEVBQUMsUUFBUSxhQUN2RSxLQUFDLElBQUksSUFBQyxJQUFJLFFBQUMsU0FBUyxFQUFDLGFBQWEsWUFDaEMsS0FBQyxjQUFjLElBQ2IsTUFBTSxFQUFFLE1BQU0sRUFDZCxTQUFTLEVBQUUsU0FBUyxFQUNwQixhQUFhLEVBQUUsYUFBYSxHQUM1QixHQUNHLEVBQ1AsS0FBQyxJQUFJLElBQUMsSUFBSSxRQUFDLFNBQVMsRUFBQyxhQUFhLFlBQ2hDLEtBQUMseUJBQXlCLGNBQ3hCLEtBQUMsZ0JBQWdCLElBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxHQUFJLEdBQ2hDLEdBQ3ZCLEVBQ1AsS0FBQyxJQUFJLGVBQVMsY0FBYyxFQUFDLElBQUksUUFBQyxTQUFTLEVBQUMsUUFBUSxZQUNsRCxLQUFDLDBCQUEwQixjQUN6QixLQUFDLFdBQVcsSUFDVixNQUFNLEVBQUUsTUFBTSxFQUNkLFNBQVMsRUFBRSxTQUFTLEVBQ3BCLGFBQWEsRUFBRSxhQUFhLEdBQzVCLEdBQ3lCLEdBQ3hCLElBQ0YsQ0FDUixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsZUFBZSxNQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgQ29kaWNlIEZvdW5kYXRpb25cbiAqXG4gKiBUaGlzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dFxuICogZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLiBBIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogaXMgZGlzdHJpYnV0ZWQgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0gYW5kIGNhbiBiZSBmb3VuZCBhdFxuICogPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWw+LlxuICpcbiAqKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBGaWx0ZXJDb21wYXJhdG9yIGZyb20gJy4vZmlsdGVyLWNvbXBhcmF0b3InXG5pbXBvcnQgRmlsdGVySW5wdXQgZnJvbSAnLi9maWx0ZXItaW5wdXQnXG5pbXBvcnQgeyBBdHRyaWJ1dGUgfSBmcm9tICcuL2ZpbHRlckhlbHBlcidcbmltcG9ydCBHcmlkIGZyb20gJ0BtdWkvbWF0ZXJpYWwvR3JpZCdcblxuaW1wb3J0IHsgRmlsdGVyQ2xhc3MgfSBmcm9tICcuLi8uLi9jb21wb25lbnQvZmlsdGVyLWJ1aWxkZXIvZmlsdGVyLnN0cnVjdHVyZSdcbmltcG9ydCB7IFZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICcuLi9sb2NhdGlvbi92YWxpZGF0b3JzJ1xuaW1wb3J0IHsgRmlsdGVyUHJvcGVydHkgfSBmcm9tICcuL2ZpbHRlci1wcm9wZXJ0eSdcbmltcG9ydCB7IERlZmF1bHRDb21wYXJhdG9yUHJvdmlkZXIgfSBmcm9tICcuL2ZpbHRlci1jb21wYXJhdG9yL2NvbXBhcmF0b3JVdGlscydcbmltcG9ydCB7IERlZmF1bHRGaWx0ZXJJbnB1dFByb3ZpZGVyIH0gZnJvbSAnLi9maWx0ZXItaW5wdXQvZmlsdGVyLWlucHV0J1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgZmlsdGVyOiBGaWx0ZXJDbGFzc1xuICBzZXRGaWx0ZXI6IChmaWx0ZXI6IEZpbHRlckNsYXNzKSA9PiB2b2lkXG4gIGVycm9yTGlzdGVuZXI/OiAodmFsaWRhdGlvblJlc3VsdHM6IHtcbiAgICBba2V5OiBzdHJpbmddOiBWYWxpZGF0aW9uUmVzdWx0IHwgdW5kZWZpbmVkXG4gIH0pID0+IHZvaWRcbn1cblxuZXhwb3J0IGNvbnN0IEZpbHRlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgbGltaXRlZEF0dHJpYnV0ZUxpc3Q6IHVuZGVmaW5lZCBhcyB1bmRlZmluZWQgfCBBdHRyaWJ1dGVbXSxcbn0pXG5jb25zdCBGaWx0ZXIgPSAoeyBmaWx0ZXIsIHNldEZpbHRlciwgZXJyb3JMaXN0ZW5lciB9OiBQcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxHcmlkIGNvbnRhaW5lciBkaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgY2xhc3NOYW1lPVwidy1mdWxsXCI+XG4gICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInctZnVsbCBwYi0yXCI+XG4gICAgICAgIDxGaWx0ZXJQcm9wZXJ0eVxuICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgIHNldEZpbHRlcj17c2V0RmlsdGVyfVxuICAgICAgICAgIGVycm9yTGlzdGVuZXI9e2Vycm9yTGlzdGVuZXJ9XG4gICAgICAgIC8+XG4gICAgICA8L0dyaWQ+XG4gICAgICA8R3JpZCBpdGVtIGNsYXNzTmFtZT1cInctZnVsbCBwYi0yXCI+XG4gICAgICAgIDxEZWZhdWx0Q29tcGFyYXRvclByb3ZpZGVyPlxuICAgICAgICAgIDxGaWx0ZXJDb21wYXJhdG9yIGZpbHRlcj17ZmlsdGVyfSBzZXRGaWx0ZXI9e3NldEZpbHRlcn0gLz5cbiAgICAgICAgPC9EZWZhdWx0Q29tcGFyYXRvclByb3ZpZGVyPlxuICAgICAgPC9HcmlkPlxuICAgICAgPEdyaWQgZGF0YS1pZD1cImZpbHRlci1pbnB1dFwiIGl0ZW0gY2xhc3NOYW1lPVwidy1mdWxsXCI+XG4gICAgICAgIDxEZWZhdWx0RmlsdGVySW5wdXRQcm92aWRlcj5cbiAgICAgICAgICA8RmlsdGVySW5wdXRcbiAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgICAgc2V0RmlsdGVyPXtzZXRGaWx0ZXJ9XG4gICAgICAgICAgICBlcnJvckxpc3RlbmVyPXtlcnJvckxpc3RlbmVyfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRGVmYXVsdEZpbHRlcklucHV0UHJvdmlkZXI+XG4gICAgICA8L0dyaWQ+XG4gICAgPC9HcmlkPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlclxuIl19