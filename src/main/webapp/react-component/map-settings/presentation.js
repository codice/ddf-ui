import { __makeTemplateObject } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from 'styled-components';
import ExampleCoordinates from './example-coordinates';
import FormGroup from '@mui/material/FormGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import Typography from '@mui/material/Typography';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
var Root = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  overflow: auto;\n  min-width: ", ";\n  padding: ", ";\n"], ["\n  overflow: auto;\n  min-width: ", ";\n  padding: ", ";\n"])), function (props) { return props.theme.minimumScreenSize; }, function (props) { return props.theme.minimumSpacing; });
var coordinateFormatOptions = [
    { label: 'Degrees, Minutes, Seconds', value: 'degrees' },
    { label: 'Decimal', value: 'decimal' },
    { label: 'MGRS', value: 'mgrs' },
    { label: 'UTM/UPS', value: 'utm' },
    { label: 'Well Known Text', value: 'wkt' },
];
var render = function (_a) {
    var coordFormat = _a.coordFormat, updateCoordFormat = _a.updateCoordFormat, autoPan = _a.autoPan, updateAutoPan = _a.updateAutoPan;
    return (_jsxs(Root, { children: [_jsx(FormGroup, { row: true, children: _jsx(FormControlLabel, { control: _jsx(Checkbox, { id: "auto-pan-checkbox", autoFocus: true, onKeyPress: function (e) {
                            if (e.key === 'Enter') {
                                updateAutoPan(e, !autoPan);
                            }
                        }, checked: autoPan, onChange: updateAutoPan, color: "primary", name: "autoPan" }), label: _jsx(Typography, { variant: "body2", children: "Auto-Pan" }), labelPlacement: "start", style: { paddingLeft: '10px' } }) }), _jsxs("div", { style: { padding: '0 10px' }, children: [_jsx(Typography, { variant: "body2", children: "Coordinate Format" }), _jsx(Select, { id: "coordinate-format-select", onChange: function (event) {
                            updateCoordFormat(event.target.value);
                        }, value: coordFormat, variant: "outlined", margin: "dense", fullWidth: true, MenuProps: {
                            anchorOrigin: {
                                vertical: 'bottom',
                                horizontal: 'left',
                            },
                            transformOrigin: {
                                vertical: 'top',
                                horizontal: 'left',
                            },
                        }, children: coordinateFormatOptions.map(function (option) {
                            return (_jsx(MenuItem, { value: option.value, children: _jsx(Typography, { variant: "subtitle2", children: option.label }) }, option.value));
                        }) })] }), _jsx(ExampleCoordinates, { selected: coordFormat })] }));
};
export default render;
export var testComponent = render;
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,