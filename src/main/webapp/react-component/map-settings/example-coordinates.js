import { __makeTemplateObject } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import styled from 'styled-components';
// @ts-expect-error ts-migrate(7016) FIXME: Could not find a declaration file for module 'mt-g... Remove this comment to see the full error message
import mtgeo from 'mt-geo';
var Root = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  padding: ", ";\n  position: relative;\n\n  &.example-label,\n  &.example-value {\n    width: 50%;\n    display: inline-block;\n    vertical-align: middle;\n    position: relative;\n  }\n\n  &.example-label {\n    text-align: right;\n  }\n"], ["\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  padding: ", ";\n  position: relative;\n\n  &.example-label,\n  &.example-value {\n    width: 50%;\n    display: inline-block;\n    vertical-align: middle;\n    position: relative;\n  }\n\n  &.example-label {\n    text-align: right;\n  }\n"])), function (props) { return props.theme.minimumSpacing; });
var Label = styled.label(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  .example-label & {\n    vertical-align: middle;\n    cursor: auto;\n    font-weight: bolder;\n    max-width: calc(100% - ", ");\n    margin: 0px;\n    line-height: 1.4;\n    padding: ", " 0px;\n    min-height: ", ";\n    overflow: hidden;\n    text-overflow: ellipsis;\n    word-wrap: normal;\n    white-space: normal;\n  }\n"], ["\n  .example-label & {\n    vertical-align: middle;\n    cursor: auto;\n    font-weight: bolder;\n    max-width: calc(100% - ", ");\n    margin: 0px;\n    line-height: 1.4;\n    padding: ", " 0px;\n    min-height: ", ";\n    overflow: hidden;\n    text-overflow: ellipsis;\n    word-wrap: normal;\n    white-space: normal;\n  }\n"])), function (props) { return props.theme.minimumButtonSize; }, function (props) { return props.theme.minimumSpacing; }, function (props) { return props.theme.minimumButtonSize; });
var exampleLat = '14.94', exampleLon = '-11.875';
var defaultExamples = {
    degrees: "".concat(mtgeo.toLat(exampleLat), " ").concat(mtgeo.toLon(exampleLon)),
    decimal: "".concat(exampleLat, " ").concat(exampleLon),
    mgrs: '4Q FL 23009 12331',
    utm: '14N 1925mE 1513mN',
    wkt: 'POINT (50 40)',
};
var render = function (props) {
    var selected = props.selected, _a = props.examples, examples = _a === void 0 ? defaultExamples : _a;
    var example = examples[selected];
    if (typeof example === 'undefined') {
        console.warn("Unrecognized coordinate format value [".concat(selected, "]"));
    }
    return (_jsxs(Root, { children: [_jsx("div", { className: "example-label", children: _jsx(Label, { children: "Example Coordinates" }) }), _jsx("div", { className: "example-value", children: _jsx("span", { children: example }) })] }));
};
export default render;
export var testComponent = render;
var templateObject_1, templateObject_2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS1jb29yZGluYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3dlYmFwcC9yZWFjdC1jb21wb25lbnQvbWFwLXNldHRpbmdzL2V4YW1wbGUtY29vcmRpbmF0ZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7SUFhSTtBQUVKLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFBO0FBRXRDLG1KQUFtSjtBQUNuSixPQUFPLEtBQUssTUFBTSxRQUFRLENBQUE7QUFPMUIsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsa1hBQUEsMEVBSVYsRUFBcUMsbU9BY2pELEtBZFksVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBMUIsQ0FBMEIsQ0FjakQsQ0FBQTtBQUVELElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLDhZQUFBLCtIQUtHLEVBQXdDLDREQUd0RCxFQUFxQyx5QkFDbEMsRUFBd0MsaUhBTXpELEtBVjRCLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBN0IsQ0FBNkIsRUFHdEQsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBMUIsQ0FBMEIsRUFDbEMsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUE3QixDQUE2QixDQU16RCxDQUFBO0FBQ0QsSUFBTSxVQUFVLEdBQUcsT0FBTyxFQUN4QixVQUFVLEdBQUcsU0FBUyxDQUFBO0FBQ3hCLElBQU0sZUFBZSxHQUFHO0lBQ3RCLE9BQU8sRUFBRSxVQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLGNBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBRTtJQUNoRSxPQUFPLEVBQUUsVUFBRyxVQUFVLGNBQUksVUFBVSxDQUFFO0lBQ3RDLElBQUksRUFBRSxtQkFBbUI7SUFDekIsR0FBRyxFQUFFLG1CQUFtQjtJQUN4QixHQUFHLEVBQUUsZUFBZTtDQUdyQixDQUFBO0FBRUQsSUFBTSxNQUFNLEdBQUcsVUFBQyxLQUFZO0lBQ2xCLElBQUEsUUFBUSxHQUFpQyxLQUFLLFNBQXRDLEVBQUUsS0FBK0IsS0FBSyxTQUFWLEVBQTFCLFFBQVEsbUJBQUcsZUFBZSxLQUFBLENBQVU7SUFDdEQsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2xDLElBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxFQUFFLENBQUM7UUFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQyxnREFBeUMsUUFBUSxNQUFHLENBQUMsQ0FBQTtJQUNwRSxDQUFDO0lBQ0QsT0FBTyxDQUNMLE1BQUMsSUFBSSxlQUNILGNBQUssU0FBUyxFQUFDLGVBQWUsWUFDNUIsS0FBQyxLQUFLLHNDQUE0QixHQUM5QixFQUNOLGNBQUssU0FBUyxFQUFDLGVBQWUsWUFDNUIseUJBQU8sT0FBTyxHQUFRLEdBQ2xCLElBQ0QsQ0FDUixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsZUFBZSxNQUFNLENBQUE7QUFDckIsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBDb2RpY2UgRm91bmRhdGlvblxuICpcbiAqIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXJcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlXG4gKiBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0XG4gKiBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuIEEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBpcyBkaXN0cmlidXRlZCBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbSBhbmQgY2FuIGJlIGZvdW5kIGF0XG4gKiA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2xncGwuaHRtbD4uXG4gKlxuICoqL1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG4vLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoNzAxNikgRklYTUU6IENvdWxkIG5vdCBmaW5kIGEgZGVjbGFyYXRpb24gZmlsZSBmb3IgbW9kdWxlICdtdC1nLi4uIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG8gc2VlIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2VcbmltcG9ydCBtdGdlbyBmcm9tICdtdC1nZW8nXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNlbGVjdGVkOiBzdHJpbmdcbiAgZXhhbXBsZXM/OiB7IFtpbmRleDogc3RyaW5nXTogc3RyaW5nIH1cbn1cblxuY29uc3QgUm9vdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgcGFkZGluZzogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLm1pbmltdW1TcGFjaW5nfTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICYuZXhhbXBsZS1sYWJlbCxcbiAgJi5leGFtcGxlLXZhbHVlIHtcbiAgICB3aWR0aDogNTAlO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuXG4gICYuZXhhbXBsZS1sYWJlbCB7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIH1cbmBcblxuY29uc3QgTGFiZWwgPSBzdHlsZWQubGFiZWxgXG4gIC5leGFtcGxlLWxhYmVsICYge1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgY3Vyc29yOiBhdXRvO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG4gICAgbWF4LXdpZHRoOiBjYWxjKDEwMCUgLSAkeyhwcm9wcykgPT4gcHJvcHMudGhlbWUubWluaW11bUJ1dHRvblNpemV9KTtcbiAgICBtYXJnaW46IDBweDtcbiAgICBsaW5lLWhlaWdodDogMS40O1xuICAgIHBhZGRpbmc6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5taW5pbXVtU3BhY2luZ30gMHB4O1xuICAgIG1pbi1oZWlnaHQ6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5taW5pbXVtQnV0dG9uU2l6ZX07XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICB3b3JkLXdyYXA6IG5vcm1hbDtcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICB9XG5gXG5jb25zdCBleGFtcGxlTGF0ID0gJzE0Ljk0JyxcbiAgZXhhbXBsZUxvbiA9ICctMTEuODc1J1xuY29uc3QgZGVmYXVsdEV4YW1wbGVzID0ge1xuICBkZWdyZWVzOiBgJHttdGdlby50b0xhdChleGFtcGxlTGF0KX0gJHttdGdlby50b0xvbihleGFtcGxlTG9uKX1gLFxuICBkZWNpbWFsOiBgJHtleGFtcGxlTGF0fSAke2V4YW1wbGVMb259YCxcbiAgbWdyczogJzRRIEZMIDIzMDA5IDEyMzMxJyxcbiAgdXRtOiAnMTROIDE5MjVtRSAxNTEzbU4nLFxuICB3a3Q6ICdQT0lOVCAoNTAgNDApJyxcbn0gYXMge1xuICBbaW5kZXg6IHN0cmluZ106IHN0cmluZ1xufVxuXG5jb25zdCByZW5kZXIgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgc2VsZWN0ZWQsIGV4YW1wbGVzID0gZGVmYXVsdEV4YW1wbGVzIH0gPSBwcm9wc1xuICBjb25zdCBleGFtcGxlID0gZXhhbXBsZXNbc2VsZWN0ZWRdXG4gIGlmICh0eXBlb2YgZXhhbXBsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLndhcm4oYFVucmVjb2duaXplZCBjb29yZGluYXRlIGZvcm1hdCB2YWx1ZSBbJHtzZWxlY3RlZH1dYClcbiAgfVxuICByZXR1cm4gKFxuICAgIDxSb290PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJleGFtcGxlLWxhYmVsXCI+XG4gICAgICAgIDxMYWJlbD5FeGFtcGxlIENvb3JkaW5hdGVzPC9MYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJleGFtcGxlLXZhbHVlXCI+XG4gICAgICAgIDxzcGFuPntleGFtcGxlfTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUm9vdD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCByZW5kZXJcbmV4cG9ydCBjb25zdCB0ZXN0Q29tcG9uZW50ID0gcmVuZGVyXG4iXX0=